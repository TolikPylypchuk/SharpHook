{
  "api/SharpHook.EventSimulator.html": {
    "href": "api/SharpHook.EventSimulator.html",
    "title": "Class EventSimulator | SharpHook",
    "summary": "Class EventSimulator Namespace SharpHook Assembly SharpHook.dll A keyboard and mouse event simulator which posts events to a simulation provider (libuiohook by default). public class EventSimulator : IEventSimulator Inheritance object EventSimulator Implements IEventSimulator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EventSimulator() Initializes a new instance of the EventSimulator class. public EventSimulator() EventSimulator(IEventSimulationProvider?) A keyboard and mouse event simulator which posts events to a simulation provider (libuiohook by default). public EventSimulator(IEventSimulationProvider? simulationProvider) Parameters simulationProvider IEventSimulationProvider The simulation functionality provider (or Instance if null). See Also IEventSimulationProvider PostEvent(ref UioHookEvent) Properties TextSimulationDelayOnX11 Gets or sets the delay between simulating individual characters when simulating text on Linux. public TimeSpan TextSimulationDelayOnX11 { get; set; } Property Value TimeSpan The delay between simulating individual characters when simulating text on Linux. Remarks X11 doesn't support simulating arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this property is ignored. Exceptions ArgumentOutOfRangeException value represents a negative time span. Methods SimulateKeyPress(KeyCode) Simulates pressing a key. public UioHookResult SimulateKeyPress(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to press. Returns UioHookResult The result of the operation. SimulateKeyRelease(KeyCode) Simulates releasing a key. public UioHookResult SimulateKeyRelease(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to release. Returns UioHookResult The result of the operation. SimulateMouseMovement(short, short) Simulates moving a mouse pointer. public UioHookResult SimulateMouseMovement(short x, short y) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. Returns UioHookResult The result of the operation. SimulateMouseMovementRelative(short, short) Simulates moving a mouse pointer relative to the current cursor position. public UioHookResult SimulateMouseMovementRelative(short x, short y) Parameters x short The X-coordinate offset. y short The Y-coordinate offset. Returns UioHookResult The result of the operation. SimulateMousePress(MouseButton) Simulates pressing a mouse button at the current coordinates. public UioHookResult SimulateMousePress(MouseButton button) Parameters button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. SimulateMousePress(MouseButton, ushort) Simulates pressing a mouse button at the current coordinates. public UioHookResult SimulateMousePress(MouseButton button, ushort clicks) Parameters button MouseButton The mouse button to press. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMousePress(short, short, MouseButton) Simulates pressing a mouse button at the specified coordinates. public UioHookResult SimulateMousePress(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. SimulateMousePress(short, short, MouseButton, ushort) Simulates pressing a mouse button at the specified coordinates. public UioHookResult SimulateMousePress(short x, short y, MouseButton button, ushort clicks) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMouseRelease(MouseButton) Simulates releasing a mouse button at the current coordinates. public UioHookResult SimulateMouseRelease(MouseButton button) Parameters button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. SimulateMouseRelease(MouseButton, ushort) Simulates releasing a mouse button at the current coordinates. public UioHookResult SimulateMouseRelease(MouseButton button, ushort clicks) Parameters button MouseButton The mouse button to release. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMouseRelease(short, short, MouseButton) Simulates releasing a mouse button at the specified coordinates. public UioHookResult SimulateMouseRelease(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. SimulateMouseRelease(short, short, MouseButton, ushort) Simulates releasing a mouse button at the specified coordinates. public UioHookResult SimulateMouseRelease(short x, short y, MouseButton button, ushort clicks) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) Simulates scrolling the mouse wheel. public UioHookResult SimulateMouseWheel(short rotation, MouseWheelScrollDirection direction = MouseWheelScrollDirection.Vertical, MouseWheelScrollType type = MouseWheelScrollType.UnitScroll) Parameters rotation short The wheel rotation. A positive value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. direction MouseWheelScrollDirection The scroll direction. type MouseWheelScrollType The scroll type (considered only on macOS). Returns UioHookResult The result of the operation. Remarks On Windows the value 120 represents the default wheel step. As such, multiples of 120 can be used, but it's not required. The value of type is ignored. On macOS it's recommended to use values between -10 and 10. This will result in quite a small scroll amount with pixel scrolling, so BlockScroll is recommended for line scrolling instead of pixel scrolling. On Linux there is no fixed recommendation, but multiples of 100 can be used. The value of type is ignored. SimulateTextEntry(string) Simulates the input of arbitrary Unicode characters. public UioHookResult SimulateTextEntry(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. TextSimulationDelayOnX11 can be used to increase (or decrease) the delay if needed - longer delays add consistency but may be more jarring to end users. TextSimulationDelayOnX11 can also be used to get the currently configured delay - the default is 50 milliseconds. Exceptions ArgumentNullException text is null. See Also IEventSimulationProvider PostEvent(ref UioHookEvent)"
  },
  "api/SharpHook.GlobalHookBase.html": {
    "href": "api/SharpHook.GlobalHookBase.html",
    "title": "Class GlobalHookBase | SharpHook",
    "summary": "Class GlobalHookBase Namespace SharpHook Assembly SharpHook.dll Represents an abstract implementation of IGlobalHook which defines everything needed except for a strategy for dispatching events and uses a global hook provider (libuiohook by default). public abstract class GlobalHookBase : IGlobalHook, IDisposable Inheritance object GlobalHookBase Implements IGlobalHook IDisposable Derived SimpleGlobalHook TaskPoolGlobalHook Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors GlobalHookBase() Initializes a new instance of GlobalHookBase. protected GlobalHookBase() GlobalHookBase(GlobalHookType, IGlobalHookProvider?, bool) Initializes a new instance of GlobalHookBase. protected GlobalHookBase(GlobalHookType globalHookType = GlobalHookType.All, IGlobalHookProvider? globalHookProvider = null, bool runAsyncOnBackgroundThread = false) Parameters globalHookType GlobalHookType The global hook type. globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. GlobalHookBase(IGlobalHookProvider?) Initializes a new instance of GlobalHookBase. protected GlobalHookBase(IGlobalHookProvider? globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. GlobalHookBase(IGlobalHookProvider?, bool) Initializes a new instance of GlobalHookBase. protected GlobalHookBase(IGlobalHookProvider? globalHookProvider, bool runAsyncOnBackgroundThread) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. GlobalHookBase(bool) Initializes a new instance of GlobalHookBase. protected GlobalHookBase(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Properties IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. Methods DispatchEvent(ref UioHookEvent) Dispatches an event from libuiohook, i.e. raises the appropriate event. protected void DispatchEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to dispatch. Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IGlobalHook. Exceptions HookException Stopping the hook has failed. Dispose(bool) Destoys the global hook. protected virtual void Dispose(bool disposing) Parameters disposing bool true if the method is called from the Dispose() method. Otherwise, false. Exceptions HookException Stopping the hook has failed. ~GlobalHookBase() Destroys the global hook if it's running. protected ~GlobalHookBase() HandleHookEvent(ref UioHookEvent) When implemented in a derived class, represents a strategy for handling a hook event. protected abstract void HandleHookEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to handle. Remarks Derived classes should call DispatchEvent(ref UioHookEvent) inside this method to raise the appropriate event. OnHookDisabled(HookEventArgs) Raises the HookDisabled event with this object as the sender. protected virtual void OnHookDisabled(HookEventArgs args) Parameters args HookEventArgs The arguments of the event. OnHookEnabled(HookEventArgs) Raises the HookEnabled event with this object as the sender. protected virtual void OnHookEnabled(HookEventArgs args) Parameters args HookEventArgs The arguments of the event. OnKeyPressed(KeyboardHookEventArgs) Raises the KeyPressed event with this object as the sender. protected virtual void OnKeyPressed(KeyboardHookEventArgs args) Parameters args KeyboardHookEventArgs The arguments of the event. OnKeyReleased(KeyboardHookEventArgs) Raises the KeyReleased event with this object as the sender. protected virtual void OnKeyReleased(KeyboardHookEventArgs args) Parameters args KeyboardHookEventArgs The arguments of the event. OnKeyTyped(KeyboardHookEventArgs) Raises the KeyTyped event with this object as the sender. protected virtual void OnKeyTyped(KeyboardHookEventArgs args) Parameters args KeyboardHookEventArgs The arguments of the event. OnMouseClicked(MouseHookEventArgs) Raises the MouseClicked event with this object as the sender. protected virtual void OnMouseClicked(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. OnMouseDragged(MouseHookEventArgs) Raises the MouseDragged event with this object as the sender. protected virtual void OnMouseDragged(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. OnMouseMoved(MouseHookEventArgs) Raises the MouseMoved event with this object as the sender. protected virtual void OnMouseMoved(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. OnMousePressed(MouseHookEventArgs) Raises the MousePressed event with this object as the sender. protected virtual void OnMousePressed(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. OnMouseReleased(MouseHookEventArgs) Raises the MouseReleased event with this object as the sender. protected virtual void OnMouseReleased(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. OnMouseWheel(MouseWheelHookEventArgs) Raises the MouseWheel event with this object as the sender. protected virtual void OnMouseWheel(MouseWheelHookEventArgs args) Parameters args MouseWheelHookEventArgs The arguments of the event. Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public Task RunAsync() Returns Task A Task which finishes when the hook is destroyed. Remarks The hook is started on a separate thread. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. ThrowIfDisposed(string?) Throws an ObjectDisposedException if this object is disposed. protected void ThrowIfDisposed(string? method = null) Parameters method string The method which calls this method. Events HookDisabled An event which is raised when the global hook is disabled. public event EventHandler<HookEventArgs>? HookDisabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Dispose() method is called. HookEnabled An event which is raised when the global hook is enabled. public event EventHandler<HookEventArgs>? HookEnabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Run() or RunAsync() method is called. KeyPressed An event which is raised when a key is pressed. public event EventHandler<KeyboardHookEventArgs>? KeyPressed Event Type EventHandler<KeyboardHookEventArgs> KeyReleased An event which is raised when a key is released. public event EventHandler<KeyboardHookEventArgs>? KeyReleased Event Type EventHandler<KeyboardHookEventArgs> KeyTyped An event which is raised when a key is typed. public event EventHandler<KeyboardHookEventArgs>? KeyTyped Event Type EventHandler<KeyboardHookEventArgs> MouseClicked An event which is raised when a mouse button is clicked. public event EventHandler<MouseHookEventArgs>? MouseClicked Event Type EventHandler<MouseHookEventArgs> MouseDragged An event which is raised when the mouse cursor is dragged. public event EventHandler<MouseHookEventArgs>? MouseDragged Event Type EventHandler<MouseHookEventArgs> MouseMoved An event which is raised when the mouse cursor is moved. public event EventHandler<MouseHookEventArgs>? MouseMoved Event Type EventHandler<MouseHookEventArgs> MousePressed An event which is raised when a mouse button is pressed. public event EventHandler<MouseHookEventArgs>? MousePressed Event Type EventHandler<MouseHookEventArgs> MouseReleased An event which is raised when a mouse button is released. public event EventHandler<MouseHookEventArgs>? MouseReleased Event Type EventHandler<MouseHookEventArgs> MouseWheel An event which is raised when the mouse wheel is turned. public event EventHandler<MouseWheelHookEventArgs>? MouseWheel Event Type EventHandler<MouseWheelHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook"
  },
  "api/SharpHook.GlobalHookType.html": {
    "href": "api/SharpHook.GlobalHookType.html",
    "title": "Enum GlobalHookType | SharpHook",
    "summary": "Enum GlobalHookType Namespace SharpHook Assembly SharpHook.dll Represents a global hook type - keyboard hook, mouse hook, or both. [Flags] public enum GlobalHookType Fields All = 0 A global hook for both keyboard and mouse events. Keyboard = 1 A global hook for keyboard events only. Mouse = 2 A global hook for mouse events only."
  },
  "api/SharpHook.HookEventArgs.html": {
    "href": "api/SharpHook.HookEventArgs.html",
    "title": "Class HookEventArgs | SharpHook",
    "summary": "Class HookEventArgs Namespace SharpHook Assembly SharpHook.dll A base class for event args related to the global hook. public class HookEventArgs : EventArgs Inheritance object EventArgs HookEventArgs Derived KeyboardHookEventArgs MouseHookEventArgs MouseWheelHookEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HookEventArgs(UioHookEvent) A base class for event args related to the global hook. public HookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent Properties EventTime Gets the date and time of the event (in UTC), derived from the event's UNIX timestamp. public DateTimeOffset EventTime { get; } Property Value DateTimeOffset The date and time of the event. IsEventSimulated Gets the value which indicates whether the event has been simulated. public bool IsEventSimulated { get; } Property Value bool true is the event has been simulated. Otherwise, false. RawEvent Gets the raw event data. public UioHookEvent RawEvent { get; } Property Value UioHookEvent The raw event data. SuppressEvent Gets or sets whether to suppress the event from further propagation after running the event handler. Events must be suppressed synchronously. Suppressing events works only on Windows and macOS. public bool SuppressEvent { get; set; } Property Value bool true if the event propagation should be suppressed. Otherwise, false. Methods FromEvent(UioHookEvent) Creates a new instance of the HookEventArgs class or a derived class, depending on the event type. public static HookEventArgs FromEvent(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. Returns HookEventArgs See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent"
  },
  "api/SharpHook.HookException.html": {
    "href": "api/SharpHook.HookException.html",
    "title": "Class HookException | SharpHook",
    "summary": "Class HookException Namespace SharpHook Assembly SharpHook.dll Represents an exception related to global hooks. public sealed class HookException : Exception, ISerializable Inheritance object Exception HookException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HookException() Initializes a new instance of the HookException class. public HookException() HookException(UioHookResult) Initializes a new instance of the HookException class. public HookException(UioHookResult result) Parameters result UioHookResult The result of an opetaion which caused this exception. HookException(UioHookResult, Exception) Initializes a new instance of the HookException class. public HookException(UioHookResult result, Exception innerException) Parameters result UioHookResult The result of an opetaion which caused this exception. innerException Exception The exception which caused this exception. HookException(UioHookResult, string) Initializes a new instance of the HookException class. public HookException(UioHookResult result, string message) Parameters result UioHookResult The result of an opetaion which caused this exception. message string The message of the exception. HookException(UioHookResult, string, Exception) Initializes a new instance of the HookException class. public HookException(UioHookResult result, string message, Exception innerException) Parameters result UioHookResult The result of an opetaion which caused this exception. message string The message of the exception. innerException Exception The exception which caused this exception. HookException(string) Initializes a new instance of the HookException class. public HookException(string message) Parameters message string The message of the exception. HookException(string, Exception) Initializes a new instance of the HookException class. public HookException(string message, Exception innerException) Parameters message string The message of the exception. innerException Exception The exception which caused this exception. Properties Result Gets the result of an opetaion which caused this exception. public UioHookResult Result { get; } Property Value UioHookResult The result of an opetaion which caused this exception."
  },
  "api/SharpHook.IEventSimulator.html": {
    "href": "api/SharpHook.IEventSimulator.html",
    "title": "Interface IEventSimulator | SharpHook",
    "summary": "Interface IEventSimulator Namespace SharpHook Assembly SharpHook.dll Represents an object which can simulate keyboard and mouse events. public interface IEventSimulator Remarks The methods of this interface correspond to constants defined in the EventType enum. Properties TextSimulationDelayOnX11 Gets or sets the delay between simulating individual characters when simulating text on Linux. TimeSpan TextSimulationDelayOnX11 { get; set; } Property Value TimeSpan The delay between simulating individual characters when simulating text on Linux. Remarks X11 doesn't support simulating arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this property is ignored. Exceptions ArgumentOutOfRangeException value represents a negative time span. Methods SimulateKeyPress(KeyCode) Simulates pressing a key. UioHookResult SimulateKeyPress(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to press. Returns UioHookResult The result of the operation. SimulateKeyRelease(KeyCode) Simulates releasing a key. UioHookResult SimulateKeyRelease(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to release. Returns UioHookResult The result of the operation. SimulateMouseMovement(short, short) Simulates moving a mouse pointer. UioHookResult SimulateMouseMovement(short x, short y) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. Returns UioHookResult The result of the operation. SimulateMouseMovementRelative(short, short) Simulates moving a mouse pointer relative to the current cursor position. UioHookResult SimulateMouseMovementRelative(short x, short y) Parameters x short The X-coordinate offset. y short The Y-coordinate offset. Returns UioHookResult The result of the operation. SimulateMousePress(MouseButton) Simulates pressing a mouse button at the current coordinates. UioHookResult SimulateMousePress(MouseButton button) Parameters button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. SimulateMousePress(MouseButton, ushort) Simulates pressing a mouse button at the current coordinates. UioHookResult SimulateMousePress(MouseButton button, ushort clicks) Parameters button MouseButton The mouse button to press. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMousePress(short, short, MouseButton) Simulates pressing a mouse button at the specified coordinates. UioHookResult SimulateMousePress(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. SimulateMousePress(short, short, MouseButton, ushort) Simulates pressing a mouse button at the specified coordinates. UioHookResult SimulateMousePress(short x, short y, MouseButton button, ushort clicks) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMouseRelease(MouseButton) Simulates releasing a mouse button at the current coordinates. UioHookResult SimulateMouseRelease(MouseButton button) Parameters button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. SimulateMouseRelease(MouseButton, ushort) Simulates releasing a mouse button at the current coordinates. UioHookResult SimulateMouseRelease(MouseButton button, ushort clicks) Parameters button MouseButton The mouse button to release. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMouseRelease(short, short, MouseButton) Simulates releasing a mouse button at the specified coordinates. UioHookResult SimulateMouseRelease(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. SimulateMouseRelease(short, short, MouseButton, ushort) Simulates releasing a mouse button at the specified coordinates. UioHookResult SimulateMouseRelease(short x, short y, MouseButton button, ushort clicks) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. clicks ushort The click count (used only on macOS). Returns UioHookResult The result of the operation. SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) Simulates scrolling the mouse wheel. UioHookResult SimulateMouseWheel(short rotation, MouseWheelScrollDirection direction = MouseWheelScrollDirection.Vertical, MouseWheelScrollType type = MouseWheelScrollType.UnitScroll) Parameters rotation short The wheel rotation. A positive value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. direction MouseWheelScrollDirection The scroll direction. type MouseWheelScrollType The scroll type (considered only on macOS). Returns UioHookResult The result of the operation. Remarks On Windows the value 120 represents the default wheel step. As such, multiples of 120 can be used, but it's not required. The value of type is ignored. On macOS it's recommended to use values between -10 and 10. This will result in quite a small scroll amount with pixel scrolling, so BlockScroll is recommended for line scrolling instead of pixel scrolling. On Linux there is no fixed recommendation, but multiples of 100 can be used. The value of type is ignored. SimulateTextEntry(string) Simulates the input of arbitrary Unicode characters. UioHookResult SimulateTextEntry(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. TextSimulationDelayOnX11 can be used to increase (or decrease) the delay if needed - longer delays add consistency but may be more jarring to end users. TextSimulationDelayOnX11 can also be used to get the currently configured delay - the default is 50 milliseconds. Exceptions ArgumentNullException text is null."
  },
  "api/SharpHook.IGlobalHook.html": {
    "href": "api/SharpHook.IGlobalHook.html",
    "title": "Interface IGlobalHook | SharpHook",
    "summary": "Interface IGlobalHook Namespace SharpHook Assembly SharpHook.dll Represents a global keyboard and mouse hook. public interface IGlobalHook : IDisposable Inherited Members IDisposable.Dispose() Properties IsDisposed Gets the value which indicates whether the global hook is disposed. bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. IsRunning Gets the value which indicates whether the global hook is running. bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. Methods Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. Task RunAsync() Returns Task A Task which finishes when the hook is destroyed. Remarks Since the underlying native API for running a global hook is blocking, the only way to run it without blocking the current thread is to run it on a separate thread. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. Events HookDisabled An event which is raised when the global hook is disabled. event EventHandler<HookEventArgs> HookDisabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Dispose() method is called. HookEnabled An event which is raised when the global hook is enabled. event EventHandler<HookEventArgs> HookEnabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Run() or RunAsync() method is called. KeyPressed An event which is raised when a key is pressed. event EventHandler<KeyboardHookEventArgs> KeyPressed Event Type EventHandler<KeyboardHookEventArgs> KeyReleased An event which is raised when a key is released. event EventHandler<KeyboardHookEventArgs> KeyReleased Event Type EventHandler<KeyboardHookEventArgs> KeyTyped An event which is raised when a key is typed. event EventHandler<KeyboardHookEventArgs> KeyTyped Event Type EventHandler<KeyboardHookEventArgs> MouseClicked An event which is raised when a mouse button is clicked. event EventHandler<MouseHookEventArgs> MouseClicked Event Type EventHandler<MouseHookEventArgs> MouseDragged An event which is raised when the mouse cursor is dragged. event EventHandler<MouseHookEventArgs> MouseDragged Event Type EventHandler<MouseHookEventArgs> MouseMoved An event which is raised when the mouse cursor is moved. event EventHandler<MouseHookEventArgs> MouseMoved Event Type EventHandler<MouseHookEventArgs> MousePressed An event which is raised when a mouse button is pressed. event EventHandler<MouseHookEventArgs> MousePressed Event Type EventHandler<MouseHookEventArgs> MouseReleased An event which is raised when a mouse button is released. event EventHandler<MouseHookEventArgs> MouseReleased Event Type EventHandler<MouseHookEventArgs> MouseWheel An event which is raised when the mouse wheel is scrolled. event EventHandler<MouseWheelHookEventArgs> MouseWheel Event Type EventHandler<MouseWheelHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook"
  },
  "api/SharpHook.KeyboardHookEventArgs.html": {
    "href": "api/SharpHook.KeyboardHookEventArgs.html",
    "title": "Class KeyboardHookEventArgs | SharpHook",
    "summary": "Class KeyboardHookEventArgs Namespace SharpHook Assembly SharpHook.dll Event args for keyboard-related hook events. public sealed class KeyboardHookEventArgs : HookEventArgs Inheritance object EventArgs HookEventArgs KeyboardHookEventArgs Inherited Members HookEventArgs.FromEvent(UioHookEvent) HookEventArgs.RawEvent HookEventArgs.EventTime HookEventArgs.IsEventSimulated HookEventArgs.SuppressEvent EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors KeyboardHookEventArgs(UioHookEvent) Event args for keyboard-related hook events. public KeyboardHookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also HookEventArgs MouseHookEventArgs MouseWheelHookEventArgs KeyboardEventData Properties Data Gets the event data. public KeyboardEventData Data { get; } Property Value KeyboardEventData The event data. See Also HookEventArgs MouseHookEventArgs MouseWheelHookEventArgs KeyboardEventData"
  },
  "api/SharpHook.Logging.EmptyLogSource.html": {
    "href": "api/SharpHook.Logging.EmptyLogSource.html",
    "title": "Class EmptyLogSource | SharpHook",
    "summary": "Class EmptyLogSource Namespace SharpHook.Logging Assembly SharpHook.dll Represents a souce of libuiohook logs which never raises any events. public sealed class EmptyLogSource : ILogSource, IDisposable Inheritance object EmptyLogSource Implements ILogSource IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks This class exists primarily to be used instead of LogSource in release builds of client apps as they will most probably not need any logs from libuiohook. Also, unlike LogSource this class doesn't need the Visual C++ Redistributable package to be installed on Windows. Constructors EmptyLogSource() public EmptyLogSource() Properties IsDisposed Gets the value which indicates whether the log source is disposed. public bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks Since empty log sources don't do anything, it doesn't matter whether they are disposed. Methods Dispose() Marks this object as disposed. public void Dispose() Remarks Since empty log sources don't do anything, it doesn't matter whether they are disposed. Events MessageLogged An event which is never raised. public event EventHandler<LogEventArgs> MessageLogged Event Type EventHandler<LogEventArgs> See Also ILogSource LogSource"
  },
  "api/SharpHook.Logging.ILogSource.html": {
    "href": "api/SharpHook.Logging.ILogSource.html",
    "title": "Interface ILogSource | SharpHook",
    "summary": "Interface ILogSource Namespace SharpHook.Logging Assembly SharpHook.dll Represents a source of libuiohook logs. public interface ILogSource : IDisposable Inherited Members IDisposable.Dispose() Properties IsDisposed Gets the value which indicates whether the log source is disposed. bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks A disposed log source doesn't raise the MessageLogged event. Events MessageLogged An event which is raised when libuiohook logs a message. event EventHandler<LogEventArgs> MessageLogged Event Type EventHandler<LogEventArgs> See Also LogSource EmptyLogSource LogEventArgs LogEntry"
  },
  "api/SharpHook.Logging.LogEntry.html": {
    "href": "api/SharpHook.Logging.LogEntry.html",
    "title": "Class LogEntry | SharpHook",
    "summary": "Class LogEntry Namespace SharpHook.Logging Assembly SharpHook.dll Represents a log entry from libuiohook. public sealed class LogEntry : IEquatable<LogEntry> Inheritance object LogEntry Implements IEquatable<LogEntry> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks For simple handling the Level and FullText properties are anough. For more advanced handling you can use the entries' formats and arguments. Each log entry from libuiohook has the following format: function [line]: message The function and line reference the source code of libuiohook itself, and can be retrieved using the Function and SourceLine properties. The message can be retrieved by splitting the text by : and getting the trimmed second part. You shouldn't create LogEntry instances yourself. Instead, use the LogEntryParser class to create them in the logging callback. Constructors LogEntry(LogLevel, string, string, string, IReadOnlyList<object>, IReadOnlyList<string>, IReadOnlyList<string>) Represents a log entry from libuiohook. public LogEntry(LogLevel level, string fullText, string format, string nativeFormat, IReadOnlyList<object> arguments, IReadOnlyList<string> rawArguments, IReadOnlyList<string> argumentPlaceholders) Parameters level LogLevel The log level. fullText string The full text of the log entry. format string The format of the log entry which can be used in String.Format. nativeFormat string The native format of the log entry. arguments IReadOnlyList<object> The arguments of the log entry which can be used in String.Format. rawArguments IReadOnlyList<string> The arguments as they appear in the entry's full text. argumentPlaceholders IReadOnlyList<string> The argument placeholders from the native format. Remarks For simple handling the Level and FullText properties are anough. For more advanced handling you can use the entries' formats and arguments. Each log entry from libuiohook has the following format: function [line]: message The function and line reference the source code of libuiohook itself, and can be retrieved using the Function and SourceLine properties. The message can be retrieved by splitting the text by : and getting the trimmed second part. You shouldn't create LogEntry instances yourself. Instead, use the LogEntryParser class to create them in the logging callback. See Also ILogSource LogSource LogEventArgs LogEntryParser Fields Level Gets the level of the current log entry. public LogLevel Level Field Value LogLevel The level of the current log entry. Properties ArgumentPlaceholders Gets the argument placeholders from the native format. public IReadOnlyList<string> ArgumentPlaceholders { get; } Property Value IReadOnlyList<string> The argument placeholders from the native format. Arguments Gets the arguments of the current log entry. public IReadOnlyList<object> Arguments { get; } Property Value IReadOnlyList<object> The arguments of the current log entry. Remarks The function and line are the first two arguments of the log entry. Format Gets the format of the current log entry. public string Format { get; } Property Value string The format of the current log entry. FullText Gets the full text of the current log entry. public string FullText { get; } Property Value string The full text of the current log entry. Function Gets the libuiohook function which called the logger. public string Function { get; } Property Value string The function which called the logger. Remarks The function is the first argument of the log entry. NativeFormat Gets the native format of the current log entry, as defined in libuiohook. public string NativeFormat { get; } Property Value string The native format of the current log entry. RawArguments Gets the arguments of the current log entry as they appear in entry's full text. public IReadOnlyList<string> RawArguments { get; } Property Value IReadOnlyList<string> The arguments of the current log entry as they appear in entry's full text. Remarks The function and line are the first two arguments of the log entry. SourceLine Gets the source code line in libuiohook where the logger was called. public uint SourceLine { get; } Property Value uint The source code line in libuiohook where the logger was called. Remarks The source code line is the second argument of the log entry. Methods Equals(LogEntry?) Compares this object to another object for equality. public bool Equals(LogEntry? entry) Parameters entry LogEntry The object to compare Returns bool true if the objects are equal. Otherwise, false. Equals(object?) Compares this object to another object for equality. public override bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. GetHashCode() Gets the hash code of this object. public override int GetHashCode() Returns int The hash code of this object. ToString() Gets the string representation of the log entry i.e. its full text. public override string ToString() Returns string The full text of the log entry. Operators operator ==(LogEntry?, LogEntry?) Compares two objects for equality. public static bool operator ==(LogEntry? left, LogEntry? right) Parameters left LogEntry The first object to compare right LogEntry The second object to compare Returns bool true if the objects are equal. Otherwise, false. operator !=(LogEntry?, LogEntry?) Compares two objects for inequality. public static bool operator !=(LogEntry? left, LogEntry? right) Parameters left LogEntry The first object to compare right LogEntry The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also ILogSource LogSource LogEventArgs LogEntryParser"
  },
  "api/SharpHook.Logging.LogEntryParser.html": {
    "href": "api/SharpHook.Logging.LogEntryParser.html",
    "title": "Class LogEntryParser | SharpHook",
    "summary": "Class LogEntryParser Namespace SharpHook.Logging Assembly SharpHook.dll Creates log entries from native log formats and arguments. public sealed class LogEntryParser Inheritance object LogEntryParser Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The log text is formatted using the vsprintf function from the C runtime and then the result is parsed to extract the arguments. This means that on Windows this class requires the Visual C++ Redistributable package to be installed. Properties Instance Gets the single instance of LogEntryParser. public static LogEntryParser Instance { get; } Property Value LogEntryParser Methods ParseNativeLogEntry(LogLevel, nint, nint) Parses a native log format and arguments to create a log entry. public LogEntry ParseNativeLogEntry(LogLevel level, nint format, nint args) Parameters level LogLevel The log level. format nint A pointer to the native format of the log message. args nint A pointer to the native arguments of the log message. Returns LogEntry A log entry represented by the level, format, and argumets."
  },
  "api/SharpHook.Logging.LogEventArgs.html": {
    "href": "api/SharpHook.Logging.LogEventArgs.html",
    "title": "Class LogEventArgs | SharpHook",
    "summary": "Class LogEventArgs Namespace SharpHook.Logging Assembly SharpHook.dll Event args for logging events. public sealed class LogEventArgs : EventArgs Inheritance object EventArgs LogEventArgs Inherited Members EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors LogEventArgs(LogEntry) Event args for logging events. public LogEventArgs(LogEntry logEntry) Parameters logEntry LogEntry The entry of log event. See Also ILogSource LogSource LogEntry Properties LogEntry Gets the entry of the current log event. public LogEntry LogEntry { get; } Property Value LogEntry The entry of the current log event. See Also ILogSource LogSource LogEntry"
  },
  "api/SharpHook.Logging.LogSource.html": {
    "href": "api/SharpHook.Logging.LogSource.html",
    "title": "Class LogSource | SharpHook",
    "summary": "Class LogSource Namespace SharpHook.Logging Assembly SharpHook.dll Represents a source of libuiohook logs. public sealed class LogSource : ILogSource, IDisposable Inheritance object LogSource Implements ILogSource IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Only a single LogSource instance must be used at a time. On Windows this class requires the Visual C++ Redistributable package to be installed as it uses the C runtime. Properties IsDisposed Gets the value which indicates whether the log source is disposed. public bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks A disposed log source doesn't raise the MessageLogged event and cannot be registered again. MinLevel Gets or sets the minimum log level. public LogLevel MinLevel { get; set; } Property Value LogLevel The minimum log level. Methods Dispose() Stops the currently registered LogSource instance from receiving libuiohook logs. public void Dispose() ~LogSource() Unregisters the current LogSource instance. protected ~LogSource() RegisterOrGet(LogLevel) Creates and registers a source of libuiohook logs or returns the registered instance. public static LogSource RegisterOrGet(LogLevel minLevel = LogLevel.Info) Parameters minLevel LogLevel The minimum log level. Returns LogSource A source of libuiohook logs. RegisterOrGet(ILoggingProvider, LogLevel) Creates and registers a source of libuiohook logs or returns the registered instance. public static LogSource RegisterOrGet(ILoggingProvider loggingProvider, LogLevel minLevel = LogLevel.Info) Parameters loggingProvider ILoggingProvider The logging provider used to register the log source. minLevel LogLevel The minimum log level. Returns LogSource A source of libuiohook logs. Remarks A single instance of LogSource can be registered using this method, irrespective of the logging provider used. Exceptions ArgumentNullException loggingProvider is null. Events MessageLogged An event which is raised when libuiohook logs a message. public event EventHandler<LogEventArgs>? MessageLogged Event Type EventHandler<LogEventArgs> See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser"
  },
  "api/SharpHook.Logging.html": {
    "href": "api/SharpHook.Logging.html",
    "title": "Namespace SharpHook.Logging | SharpHook",
    "summary": "Namespace SharpHook.Logging Classes EmptyLogSource Represents a souce of libuiohook logs which never raises any events. LogEntry Represents a log entry from libuiohook. LogEntryParser Creates log entries from native log formats and arguments. LogEventArgs Event args for logging events. LogSource Represents a source of libuiohook logs. Interfaces ILogSource Represents a source of libuiohook logs."
  },
  "api/SharpHook.MouseHookEventArgs.html": {
    "href": "api/SharpHook.MouseHookEventArgs.html",
    "title": "Class MouseHookEventArgs | SharpHook",
    "summary": "Class MouseHookEventArgs Namespace SharpHook Assembly SharpHook.dll Event args for mouse-related hook events. public sealed class MouseHookEventArgs : HookEventArgs Inheritance object EventArgs HookEventArgs MouseHookEventArgs Inherited Members HookEventArgs.FromEvent(UioHookEvent) HookEventArgs.RawEvent HookEventArgs.EventTime HookEventArgs.IsEventSimulated HookEventArgs.SuppressEvent EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MouseHookEventArgs(UioHookEvent) Event args for mouse-related hook events. public MouseHookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also HookEventArgs KeyboardHookEventArgs MouseWheelHookEventArgs MouseEventData Properties Data Gets the event data. public MouseEventData Data { get; } Property Value MouseEventData The event data. See Also HookEventArgs KeyboardHookEventArgs MouseWheelHookEventArgs MouseEventData"
  },
  "api/SharpHook.MouseWheelHookEventArgs.html": {
    "href": "api/SharpHook.MouseWheelHookEventArgs.html",
    "title": "Class MouseWheelHookEventArgs | SharpHook",
    "summary": "Class MouseWheelHookEventArgs Namespace SharpHook Assembly SharpHook.dll Event args for mouse wheel-related hook events. public sealed class MouseWheelHookEventArgs : HookEventArgs Inheritance object EventArgs HookEventArgs MouseWheelHookEventArgs Inherited Members HookEventArgs.FromEvent(UioHookEvent) HookEventArgs.RawEvent HookEventArgs.EventTime HookEventArgs.IsEventSimulated HookEventArgs.SuppressEvent EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MouseWheelHookEventArgs(UioHookEvent) Event args for mouse wheel-related hook events. public MouseWheelHookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also HookEventArgs KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData Properties Data Gets the event data. public MouseWheelEventData Data { get; } Property Value MouseWheelEventData The event data. See Also HookEventArgs KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData"
  },
  "api/SharpHook.Native.DispatchProc.html": {
    "href": "api/SharpHook.Native.DispatchProc.html",
    "title": "Delegate DispatchProc | SharpHook",
    "summary": "Delegate DispatchProc Namespace SharpHook.Native Assembly SharpHook.dll Represents a function which is called when an event occurs. public delegate void DispatchProc(ref UioHookEvent e, nint userData) Parameters e UioHookEvent The event that has occured. userData nint The data that was passed to SetDispatchProc(DispatchProc?, nint). Should not be used. Constructors DispatchProc(object, nint) public DispatchProc(object @object, nint method) Parameters object object method nint Methods BeginInvoke(ref UioHookEvent, nint, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(ref UioHookEvent e, nint userData, AsyncCallback callback, object @object) Parameters e UioHookEvent userData nint callback AsyncCallback object object Returns IAsyncResult EndInvoke(ref UioHookEvent, IAsyncResult) public virtual void EndInvoke(ref UioHookEvent e, IAsyncResult result) Parameters e UioHookEvent result IAsyncResult Invoke(ref UioHookEvent, nint) public virtual void Invoke(ref UioHookEvent e, nint userData) Parameters e UioHookEvent userData nint See Also SetDispatchProc(DispatchProc, nint)"
  },
  "api/SharpHook.Native.EventReservedValueMask.html": {
    "href": "api/SharpHook.Native.EventReservedValueMask.html",
    "title": "Enum EventReservedValueMask | SharpHook",
    "summary": "Enum EventReservedValueMask Namespace SharpHook.Native Assembly SharpHook.dll Represents possible values of the Reserved field. [Flags] public enum EventReservedValueMask : ushort Fields None = 0 No value. SimulatedEvent = 2 If this flag is set then the event has been simulated. SuppressEvent = 1 If this flag is set in the event handler then the event will be suppressed from further propagation. Suppressing events works only on Windows and macOS."
  },
  "api/SharpHook.Native.EventType.html": {
    "href": "api/SharpHook.Native.EventType.html",
    "title": "Enum EventType | SharpHook",
    "summary": "Enum EventType Namespace SharpHook.Native Assembly SharpHook.dll Represents the type of an input event which can be raised from a global hook or posted as a fake event. public enum EventType Fields HookDisabled = 2 Raised when the global hook is stopped. Ignored when posted. HookEnabled = 1 Raised when the global hook is started. Ignored when posted. KeyPressed = 4 Raised when a key is pressed (its state changed from up to down) or posted to press a key. KeyReleased = 5 Raised when a key is released (its state changed from down to up) or posted to release a key. KeyTyped = 3 Raised when a key press may have caused a character to be typed regardless of whether a character was actually typed. Ignored when posted. Events of this type are raised after events of type KeyPressed if the pressed key may have caused characters to be typed regardless of whether they were actually typed. Since a single key press can cause multiple characters to be typed, a single event of type KeyPressed can cause multiple events of type KeyTyped. Since events of this type are not raised by the OS, suppressing them has no effect. MouseClicked = 6 Raised when a mouse button is clicked. Ignored when posted. Events of this type are raised after events of type MouseReleased if the mouse was not dragged. Since events of this type are not raised by the OS, suppressing them has no effect. MouseDragged = 10 Raised when the mouse is dragged. Not recommended to post as it will be the same as MouseMoved. MouseMoved = 9 Raised when the mouse is moved or posted to move the mouse. MouseMovedRelativeToCursor = 14 Posted to move the mouse relative to the current cursor position. Never raised. MousePressed = 7 Raised when a mouse button is pressed (its state changed from up to down) or posted to press a mouse button. MousePressedIgnoreCoordinates = 12 Posted to press a mouse button at the current coordinates. Never raised. MouseReleased = 8 Raised when a mouse button is released (its state changed from down to up) or posted to release a mouse button. MouseReleasedIgnoreCoordinates = 13 Posted to release a mouse button at the current coordinates. Never raised. MouseWheel = 11 Raised when the mouse wheel is scrolled or posted to scroll the mouse wheel. See Also UioHookEvent PostEvent(ref UioHookEvent)"
  },
  "api/SharpHook.Native.KeyCode.html": {
    "href": "api/SharpHook.Native.KeyCode.html",
    "title": "Enum KeyCode | SharpHook",
    "summary": "Enum KeyCode Namespace SharpHook.Native Assembly SharpHook.dll Represents a virtual key code. public enum KeyCode : ushort Fields Vc0 = 48 0 Available on: Windows, macOS, Linux Vc1 = 49 1 Available on: Windows, macOS, Linux Vc102 = 153 The <> keys on the US standard keyboard, or the | key on the non-US 102-key keyboard, or the Section key (§) on the macOS ISO keyboard Available on: Windows, macOS, Linux Vc2 = 50 2 Available on: Windows, macOS, Linux Vc3 = 51 3 Available on: Windows, macOS, Linux Vc4 = 52 4 Available on: Windows, macOS, Linux Vc5 = 53 5 Available on: Windows, macOS, Linux Vc6 = 54 6 Available on: Windows, macOS, Linux Vc7 = 55 7 Available on: Windows, macOS, Linux Vc8 = 56 8 Available on: Windows, macOS, Linux Vc9 = 57 9 Available on: Windows, macOS, Linux VcA = 65 A Available on: Windows, macOS, Linux VcAccept = 30 IME Accept Available on: Windows [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcAgain = 65401 Again Available on: Linux VcAlphanumeric = 240 IME Alphanumeric mode (eisū) Available on: macOS [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcAltErase = 49192 Alt Erase Available on: Linux VcApp1 = 57382 Launch app 1 Available on: Windows, Linux VcApp2 = 57383 Launch app 2 Available on: Windows, Linux VcApp3 = 57384 Launch app 3 Available on: Linux VcApp4 = 57385 Launch app 4 Available on: Linux VcAppBrowser = 57381 Launch browser Available on: Linux VcAppCalculator = 57377 Launch calculator Available on: Linux VcAppMail = 57452 Launch mail Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcAttn = 57488 Attn Available on: Windows VcB = 66 B Available on: Windows, macOS, Linux VcBackQuote = 192 ` Available on: Windows, macOS, Linux VcBackslash = 93 \\ Available on: Windows, macOS, Linux VcBackspace = 8 Backspace (on Windows and Linux) or Delete (on macOS) Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcBassBoost = 49181 Bass Boost Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcBattery = 49206 Battery Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcBluetooth = 49207 Bluetooth Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcBrightnesCycle = 49195 Brightness Cycle Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcBrightnessAuto = 49196 Brightness Auto Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcBrightnessDown = 49193 Brightness Down Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcBrightnessUp = 49194 Brightness Up Available on: Linux VcBrowserBack = 57450 Browser Back Available on: Windows, Linux VcBrowserFavorites = 57446 Browser Favorites Available on: Windows, Linux VcBrowserForward = 57449 Browser Forward Available on: Windows, Linux VcBrowserHome = 57394 Browser Home Available on: Windows, Linux VcBrowserRefresh = 57447 Browser Refresh Available on: Windows, Linux VcBrowserSearch = 57445 Browser Search Available on: Windows, Linux VcBrowserStop = 57448 Browser Stop Available on: Windows VcC = 67 C Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcCamera = 49183 Camera Available on: Linux VcCancel = 211 Cancel Available on: Windows, Linux VcCapsLock = 20 Caps Lock Available on: Windows, macOS, Linux VcChangeInputSource = 527 Function key when used to change an input source on macOS Available on: macOS [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcChat = 49187 Chat Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcClose = 49178 Close Available on: Linux VcCloseBracket = 92 ] Available on: Windows, macOS, Linux VcComma = 44 , Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcComputer = 49164 Computer Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcConfig = 49167 Config Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcConnect = 49188 Connect Available on: Linux VcContextMenu = 525 Context Menu Available on: Windows, macOS, Linux VcConvert = 28 IME Convert (henkan) Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcCopy = 65404 Copy Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcCrSel = 57489 CrSel Available on: Windows [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcCut = 65403 Cut Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcCycleWindows = 49163 Cycle Windows Available on: Linux VcD = 68 D Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcDashboard = 49176 Dashboard Available on: Linux VcDelete = 127 Delete (on Windows and Linux) or Forward Delete (on macOS) Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcDeleteFile = 49159 Delete File Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcDisplayOff = 49213 Display Off Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcDocuments = 49205 Documents Available on: Linux VcDown = 40 Down Arrow Available on: Windows, macOS, Linux VcE = 69 E Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcEdit = 49170 Edit Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcEmail = 49186 Email Available on: Linux VcEnd = 35 End Available on: Windows, macOS, Linux VcEnter = 10 Enter Available on: Windows, macOS, Linux VcEquals = 61 = Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcEraseEof = 57491 Erase EOF Available on: Windows VcEscape = 27 Escape Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcExSel = 57490 ExSel Available on: Windows [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcExecute = 158 Execute Available on: Windows [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcExit = 49168 Exit Available on: Linux VcF = 70 F Available on: Windows, macOS, Linux VcF1 = 112 F1 Available on: Windows, macOS, Linux VcF10 = 121 F10 Available on: Windows, macOS, Linux VcF11 = 122 F11 Available on: Windows, macOS, Linux VcF12 = 123 F12 Available on: Windows, macOS, Linux VcF13 = 61440 F13 Available on: Windows, macOS, Linux VcF14 = 61441 F14 Available on: Windows, macOS, Linux VcF15 = 61442 F15 Available on: Windows, macOS, Linux VcF16 = 61443 F16 Available on: Windows, macOS, Linux VcF17 = 61444 F17 Available on: Windows, macOS, Linux VcF18 = 61445 F18 Available on: Windows, macOS, Linux VcF19 = 61446 F19 Available on: Windows, macOS, Linux VcF2 = 113 F2 Available on: Windows, macOS, Linux VcF20 = 61447 F20 Available on: Windows, macOS, Linux VcF21 = 61448 F21 Available on: Windows, Linux VcF22 = 61449 F22 Available on: Windows, Linux VcF23 = 61450 F23 Available on: Windows, Linux VcF24 = 61451 F24 Available on: Windows, Linux VcF3 = 114 F3 Available on: Windows, macOS, Linux VcF4 = 115 F4 Available on: Windows, macOS, Linux VcF5 = 116 F5 Available on: Windows, macOS, Linux VcF6 = 117 F6 Available on: Windows, macOS, Linux VcF7 = 118 F7 Available on: Windows, macOS, Linux VcF8 = 119 F8 Available on: Windows, macOS, Linux VcF9 = 120 F9 Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcFastForward = 49180 Fast-Forward Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcFile = 49157 File Available on: Linux VcFinal = 231 IME Final mode Available on: Windows [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcFinance = 49189 Finance Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcFind = 65392 Find Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcForwardMail = 49203 Forward Mail Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcFront = 65399 Front Available on: Linux VcFunction = 526 Function Available on: macOS VcG = 71 G Available on: Windows, macOS, Linux VcH = 72 H Available on: Windows, macOS, Linux VcHangul = 233 IME Hangul mode Available on: Windows, Linux VcHanja = 230 IME Hanja mode Available on: Windows, Linux VcHelp = 159 Help Available on: Windows, macOS, Linux VcHiragana = 242 IME Hiragana mode Available on: Linux VcHome = 36 Home Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcHp = 49182 HP Available on: Linux VcI = 73 I Available on: Windows, macOS, Linux VcImeOff = 264 IME Off Available on: Windows VcImeOn = 265 IME On Available on: Windows VcInsert = 155 Insert Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcIso = 49166 ISO Available on: Linux VcJ = 74 J Available on: Windows, macOS, Linux VcJpComma = 528 JP Comma Available on: macOS, Linux VcJunja = 232 IME Junja mode Available on: Windows VcK = 75 K Available on: Windows, macOS, Linux VcKana = 21 IME Kana mode Available on: Windows, macOS VcKanji = 25 IME Kanji mode Available on: Windows VcKatakana = 241 IME Katakana mode Available on: Linux VcKatakanaHiragana = 262 IME Katakana/Hiragana toggle Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcKeyboardLightDown = 49199 Keyboard Light Down Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcKeyboardLightToggle = 49198 Keyboard Light Toggle Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcKeyboardLightUp = 49200 Keyboard Light Up Available on: Linux VcL = 76 L Available on: Windows, macOS, Linux VcLeft = 37 Left Arrow Available on: Windows, macOS, Linux VcLeftAlt = 40978 Left Alt (on Windows and Linux) or Option (on macOS) Available on: Windows, macOS, Linux VcLeftControl = 40977 Left Control Available on: Windows, macOS, Linux VcLeftMeta = 41117 Left Win (on Windows), Command (on macOS), or Super/Meta (on Linux) Available on: Windows, macOS, Linux VcLeftShift = 40976 Left Shift Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcLineFeed = 49153 Line Feed Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcLock = 49161 Lock Available on: Linux VcM = 77 M Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMacro = 49154 Macro Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMedia = 57379 Media Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMediaClose = 57389 Close Media Available on: Linux VcMediaEject = 57388 Eject Media Available on: macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMediaEjectClose = 57391 Eject/Close Media Available on: Linux VcMediaNext = 57369 Next Media Available on: Windows, macOS, Linux VcMediaPlay = 57378 Play/Pause Media Available on: Windows, macOS, Linux VcMediaPrevious = 57360 Previous Media Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMediaRecord = 57393 Record Media Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMediaRewind = 57395 Rewind Media Available on: Linux VcMediaSelect = 57453 Select Media Available on: Windows VcMediaStop = 57380 Stop Media Available on: Windows, Linux VcMinus = 45 Available on: Windows, macOS, Linux VcMisc = 3585 Miscellaneous OEM-specific key Available on: Windows VcModeChange = 263 IME Mode Change Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMove = 49169 Move Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcMsDos = 49160 MS DOS Available on: Linux VcN = 78 N Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcNew = 49173 New Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcNoName = 57494 Reserved for future use Available on: Windows VcNonConvert = 29 IME Non-Convert (muhenkan) Available on: Windows, Linux VcNumLock = 144 Num Lock Available on: Windows, Linux VcNumPad0 = 96 Num-Pad 0 Available on: Windows, macOS, Linux VcNumPad1 = 97 Num-Pad 1 Available on: Windows, macOS, Linux VcNumPad2 = 98 Num-Pad 2 Available on: Windows, macOS, Linux VcNumPad3 = 99 Num-Pad 3 Available on: Windows, macOS, Linux VcNumPad4 = 100 Num-Pad 4 Available on: Windows, macOS, Linux VcNumPad5 = 101 Num-Pad 5 Available on: Windows, macOS, Linux VcNumPad6 = 102 Num-Pad 6 Available on: Windows, macOS, Linux VcNumPad7 = 103 Num-Pad 7 Available on: Windows, macOS, Linux VcNumPad8 = 104 Num-Pad 8 Available on: Windows, macOS, Linux VcNumPad9 = 105 Num-Pad 9 Available on: Windows, macOS, Linux VcNumPadAdd = 107 Num-Pad + Available on: Windows, macOS, Linux VcNumPadClear = 12 Num-Pad Clear Available on: Windows, macOS [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcNumPadCloseParenthesis = 60930 Num-Pad ) Available on: Linux VcNumPadDecimal = 110 Num-Pad Decimal Available on: Windows, macOS, Linux VcNumPadDivide = 111 Num-Pad / Available on: Windows, macOS, Linux VcNumPadEnter = 125 Num-Pad Enter Available on: Windows, macOS, Linux VcNumPadEquals = 124 Num-Pad = Available on: Windows, macOS, Linux VcNumPadMultiply = 106 Num-Pad * Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcNumPadOpenParenthesis = 60929 Num-Pad ( Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcNumPadPlusMinus = 126 Num-Pad ± Available on: Linux VcNumPadSeparator = 108 Num-Pad Separator Available on: Windows, Linux VcNumPadSubtract = 109 Num-Pad - Available on: Windows, macOS, Linux VcO = 79 O Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcOpen = 65396 Open Available on: Linux VcOpenBracket = 91 [ Available on: Windows, macOS, Linux VcP = 80 P Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcPa1 = 57495 PA1 Available on: Windows VcPageDown = 34 Page Down Available on: Windows, macOS, Linux VcPageUp = 33 Page Up Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcPaste = 65405 Paste Available on: Linux VcPause = 19 Pause Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcPauseCd = 49175 Pause CD Available on: Linux VcPeriod = 46 . Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcPhone = 49165 Phone Available on: Linux [Obsolete(\"Not to be confused with VcMediaPlay, this key doesn't exist on most modern keyboards\")] VcPlay = 57492 Play Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcPlayCd = 49174 Play CD Available on: Linux VcPower = 57438 Power Available on: macOS, Linux [Obsolete(\"Not to be confused with VcPrintScreen, this key doesn't exist on most modern keyboards\")] VcPrint = 156 Print Available on: Windows, Linux VcPrintScreen = 154 Print Screen Available on: Windows, Linux VcProcess = 261 IME Process Available on: Windows [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcProps = 65398 Props Available on: Linux VcQ = 81 Q Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcQuestion = 49185 Question Available on: Linux VcQuote = 222 ' Available on: Windows, macOS, Linux VcR = 82 R Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcRedo = 65407 Redo Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcReply = 49202 Reply Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcRfKill = 49215 RfKill Available on: Linux VcRight = 39 Right Arrow Available on: Windows, macOS, Linux VcRightAlt = 45074 Right Alt (on Windows and Linux) or Option (on macOS) Available on: Windows, macOS, Linux VcRightControl = 45073 Right Control Available on: Windows, macOS, Linux VcRightMeta = 45213 Right Win (on Windows), Command (on macOS), or Super/Meta (on Linux) Available on: Windows, macOS, Linux VcRightShift = 45072 Right Shift Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcRotateDisplay = 49162 Rotate Display Available on: Linux VcS = 83 S Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSave = 49204 Save Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcScale = 49155 Scale Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcScrollDown = 49172 Scroll Down Available on: Linux VcScrollLock = 145 Scroll Lock Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcScrollUp = 49171 Scroll Up Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSelect = 157 Select Available on: Windows VcSemicolon = 59 ; Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSend = 49201 Send Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSendFile = 49158 Send File Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSetup = 49156 Setup Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcShop = 49191 Shop Available on: Linux VcSlash = 47 / Available on: Windows, macOS, Linux VcSleep = 57439 Sleep Available on: Windows, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSound = 49184 Sound Available on: Linux VcSpace = 32 Space Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSport = 49190 Sport Available on: Linux [Obsolete(\"Not to be confused with VcMediaStop, this key doesn't exist on most modern keyboards\")] VcStop = 65400 Stop Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSuspend = 49177 Suspend Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcSwitchVideoMode = 49197 Switch Video Mode Available on: Linux VcT = 84 T Available on: Windows, macOS, Linux VcTab = 9 Tab Available on: Windows, macOS, Linux VcU = 85 U Available on: Windows, macOS, Linux VcUndefined = 0 Undefined key VcUnderscore = 523 _ Available on: macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcUndo = 65402 Undo Available on: Linux VcUp = 38 Up Arrow Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcUwb = 49209 UWB Available on: Linux VcV = 86 V Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcVideoNext = 49211 Next Video Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcVideoPrevious = 49212 Previous Video Available on: Linux VcVolumeDown = 57392 Volume Down Available on: Windows, macOS, Linux VcVolumeMute = 57376 Volume Mute Available on: Windows, macOS, Linux VcVolumeUp = 57390 Volume Up Available on: Windows, macOS, Linux VcW = 87 W Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcWake = 57443 Wake Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcWlan = 49208 WLAN Available on: Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcWwan = 49214 WWAN Available on: Linux VcX = 88 X Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcX11Unknown = 49210 Unknown key (X11) Available on: Linux VcY = 89 Y Available on: Windows, macOS, Linux VcYen = 524 Yen Available on: macOS, Linux VcZ = 90 Z Available on: Windows, macOS, Linux [Obsolete(\"This key doesn't exist on most modern keyboards\")] VcZoom = 57493 Zoom Available on: Windows See Also KeyboardEventData"
  },
  "api/SharpHook.Native.KeyboardEventData.html": {
    "href": "api/SharpHook.Native.KeyboardEventData.html",
    "title": "Struct KeyboardEventData | SharpHook",
    "summary": "Struct KeyboardEventData Namespace SharpHook.Native Assembly SharpHook.dll Represents the data of a keyboard-related event. public struct KeyboardEventData : IEquatable<KeyboardEventData> Implements IEquatable<KeyboardEventData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields KeyCode The key code. public KeyCode KeyCode Field Value KeyCode The key code. RawCode The OS-specific key code. public ushort RawCode Field Value ushort The OS-specific key code. RawKeyChar The character of the key. public ushort RawKeyChar Field Value ushort The character of the key. Remarks This field is available only for the KeyTyped event. In general KeyChar should be used instead of this field. This field is of type ushort purely for marshalling reasons. It should be used as a char. RawUndefinedChar The value of RawKeyChar in events of type KeyPressed and KeyReleased. public static readonly ushort RawUndefinedChar Field Value ushort UndefinedChar The value of KeyChar in events of type KeyPressed and KeyReleased. public static readonly char UndefinedChar Field Value char Properties KeyChar The character of the key. public readonly char KeyChar { get; } Property Value char The character of the key. Remarks This property is available only for the KeyTyped event. Methods Equals(KeyboardEventData) Compares this object to another object for equality. public readonly bool Equals(KeyboardEventData data) Parameters data KeyboardEventData The object to compare Returns bool true if the objects are equal. Otherwise, false. Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. Operators operator ==(KeyboardEventData, KeyboardEventData) Compares two objects for equality. public static bool operator ==(KeyboardEventData left, KeyboardEventData right) Parameters left KeyboardEventData The first object to compare right KeyboardEventData The second object to compare Returns bool true if the objects are equal. Otherwise, false. operator !=(KeyboardEventData, KeyboardEventData) Compares two objects for inequality. public static bool operator !=(KeyboardEventData left, KeyboardEventData right) Parameters left KeyboardEventData The first object to compare right KeyboardEventData The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also KeyboardHookEventArgs KeyCode"
  },
  "api/SharpHook.Native.LogLevel.html": {
    "href": "api/SharpHook.Native.LogLevel.html",
    "title": "Enum LogLevel | SharpHook",
    "summary": "Enum LogLevel Namespace SharpHook.Native Assembly SharpHook.dll Represents a log level. public enum LogLevel : uint Fields Debug = 1 Debug information Error = 4 Error Info = 2 General-purpose information Warn = 3 Warning"
  },
  "api/SharpHook.Native.LoggerProc.html": {
    "href": "api/SharpHook.Native.LoggerProc.html",
    "title": "Delegate LoggerProc | SharpHook",
    "summary": "Delegate LoggerProc Namespace SharpHook.Native Assembly SharpHook.dll Represents a function which is called when a logging event occurs. public delegate void LoggerProc(LogLevel level, nint userData, nint format, nint args) Parameters level LogLevel The log level. userData nint The data that was passed to SetLoggerProc(LoggerProc?, nint). Should not be used. format nint The format of the log message. args nint The arguments of the log message. Constructors LoggerProc(object, nint) public LoggerProc(object @object, nint method) Parameters object object method nint Methods BeginInvoke(LogLevel, nint, nint, nint, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(LogLevel level, nint userData, nint format, nint args, AsyncCallback callback, object @object) Parameters level LogLevel userData nint format nint args nint callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(LogLevel, nint, nint, nint) public virtual void Invoke(LogLevel level, nint userData, nint format, nint args) Parameters level LogLevel userData nint format nint args nint See Also SetLoggerProc(LoggerProc, nint)"
  },
  "api/SharpHook.Native.ModifierMask.html": {
    "href": "api/SharpHook.Native.ModifierMask.html",
    "title": "Enum ModifierMask | SharpHook",
    "summary": "Enum ModifierMask Namespace SharpHook.Native Assembly SharpHook.dll Represents a virtual modifier mask. [Flags] public enum ModifierMask : ushort Extension Methods ModifierMaskExtensions.HasAll(ModifierMask, ModifierMask) ModifierMaskExtensions.HasAlt(ModifierMask) ModifierMaskExtensions.HasAny(ModifierMask, ModifierMask) ModifierMaskExtensions.HasCtrl(ModifierMask) ModifierMaskExtensions.HasMeta(ModifierMask) ModifierMaskExtensions.HasShift(ModifierMask) ModifierMaskExtensions.Split(ModifierMask) Fields Alt = LeftAlt | RightAlt Left or right Alt (on Windows and Linux) or Option (on macOS) Button1 = 256 Mouse button 1 (usually the left mouse button) Button2 = 512 Mouse button 2 (usually the right mouse button) Button3 = 1024 Mouse button 3 Button4 = 2048 Mouse button 4 Button5 = 4096 Mouse button 5 CapsLock = 16384 Caps Lock Ctrl = LeftCtrl | RightCtrl Left or right Control LeftAlt = 8 Left Alt (on Windows and Linux) or Option (on macOS) LeftCtrl = 2 Left Control LeftMeta = 4 Left Win (on Windows), Command (on macOS), or Super/Meta (on Linux) LeftShift = 1 Left Shift Meta = LeftMeta | RightMeta Left or right Win (on Windows), Command (on macOS), or Super/Meta (on Linux) None = 0 No modifier NumLock = 8192 Num Lock RightAlt = 128 Right Alt (on Windows and Linux) or Option (on macOS) RightCtrl = 32 Right Control RightMeta = 64 Right Win (on Windows), Command (on macOS), or Super/Meta (on Linux) RightShift = 16 Right Shift ScrollLock = 32768 Scroll Lock Shift = LeftShift | RightShift Left or right Shift See Also UioHookEvent"
  },
  "api/SharpHook.Native.ModifierMaskExtensions.html": {
    "href": "api/SharpHook.Native.ModifierMaskExtensions.html",
    "title": "Class ModifierMaskExtensions | SharpHook",
    "summary": "Class ModifierMaskExtensions Namespace SharpHook.Native Assembly SharpHook.dll Contains extension methods for ModifierMask. public static class ModifierMaskExtensions Inheritance object ModifierMaskExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods HasAll(ModifierMask, ModifierMask) Returns true if the modifier mask contains all of the specified modifiers. Otherwise, returns false. public static bool HasAll(this ModifierMask mask, ModifierMask modifiers) Parameters mask ModifierMask The modifier mask to check. modifiers ModifierMask The modifiers to check against. Returns bool true if the modifier mask contains all of the specified modifiers. Otherwise, false. Remarks This method returns true if modifiers equals None. HasAlt(ModifierMask) Returns true if the modifier mask contains either LeftAlt or RightAlt. Otherwise, returns false. public static bool HasAlt(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftAlt or RightAlt. Otherwise, false. HasAny(ModifierMask, ModifierMask) Returns true if the modifier mask contains any of the specified modifiers. Otherwise, returns false. public static bool HasAny(this ModifierMask mask, ModifierMask modifiers) Parameters mask ModifierMask The modifier mask to check. modifiers ModifierMask The modifiers to check against. Returns bool true if the modifier mask contains any of the specified modifiers. Otherwise, false. Remarks This method returns false if modifiers equals None. HasCtrl(ModifierMask) Returns true if the modifier mask contains either LeftCtrl or RightCtrl. Otherwise, returns false. public static bool HasCtrl(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftCtrl or RightCtrl. Otherwise, false. HasMeta(ModifierMask) Returns true if the modifier mask contains either LeftMeta or RightMeta. Otherwise, returns false. public static bool HasMeta(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftMeta or RightMeta. Otherwise, false. HasShift(ModifierMask) Returns true if the modifier mask contains either LeftShift or RightShift. Otherwise, returns false. public static bool HasShift(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftShift or RightShift. Otherwise, false. Merge(ModifierMask[]) Merges an array of modifiers into a single modifier mask. public static ModifierMask Merge(this ModifierMask[] modifiers) Parameters modifiers ModifierMask[] The modifiers to merge. Returns ModifierMask A modifier mask which contains the specified modifiers. Exceptions ArgumentNullException modifiers is null. Split(ModifierMask) Splits a modifier mask into an array of individual modifiers. public static ModifierMask[] Split(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to split. Returns ModifierMask[] An array of individual modifiers contained in mask, or an empty array if mask is None."
  },
  "api/SharpHook.Native.MouseButton.html": {
    "href": "api/SharpHook.Native.MouseButton.html",
    "title": "Enum MouseButton | SharpHook",
    "summary": "Enum MouseButton Namespace SharpHook.Native Assembly SharpHook.dll Represents a mouse button. public enum MouseButton : ushort Fields Button1 = 1 Button 1 (usually the left mouse button) Button2 = 2 Button 2 (usually the right mouse button) Button3 = 3 Button 3 Button4 = 4 Button 4 Button5 = 5 Button 5 NoButton = 0 No button See Also MouseEventData"
  },
  "api/SharpHook.Native.MouseEventData.html": {
    "href": "api/SharpHook.Native.MouseEventData.html",
    "title": "Struct MouseEventData | SharpHook",
    "summary": "Struct MouseEventData Namespace SharpHook.Native Assembly SharpHook.dll Represents the data of a mouse-related event. public struct MouseEventData : IEquatable<MouseEventData> Implements IEquatable<MouseEventData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields Button The mouse button. public MouseButton Button Field Value MouseButton The mouse button. Clicks The number of clicks. public ushort Clicks Field Value ushort The number of clicks. X The X-coordinate of the mouse cursor. public short X Field Value short The X-coordinate of the mouse cursor. Y The Y-coordinate of the mouse cursor. public short Y Field Value short The Y-coordinate of the mouse cursor. Methods Equals(MouseEventData) Compares this object to another object for equality. public readonly bool Equals(MouseEventData data) Parameters data MouseEventData The object to compare Returns bool true if the objects are equal. Otherwise, false. Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. Operators operator ==(MouseEventData, MouseEventData) Compares two objects for equality. public static bool operator ==(MouseEventData left, MouseEventData right) Parameters left MouseEventData The first object to compare right MouseEventData The second object to compare Returns bool true if the objects are equal. Otherwise, false. operator !=(MouseEventData, MouseEventData) Compares two objects for inequality. public static bool operator !=(MouseEventData left, MouseEventData right) Parameters left MouseEventData The first object to compare right MouseEventData The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also MouseHookEventArgs MouseButton"
  },
  "api/SharpHook.Native.MouseWheelEventData.html": {
    "href": "api/SharpHook.Native.MouseWheelEventData.html",
    "title": "Struct MouseWheelEventData | SharpHook",
    "summary": "Struct MouseWheelEventData Namespace SharpHook.Native Assembly SharpHook.dll Represents the data of a mouse wheel-related event. public struct MouseWheelEventData : IEquatable<MouseWheelEventData> Implements IEquatable<MouseWheelEventData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields Delta The wheel delta. public ushort Delta Field Value ushort The wheel delta. Remarks On Windows this value is equal to the WHEEL_DELTA constant (120). On macOS this value is the number of pixels per line. On Linux this value is always equal to 100. Direction The wheel scroll direction. public MouseWheelScrollDirection Direction Field Value MouseWheelScrollDirection The wheel scroll direction. Rotation The wheel rotation. public short Rotation Field Value short The wheel rotation. Remarks A positive value indicates that the wheel was rotated up or left, and a negative value indicates that the wheel was rotated down or right. Type The wheel scroll type. public MouseWheelScrollType Type Field Value MouseWheelScrollType The wheel scroll type. X The X-coordinate of the mouse cursor. public short X Field Value short The X-coordinate of the mouse cursor. Y The Y-coordinate of the mouse cursor. public short Y Field Value short The Y-coordinate of the mouse cursor. Methods Equals(MouseWheelEventData) Compares this object to another object for equality. public readonly bool Equals(MouseWheelEventData data) Parameters data MouseWheelEventData The object to compare Returns bool true if the objects are equal. Otherwise, false. Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. Operators operator ==(MouseWheelEventData, MouseWheelEventData) Compares two objects for equality. public static bool operator ==(MouseWheelEventData left, MouseWheelEventData right) Parameters left MouseWheelEventData The first object to compare right MouseWheelEventData The second object to compare Returns bool true if the objects are equal. Otherwise, false. operator !=(MouseWheelEventData, MouseWheelEventData) Compares two objects for inequality. public static bool operator !=(MouseWheelEventData left, MouseWheelEventData right) Parameters left MouseWheelEventData The first object to compare right MouseWheelEventData The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection"
  },
  "api/SharpHook.Native.MouseWheelScrollDirection.html": {
    "href": "api/SharpHook.Native.MouseWheelScrollDirection.html",
    "title": "Enum MouseWheelScrollDirection | SharpHook",
    "summary": "Enum MouseWheelScrollDirection Namespace SharpHook.Native Assembly SharpHook.dll Represents a mouse wheel scroll direction. public enum MouseWheelScrollDirection : byte Fields Horizontal = 4 Horizontal scroll direction. Vertical = 3 Vertical scroll direction. See Also MouseWheelEventData"
  },
  "api/SharpHook.Native.MouseWheelScrollType.html": {
    "href": "api/SharpHook.Native.MouseWheelScrollType.html",
    "title": "Enum MouseWheelScrollType | SharpHook",
    "summary": "Enum MouseWheelScrollType Namespace SharpHook.Native Assembly SharpHook.dll Represents a mouse wheel scroll type. public enum MouseWheelScrollType : byte Fields BlockScroll = 2 The page scroll type on Windows, and the line scroll type on macOS. Not available on Linux. UnitScroll = 1 The default scroll type on Windows and Linux, and the pixel scroll type on macOS. See Also MouseWheelEventData"
  },
  "api/SharpHook.Native.ScreenData.html": {
    "href": "api/SharpHook.Native.ScreenData.html",
    "title": "Struct ScreenData | SharpHook",
    "summary": "Struct ScreenData Namespace SharpHook.Native Assembly SharpHook.dll Represents screen-related data. public struct ScreenData : IEquatable<ScreenData> Implements IEquatable<ScreenData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields Height The height of the screen. public ushort Height Field Value ushort The height of the screen. Number The ordinal number of the screen. public byte Number Field Value byte The ordinal number of the screen. Width The width of the screen. public ushort Width Field Value ushort The width of the screen. X The X-coordinate of the screen. public short X Field Value short The X-coordinate of the screen. Y The Y-coordinate of the screen. public short Y Field Value short The Y-coordinate of the screen. Methods Equals(ScreenData) Compares this object to another object for equality. public readonly bool Equals(ScreenData data) Parameters data ScreenData The object to compare Returns bool true if the objects are equal. Otherwise, false. Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. Operators operator ==(ScreenData, ScreenData) Compares two objects for equality. public static bool operator ==(ScreenData left, ScreenData right) Parameters left ScreenData The first object to compare right ScreenData The second object to compare Returns bool true if the objects are equal. Otherwise, false. operator !=(ScreenData, ScreenData) Compares two objects for inequality. public static bool operator !=(ScreenData left, ScreenData right) Parameters left ScreenData The first object to compare right ScreenData The second object to compare Returns bool true if the objects are not equal. Otherwise, false."
  },
  "api/SharpHook.Native.UioHook.html": {
    "href": "api/SharpHook.Native.UioHook.html",
    "title": "Class UioHook | SharpHook",
    "summary": "Class UioHook Namespace SharpHook.Native Assembly SharpHook.dll Contains native methods of libuiohook. public static class UioHook Inheritance object UioHook Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreateScreenInfo() Gets the information about screens. public static ScreenData[] CreateScreenInfo() Returns ScreenData[] The information about screens. Remarks This is the safe version of CreateScreenInfo(out byte) as it returns a managed array. See Also CreateScreenInfo(out byte) CreateScreenInfo(out byte) Gets the information about screens. public static nint CreateScreenInfo(out byte count) Parameters count byte The number of screens. Returns nint The information about screens as an unmanaged array of ScreenData whose length is returned as count. The memory used by the array must be freed manually. Remarks You should use CreateScreenInfo() instead as it returns a managed array. See Also CreateScreenInfo() GetAutoRepeatDelay() Gets the auto-repeat delay. public static extern int GetAutoRepeatDelay() Returns int The auto-repeat delay. GetAutoRepeatRate() Gets the auto-repeat rate. public static extern int GetAutoRepeatRate() Returns int The auto-repeat rate. GetMultiClickTime() Gets the multi-click time. public static extern int GetMultiClickTime() Returns int The multi-click time. GetPointerAccelerationMultiplier() Gets the pointer acceleration multiplier. public static extern int GetPointerAccelerationMultiplier() Returns int The pointer acceleration multiplier. GetPointerAccelerationThreshold() Gets the pointer acceleration threshold. public static extern int GetPointerAccelerationThreshold() Returns int The pointer acceleration threshold. GetPointerSensitivity() Gets the pointer sensitivity. public static extern int GetPointerSensitivity() Returns int The pointer sensitivity. GetPostTextDelayX11() Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public static extern ulong GetPostTextDelayX11() Returns ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method always returns 0. See Also EventSimulator PostEvent(ref UioHookEvent) Posts a fake input event. public static UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The result of the operation. Remarks The instance of the event doesn't need all fields to have value. Only Type, Keyboard/Mouse/Wheel should be present. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyCode is considered. KeyReleased Only KeyCode is considered. KeyTyped Events of this type are ignored. PostText(string) should be used to post Unicode characters. MousePressed Only X, Y, and Button are considered. MouseReleased Only X, Y, and Button are considered. MouseClicked Events of this type are ignored. MouseMoved Only X and Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only Rotation, Direction, and Type are considered. See Also EventSimulator PostText(string) Simulates the input of arbitrary Unicode characters. public static UioHookResult PostText(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. SetPostTextDelayX11(ulong) can be used to increase (or decrease) the delay if needed - longer dealys add consistency but may be more jarring to end users. GetPostTextDelayX11() can be used to get the currently configured delay - the default is 50 milliseconds. See Also EventSimulator Run() Runs the global hook and blocks the thread until it's stopped. public static extern UioHookResult Run() Returns UioHookResult The result of the operation. Remarks Calling this method when another global hook is running should never be done as it will corrupt the global state of libuiohook. RunKeyboard() Runs the global hook only for keyboard events and blocks the thread until it's stopped. public static extern UioHookResult RunKeyboard() Returns UioHookResult The result of the operation. Remarks This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and a mouse hook. On macOS and Linux there is one hook for all events, and this method simply enables filtering mouse events out on these OSes. When a keyboard-only hook is running, the Mask field will not contain any mouse button state. This method must not be called when a global hook is already running since it will corrupt the global state of libuiohook. RunMouse() Runs the global hook only for mouse events and blocks the thread until it's stopped. public static extern UioHookResult RunMouse() Returns UioHookResult The result of the operation. Remarks This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and a mouse hook. On macOS and Linux there is one hook for all events, and this method simply enables filtering keyboard events out on these OSes. When a mouse-only hook is running, the Mask field will not contain any keyboard modifier state. This method must not be called when a global hook is already running since it will corrupt the global state of libuiohook. SetDispatchProc(DispatchProc?, nint) Sets the hook callback function. public static void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also DispatchProc SetLoggerProc(LoggerProc?, nint) Sets the log callback function. public static void SetLoggerProc(LoggerProc? loggerProc, nint userData) Parameters loggerProc LoggerProc The function to call for logging, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also LoggerProc SetPostTextDelayX11(ulong) Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public static extern void SetPostTextDelayX11(ulong delayNanoseconds) Parameters delayNanoseconds ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method does nothing. See Also EventSimulator Stop() Stops the global hook. public static extern UioHookResult Stop() Returns UioHookResult The result of the operation. See Also IEventSimulationProvider IGlobalHookProvider ILoggingProvider IMouseInfoProvider IScreenInfoProvider UioHookProvider"
  },
  "api/SharpHook.Native.UioHookEvent.html": {
    "href": "api/SharpHook.Native.UioHookEvent.html",
    "title": "Struct UioHookEvent | SharpHook",
    "summary": "Struct UioHookEvent Namespace SharpHook.Native Assembly SharpHook.dll Represents an event which can be raised by libuiohook. public struct UioHookEvent : IEquatable<UioHookEvent> Implements IEquatable<UioHookEvent> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks This is a union-like struct and the data it contains depends on the type of the event. The Keyboard field is available for the events of the following types: KeyTyped KeyPressed KeyReleased The Mouse field is available for the events of the following types: MouseClicked MousePressed MouseReleased MouseMoved MouseDragged The Wheel field is available for the events of the following type: MouseWheel Fields Keyboard The event data if this event is keyboard-related. public KeyboardEventData Keyboard Field Value KeyboardEventData The event data if this event is keyboard-related. Mask The mask of the event. public ModifierMask Mask Field Value ModifierMask The mask of the event. Mouse The event data if this event is mouse-related. public MouseEventData Mouse Field Value MouseEventData The event data if this event is mouse-related. Reserved The reserved value which can be set in event handlers. public EventReservedValueMask Reserved Field Value EventReservedValueMask The reserved value which can be set in event handlers. Remarks The value for this field should be set on the same thread which handles the event. Time The UNIX timestamp of the event. public ulong Time Field Value ulong The UNIX timestamp of the event. Type The type of the event. public EventType Type Field Value EventType The type of the event. Wheel The event data if this event is mouse wheel-related. public MouseWheelEventData Wheel Field Value MouseWheelEventData The event data if this event is mouse wheel-related. Methods Equals(UioHookEvent) Compares this object to another object for equality. public readonly bool Equals(UioHookEvent e) Parameters e UioHookEvent The object to compare Returns bool true if the objects are equal. Otherwise, false. Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. Operators operator ==(UioHookEvent, UioHookEvent) Compares two objects for equality. public static bool operator ==(UioHookEvent left, UioHookEvent right) Parameters left UioHookEvent The first object to compare right UioHookEvent The second object to compare Returns bool true if the objects are equal. Otherwise, false. operator !=(UioHookEvent, UioHookEvent) Compares two objects for inequality. public static bool operator !=(UioHookEvent left, UioHookEvent right) Parameters left UioHookEvent The first object to compare right UioHookEvent The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData"
  },
  "api/SharpHook.Native.UioHookResult.html": {
    "href": "api/SharpHook.Native.UioHookResult.html",
    "title": "Enum UioHookResult | SharpHook",
    "summary": "Enum UioHookResult Namespace SharpHook.Native Assembly SharpHook.dll Represents a result of an operation of libuiohook. public enum UioHookResult Fields ErrorAxApiDisabled = 64 Accessibility API is disabled for the process (macOS) ErrorCreateEventPort = 65 Failed to create an event port (macOS) ErrorCreateInvisibleWindow = 50 Couldn't create an invisible window which will listen to screen changes (Windows) ErrorCreateObserver = 68 CFRunLoopObserverCreate failed (macOS) ErrorCreateRunLoopSource = 66 CFRunLoopSourceCreate or CFMachPortCreateRunLoopSource failed (macOS) ErrorGetModuleHandle = 49 Couldn't get a module handle for SetWindowsHookEx (Windows) ErrorGetRunLoop = 67 CFRunLoopGetCurrent failed (macOS) ErrorOutOfMemory = 2 Out of memory ErrorPostTextNull = 3 A null string was passed to PostText(string). ErrorSetWindowsHookEx = 48 SetWindowsHookEx failed (Windows) ErrorXOpenDisplay = 32 XOpenDisplay failed (X11) ErrorXRecordAllocRange = 34 XRecordAllocRange failed (X11) ErrorXRecordCreateContext = 35 XRecordCreateContext failed (X11) ErrorXRecordEnableContext = 36 XRecordEnableContext failed (X11) ErrorXRecordGetContext = 37 XRecordGetContext failed (X11) ErrorXRecordNotFound = 33 XRecord not found (X11) Failure = 1 Failure Success = 0 Success See Also UioHook"
  },
  "api/SharpHook.Native.html": {
    "href": "api/SharpHook.Native.html",
    "title": "Namespace SharpHook.Native | SharpHook",
    "summary": "Namespace SharpHook.Native Classes ModifierMaskExtensions Contains extension methods for ModifierMask. UioHook Contains native methods of libuiohook. Structs KeyboardEventData Represents the data of a keyboard-related event. MouseEventData Represents the data of a mouse-related event. MouseWheelEventData Represents the data of a mouse wheel-related event. ScreenData Represents screen-related data. UioHookEvent Represents an event which can be raised by libuiohook. Enums EventReservedValueMask Represents possible values of the Reserved field. EventType Represents the type of an input event which can be raised from a global hook or posted as a fake event. KeyCode Represents a virtual key code. LogLevel Represents a log level. ModifierMask Represents a virtual modifier mask. MouseButton Represents a mouse button. MouseWheelScrollDirection Represents a mouse wheel scroll direction. MouseWheelScrollType Represents a mouse wheel scroll type. UioHookResult Represents a result of an operation of libuiohook. Delegates DispatchProc Represents a function which is called when an event occurs. LoggerProc Represents a function which is called when a logging event occurs."
  },
  "api/SharpHook.Providers.IEventSimulationProvider.html": {
    "href": "api/SharpHook.Providers.IEventSimulationProvider.html",
    "title": "Interface IEventSimulationProvider | SharpHook",
    "summary": "Interface IEventSimulationProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level event simulation functionality. public interface IEventSimulationProvider Methods GetPostTextDelayX11() Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux. ulong GetPostTextDelayX11() Returns ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method always returns 0. PostEvent(ref UioHookEvent) Posts a fake input event. UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The result of the operation. Remarks The instance of the event doesn't need all fields to have value. Only Type, Keyboard/Mouse/Wheel should be present. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyCode is considered. KeyReleased Only KeyCode is considered. KeyTyped Events of this type are ignored. PostText(string) should be used to post Unicode characters. MousePressed Only X, Y, and Button are considered. MouseReleased Only X, Y, and Button are considered. MouseClicked Events of this type are ignored. MouseMoved Only X and Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only Rotation, Direction, and Type are considered. PostText(string) Simulates the input of arbitrary Unicode characters. UioHookResult PostText(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text entry on Linux works slowly and is not guaranteed to be correct. SetPostTextDelayX11(ulong) can be used to increase (or decrease) the delay if needed - longer delays add consistency but may be more jarring to end users. GetPostTextDelayX11() can be used to get the currently configured delay - the default is 50 milliseconds. SetPostTextDelayX11(ulong) Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. void SetPostTextDelayX11(ulong delayNanoseconds) Parameters delayNanoseconds ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method does nothing."
  },
  "api/SharpHook.Providers.IGlobalHookProvider.html": {
    "href": "api/SharpHook.Providers.IGlobalHookProvider.html",
    "title": "Interface IGlobalHookProvider | SharpHook",
    "summary": "Interface IGlobalHookProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level global hook functionality. public interface IGlobalHookProvider Methods Run() Runs the global hook and blocks the thread until it's stopped. UioHookResult Run() Returns UioHookResult The result of the operation. RunKeyboard() Runs the global hook only for keyboard events and blocks the thread until it's stopped. UioHookResult RunKeyboard() Returns UioHookResult The result of the operation. RunMouse() Runs the global hook only for mouse events and blocks the thread until it's stopped. UioHookResult RunMouse() Returns UioHookResult The result of the operation. SetDispatchProc(DispatchProc?, nint) Sets the hook callback function. void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. Stop() Stops the global hook. UioHookResult Stop() Returns UioHookResult The result of the operation."
  },
  "api/SharpHook.Providers.ILoggingProvider.html": {
    "href": "api/SharpHook.Providers.ILoggingProvider.html",
    "title": "Interface ILoggingProvider | SharpHook",
    "summary": "Interface ILoggingProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level logging functionality. public interface ILoggingProvider Methods SetLoggerProc(LoggerProc?, nint) Sets the log callback function. void SetLoggerProc(LoggerProc? loggerProc, nint userData) Parameters loggerProc LoggerProc The function to call for logging, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed."
  },
  "api/SharpHook.Providers.IMouseInfoProvider.html": {
    "href": "api/SharpHook.Providers.IMouseInfoProvider.html",
    "title": "Interface IMouseInfoProvider | SharpHook",
    "summary": "Interface IMouseInfoProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level mouse info functionality. public interface IMouseInfoProvider Methods GetAutoRepeatDelay() Gets the auto-repeat delay. int GetAutoRepeatDelay() Returns int The auto-repeat delay. GetAutoRepeatRate() Gets the auto-repeat rate. int GetAutoRepeatRate() Returns int The auto-repeat rate. GetMultiClickTime() Gets the multi-click time. int GetMultiClickTime() Returns int The multi-click time. GetPointerAccelerationMultiplier() Gets the pointer acceleration multiplier. int GetPointerAccelerationMultiplier() Returns int The pointer acceleration multiplier. GetPointerAccelerationThreshold() Gets the pointer acceleration threshold. int GetPointerAccelerationThreshold() Returns int The pointer acceleration threshold. GetPointerSensitivity() Gets the pointer sensitivity. int GetPointerSensitivity() Returns int The pointer sensitivity."
  },
  "api/SharpHook.Providers.IScreenInfoProvider.html": {
    "href": "api/SharpHook.Providers.IScreenInfoProvider.html",
    "title": "Interface IScreenInfoProvider | SharpHook",
    "summary": "Interface IScreenInfoProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level screen info functionality. public interface IScreenInfoProvider Methods CreateScreenInfo() Gets the information about screens. ScreenData[] CreateScreenInfo() Returns ScreenData[] The information about screens."
  },
  "api/SharpHook.Providers.UioHookProvider.html": {
    "href": "api/SharpHook.Providers.UioHookProvider.html",
    "title": "Class UioHookProvider | SharpHook",
    "summary": "Class UioHookProvider Namespace SharpHook.Providers Assembly SharpHook.dll A provider of low-level functionality which delegates it to the UioHook class. public sealed class UioHookProvider : IGlobalHookProvider, ILoggingProvider, IEventSimulationProvider, IScreenInfoProvider, IMouseInfoProvider Inheritance object UioHookProvider Implements IGlobalHookProvider ILoggingProvider IEventSimulationProvider IScreenInfoProvider IMouseInfoProvider Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Instance Gets the single instance of UioHookProvider. public static UioHookProvider Instance { get; } Property Value UioHookProvider Methods CreateScreenInfo() Gets the information about screens. public ScreenData[] CreateScreenInfo() Returns ScreenData[] The information about screens. GetAutoRepeatDelay() Gets the auto-repeat delay. public int GetAutoRepeatDelay() Returns int The auto-repeat delay. GetAutoRepeatRate() Gets the auto-repeat rate. public int GetAutoRepeatRate() Returns int The auto-repeat rate. GetMultiClickTime() Gets the multi-click time. public int GetMultiClickTime() Returns int The multi-click time. GetPointerAccelerationMultiplier() Gets the pointer acceleration multiplier. public int GetPointerAccelerationMultiplier() Returns int The pointer acceleration multiplier. GetPointerAccelerationThreshold() Gets the pointer acceleration threshold. public int GetPointerAccelerationThreshold() Returns int The pointer acceleration threshold. GetPointerSensitivity() Gets the pointer sensitivity. public int GetPointerSensitivity() Returns int The pointer sensitivity. GetPostTextDelayX11() Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public ulong GetPostTextDelayX11() Returns ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method always returns 0. PostEvent(ref UioHookEvent) Posts a fake input event. public UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The result of the operation. Remarks The instance of the event doesn't need all fields to have value. Only Type, Keyboard/Mouse/Wheel should be present. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyCode is considered. KeyReleased Only KeyCode is considered. KeyTyped Events of this type are ignored. MousePressed Only X, Y, and Button are considered. MouseReleased Only X, Y, and Button are considered. MouseClicked Events of this type are ignored. MouseMoved Only X and Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only Rotation, Direction, and Type are considered. PostText(string) Simulates input of arbitrary Unicode characters. public UioHookResult PostText(string text) Parameters text string The Unicode characters to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. SetPostTextDelayX11(ulong) can be used to increase (or decrease) the delay if needed - longer delays add consistency but may be more jarring to end users. GetPostTextDelayX11() can be used to get the currently configured delay - the default is 50 milliseconds. Run() Runs the global hook and blocks the thread until it's stopped. public UioHookResult Run() Returns UioHookResult The result of the operation. RunKeyboard() Runs the global hook only for keyboard events and blocks the thread until it's stopped. public UioHookResult RunKeyboard() Returns UioHookResult The result of the operation. Remarks This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and a mouse hook. On macOS and Linux there is one hook for all events, and this method simply filters mouse events out at the libuiohook level on these OSes. RunMouse() Runs the global hook only for mouse events and blocks the thread until it's stopped. public UioHookResult RunMouse() Returns UioHookResult The result of the operation. Remarks This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and a mouse hook. On macOS and Linux there is one hook for all events, and this method simply filters keyboard events out at the libuiohook level on these OSes. SetDispatchProc(DispatchProc?, nint) Sets the hook callback function. public void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also DispatchProc SetLoggerProc(LoggerProc?, nint) Sets the log callback function. public void SetLoggerProc(LoggerProc? loggerProc, nint userData) Parameters loggerProc LoggerProc The function to call for logging, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also LoggerProc SetPostTextDelayX11(ulong) Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public void SetPostTextDelayX11(ulong delayNanoseconds) Parameters delayNanoseconds ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method does nothing. Stop() Stops the global hook. public UioHookResult Stop() Returns UioHookResult The result of the operation. See Also UioHook"
  },
  "api/SharpHook.Providers.html": {
    "href": "api/SharpHook.Providers.html",
    "title": "Namespace SharpHook.Providers | SharpHook",
    "summary": "Namespace SharpHook.Providers Classes UioHookProvider A provider of low-level functionality which delegates it to the UioHook class. Interfaces IEventSimulationProvider Represents a provider of low-level event simulation functionality. IGlobalHookProvider Represents a provider of low-level global hook functionality. ILoggingProvider Represents a provider of low-level logging functionality. IMouseInfoProvider Represents a provider of low-level mouse info functionality. IScreenInfoProvider Represents a provider of low-level screen info functionality."
  },
  "api/SharpHook.Reactive.IReactiveGlobalHook.html": {
    "href": "api/SharpHook.Reactive.IReactiveGlobalHook.html",
    "title": "Interface IReactiveGlobalHook | SharpHook",
    "summary": "Interface IReactiveGlobalHook Namespace SharpHook.Reactive Assembly SharpHook.Reactive.dll Represents a global reactive keyboard and mouse hook. public interface IReactiveGlobalHook : IDisposable Inherited Members IDisposable.Dispose() Remarks All observables of objects of this interface are completed when the object is disposed, unless stated otherwise. Properties HookDisabled Gets an observable which emits a value when the global hook is disabled. IObservable<HookEventArgs> HookDisabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is disabled. Remarks The observable emits a value when the Dispose() method is called and then immediately completes. HookEnabled Gets an observable which emits a value when the global hook is enabled. IObservable<HookEventArgs> HookEnabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is enabled. Remarks The observable emits a value when the Run() or RunAsync() method is called and then immediately completes. IsDisposed Gets the value which indicates whether the global hook is disposed. bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. IsRunning Gets the value which indicates whether the global hook is running. bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. KeyPressed Gets an observable which emits a value when a key is pressed. IObservable<KeyboardHookEventArgs> KeyPressed { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is pressed. KeyReleased Gets an observable which emits a value when a key is released. IObservable<KeyboardHookEventArgs> KeyReleased { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is released. KeyTyped Gets an observable which emits a value when a key is typed. IObservable<KeyboardHookEventArgs> KeyTyped { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is typed. MouseClicked Gets an observable which emits a value when a mouse button is clicked. IObservable<MouseHookEventArgs> MouseClicked { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is clicked. MouseDragged Gets an observable which emits a value when the mouse cursor is dragged. IObservable<MouseHookEventArgs> MouseDragged { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is dragged. MouseMoved Gets an observable which emits a value when the mouse cursor is moved. IObservable<MouseHookEventArgs> MouseMoved { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is moved. MousePressed Gets an observable which emits a value when a mouse button is pressed. IObservable<MouseHookEventArgs> MousePressed { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is pressed. MouseReleased Gets an observable which emits a value when a mouse button is released. IObservable<MouseHookEventArgs> MouseReleased { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is released. MouseWheel Gets an observable which emits a value when the mouse wheel is scrolled. IObservable<MouseWheelHookEventArgs> MouseWheel { get; } Property Value IObservable<MouseWheelHookEventArgs> An observable which emits a value when the mouse wheel is scrolled. Methods Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. IObservable<Unit> RunAsync() Returns IObservable<Unit> An observable which is completed when the hook is destroyed. Remarks Since the underlying native API for running a global hook is blocking, the only way to run it without blocking the current thread is to run it on a separate thread. The returned observable is hot. It emits a single value and then immediately completes when the hook is destroyed. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter"
  },
  "api/SharpHook.Reactive.Logging.IReactiveLogSource.html": {
    "href": "api/SharpHook.Reactive.Logging.IReactiveLogSource.html",
    "title": "Interface IReactiveLogSource | SharpHook",
    "summary": "Interface IReactiveLogSource Namespace SharpHook.Reactive.Logging Assembly SharpHook.Reactive.dll Represents a reactive source of libuiohook logs. public interface IReactiveLogSource : IDisposable Inherited Members IDisposable.Dispose() Properties IsDisposed Gets the value which indicates whether the log source is disposed. bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks The MessageLogged observable doesn't emit any values in a disposed log source. MessageLogged An observable which is emitted when libuiohook logs a message. IObservable<LogEntry> MessageLogged { get; } Property Value IObservable<LogEntry> See Also ILogSource LogSource ReactiveLogSourceAdapter LogEventArgs LogEntry"
  },
  "api/SharpHook.Reactive.Logging.ReactiveLogSourceAdapter.html": {
    "href": "api/SharpHook.Reactive.Logging.ReactiveLogSourceAdapter.html",
    "title": "Class ReactiveLogSourceAdapter | SharpHook",
    "summary": "Class ReactiveLogSourceAdapter Namespace SharpHook.Reactive.Logging Assembly SharpHook.Reactive.dll Adapts an ILogSource to the IReactiveLogSource interface. public sealed class ReactiveLogSourceAdapter : IReactiveLogSource, IDisposable Inheritance object ReactiveLogSourceAdapter Implements IReactiveLogSource IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ReactiveLogSourceAdapter(ILogSource) Initializes a new instance of the ReactiveLogSourceAdapter class. public ReactiveLogSourceAdapter(ILogSource logSource) Parameters logSource ILogSource The log source to adapt. Exceptions ArgumentNullException logSource is null. ReactiveLogSourceAdapter(ILogSource, IScheduler) Initializes a new instance of the ReactiveLogSourceAdapter class. public ReactiveLogSourceAdapter(ILogSource logSource, IScheduler defaultScheduler) Parameters logSource ILogSource The log source to adapt. defaultScheduler IScheduler The default shceduler for the observable. Exceptions ArgumentNullException logSource or defaultScheduler is null. Properties IsDisposed Gets the value which indicates whether the log source is disposed. public bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks The MessageLogged observable doesn't emit any values in a disposed log source. MessageLogged An observable which is emitted when libuiohook logs a message. public IObservable<LogEntry> MessageLogged { get; } Property Value IObservable<LogEntry> Methods Dispose() Disposes the adapted log source and emits the completion signal for MessageLogged. public void Dispose() ~ReactiveLogSourceAdapter() Completes the MessageLogged observable if the log source hasn't been disposed. protected ~ReactiveLogSourceAdapter() See Also ILogSource IReactiveLogSource"
  },
  "api/SharpHook.Reactive.Logging.html": {
    "href": "api/SharpHook.Reactive.Logging.html",
    "title": "Namespace SharpHook.Reactive.Logging | SharpHook",
    "summary": "Namespace SharpHook.Reactive.Logging Classes ReactiveLogSourceAdapter Adapts an ILogSource to the IReactiveLogSource interface. Interfaces IReactiveLogSource Represents a reactive source of libuiohook logs."
  },
  "api/SharpHook.Reactive.ReactiveGlobalHookAdapter.html": {
    "href": "api/SharpHook.Reactive.ReactiveGlobalHookAdapter.html",
    "title": "Class ReactiveGlobalHookAdapter | SharpHook",
    "summary": "Class ReactiveGlobalHookAdapter Namespace SharpHook.Reactive Assembly SharpHook.Reactive.dll Adapts an IGlobalHook to the IReactiveGlobalHook interface. public sealed class ReactiveGlobalHookAdapter : IGlobalHook, IReactiveGlobalHook, IDisposable Inheritance object ReactiveGlobalHookAdapter Implements IGlobalHook IReactiveGlobalHook IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ReactiveGlobalHookAdapter(IGlobalHook) Initializes a new instance of ReactiveGlobalHookAdapter. public ReactiveGlobalHookAdapter(IGlobalHook hook) Parameters hook IGlobalHook The hook to adapt. Exceptions ArgumentNullException hook is null. ReactiveGlobalHookAdapter(IGlobalHook, IScheduler?) Initializes a new instance of ReactiveGlobalHookAdapter. public ReactiveGlobalHookAdapter(IGlobalHook hook, IScheduler? defaultScheduler) Parameters hook IGlobalHook The hook to adapt. defaultScheduler IScheduler The default scheduler for observables. Properties HookDisabled Gets an observable which emits a value when the global hook is disabled. public IObservable<HookEventArgs> HookDisabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is disabled. Remarks The observable emits a value when the Dispose() method is called and then immediately completes. HookEnabled Gets an observable which emits a value when the global hook is enabled. public IObservable<HookEventArgs> HookEnabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is enabled. Remarks The observable emits a value when the Run() or RunAsync() method is called and then immediately completes. IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. KeyPressed Gets an observable which emits a value when a key is pressed. public IObservable<KeyboardHookEventArgs> KeyPressed { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is pressed. KeyReleased Gets an observable which emits a value when a key is released. public IObservable<KeyboardHookEventArgs> KeyReleased { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is released. KeyTyped Gets an observable which emits a value when a key is typed. public IObservable<KeyboardHookEventArgs> KeyTyped { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is typed. MouseClicked Gets an observable which emits a value when a mouse button is clicked. public IObservable<MouseHookEventArgs> MouseClicked { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is clicked. MouseDragged Gets an observable which emits a value when the mouse cursor is dragged. public IObservable<MouseHookEventArgs> MouseDragged { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is dragged. MouseMoved Gets an observable which emits a value when the mouse cursor is moved. public IObservable<MouseHookEventArgs> MouseMoved { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is moved. MousePressed Gets an observable which emits a value when a mouse button is pressed. public IObservable<MouseHookEventArgs> MousePressed { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is pressed. MouseReleased Gets an observable which emits a value when a mouse button is released. public IObservable<MouseHookEventArgs> MouseReleased { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is released. MouseWheel Gets an observable which emits a value when the mouse wheel is scrolled. public IObservable<MouseWheelHookEventArgs> MouseWheel { get; } Property Value IObservable<MouseWheelHookEventArgs> An observable which emits a value when the mouse wheel is scrolled. Methods Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IGlobalHook. Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public IObservable<Unit> RunAsync() Returns IObservable<Unit> An observable which is completed when the hook is destroyed. Remarks The hook is started on a separate thread. The returned observable is hot. It emits a single value and then immediately completes when the hook is destroyed. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook IReactiveGlobalHook"
  },
  "api/SharpHook.Reactive.SimpleReactiveGlobalHook.html": {
    "href": "api/SharpHook.Reactive.SimpleReactiveGlobalHook.html",
    "title": "Class SimpleReactiveGlobalHook | SharpHook",
    "summary": "Class SimpleReactiveGlobalHook Namespace SharpHook.Reactive Assembly SharpHook.Reactive.dll Represents a simple reactive global hook. public sealed class SimpleReactiveGlobalHook : IReactiveGlobalHook, IDisposable Inheritance object SimpleReactiveGlobalHook Implements IReactiveGlobalHook IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SimpleReactiveGlobalHook() Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook() SimpleReactiveGlobalHook(GlobalHookType, IScheduler?, IGlobalHookProvider?, bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(GlobalHookType globalHookType = GlobalHookType.All, IScheduler? defaultScheduler = null, IGlobalHookProvider? globalHookProvider = null, bool runAsyncOnBackgroundThread = false) Parameters globalHookType GlobalHookType The global hook type. defaultScheduler IScheduler The default scheduler for observables, or null to use the default one. globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. SimpleReactiveGlobalHook(IGlobalHookProvider?) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IGlobalHookProvider? globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. SimpleReactiveGlobalHook(IGlobalHookProvider?, bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IGlobalHookProvider? globalHookProvider, bool runAsyncOnBackgroundThread) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. SimpleReactiveGlobalHook(bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. SimpleReactiveGlobalHook(IScheduler?) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler? defaultScheduler) Parameters defaultScheduler IScheduler The default scheduler for observables. SimpleReactiveGlobalHook(IScheduler?, IGlobalHookProvider?) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler? defaultScheduler, IGlobalHookProvider? globalHookProvider) Parameters defaultScheduler IScheduler The default scheduler for observables. globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. SimpleReactiveGlobalHook(IScheduler?, IGlobalHookProvider?, bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler? defaultScheduler, IGlobalHookProvider? globalHookProvider, bool runAsyncOnBackgroundThread) Parameters defaultScheduler IScheduler The default scheduler for observables. globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. SimpleReactiveGlobalHook(IScheduler?, bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler? defaultScheduler, bool runAsyncOnBackgroundThread) Parameters defaultScheduler IScheduler The default scheduler for observables. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Properties HookDisabled Gets an observable which emits a value when the global hook is disabled. public IObservable<HookEventArgs> HookDisabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is disabled. Remarks The observable emits a value when the Dispose() method is called and then immediately completes. HookEnabled Gets an observable which emits a value when the global hook is enabled. public IObservable<HookEventArgs> HookEnabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is enabled. Remarks The observable emits a value when the Run() or RunAsync() method is called and then immediately completes. IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. KeyPressed Gets an observable which emits a value when a key is pressed. public IObservable<KeyboardHookEventArgs> KeyPressed { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is pressed. KeyReleased Gets an observable which emits a value when a key is released. public IObservable<KeyboardHookEventArgs> KeyReleased { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is released. KeyTyped Gets an observable which emits a value when a key is typed. public IObservable<KeyboardHookEventArgs> KeyTyped { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is typed. MouseClicked Gets an observable which emits a value when a mouse button is clicked. public IObservable<MouseHookEventArgs> MouseClicked { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is clicked. MouseDragged Gets an observable which emits a value when the mouse cursor is dragged. public IObservable<MouseHookEventArgs> MouseDragged { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is dragged. MouseMoved Gets an observable which emits a value when the mouse cursor is moved. public IObservable<MouseHookEventArgs> MouseMoved { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is moved. MousePressed Gets an observable which emits a value when a mouse button is pressed. public IObservable<MouseHookEventArgs> MousePressed { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is pressed. MouseReleased Gets an observable which emits a value when a mouse button is released. public IObservable<MouseHookEventArgs> MouseReleased { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is released. MouseWheel Gets an observable which emits a value when the mouse wheel is scrolled. public IObservable<MouseWheelHookEventArgs> MouseWheel { get; } Property Value IObservable<MouseWheelHookEventArgs> An observable which emits a value when the mouse wheel is scrolled. Methods Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IReactiveGlobalHook. Exceptions HookException Stopping the hook has failed. ~SimpleReactiveGlobalHook() Destroys the global hook if it's running. protected ~SimpleReactiveGlobalHook() Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public IObservable<Unit> RunAsync() Returns IObservable<Unit> An observable which is completed when the hook is destroyed. Remarks The hook is started on a separate thread. The returned observable is hot. It emits a single value and then immediately completes when the hook is destroyed. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IReactiveGlobalHook"
  },
  "api/SharpHook.Reactive.html": {
    "href": "api/SharpHook.Reactive.html",
    "title": "Namespace SharpHook.Reactive | SharpHook",
    "summary": "Namespace SharpHook.Reactive Classes ReactiveGlobalHookAdapter Adapts an IGlobalHook to the IReactiveGlobalHook interface. SimpleReactiveGlobalHook Represents a simple reactive global hook. Interfaces IReactiveGlobalHook Represents a global reactive keyboard and mouse hook."
  },
  "api/SharpHook.SimpleGlobalHook.html": {
    "href": "api/SharpHook.SimpleGlobalHook.html",
    "title": "Class SimpleGlobalHook | SharpHook",
    "summary": "Class SimpleGlobalHook Namespace SharpHook Assembly SharpHook.dll Represents an implementation of IGlobalHook which raises events on the same thread on which the hook itself runs. public sealed class SimpleGlobalHook : GlobalHookBase, IGlobalHook, IDisposable Inheritance object GlobalHookBase SimpleGlobalHook Implements IGlobalHook IDisposable Inherited Members GlobalHookBase.Run() GlobalHookBase.RunAsync() GlobalHookBase.Dispose() GlobalHookBase.IsRunning GlobalHookBase.IsDisposed GlobalHookBase.HookEnabled GlobalHookBase.HookDisabled GlobalHookBase.KeyTyped GlobalHookBase.KeyPressed GlobalHookBase.KeyReleased GlobalHookBase.MouseClicked GlobalHookBase.MousePressed GlobalHookBase.MouseReleased GlobalHookBase.MouseMoved GlobalHookBase.MouseDragged GlobalHookBase.MouseWheel object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The event handlers should generally be fast and simple so that the thread can process all raised events. If you need to do a lot of processing in the event handlers then consider using another implementation, e.g. TaskPoolGlobalHook. Constructors SimpleGlobalHook() Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook() SimpleGlobalHook(GlobalHookType, IGlobalHookProvider?, bool) Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook(GlobalHookType globalHookType = GlobalHookType.All, IGlobalHookProvider? globalHookProvider = null, bool runAsyncOnBackgroundThread = false) Parameters globalHookType GlobalHookType The global hook type. globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. SimpleGlobalHook(IGlobalHookProvider?) Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook(IGlobalHookProvider? globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. Exceptions ArgumentNullException globalHookProvider is null. SimpleGlobalHook(IGlobalHookProvider, bool) Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook(IGlobalHookProvider globalHookProvider, bool runAsyncOnBackgroundThread) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Exceptions ArgumentNullException globalHookProvider is null. SimpleGlobalHook(bool) Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Methods HandleHookEvent(ref UioHookEvent) Handles the hook event. protected override void HandleHookEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to handle. See Also IGlobalHook GlobalHookBase TaskPoolGlobalHook"
  },
  "api/SharpHook.TaskPoolGlobalHook.html": {
    "href": "api/SharpHook.TaskPoolGlobalHook.html",
    "title": "Class TaskPoolGlobalHook | SharpHook",
    "summary": "Class TaskPoolGlobalHook Namespace SharpHook Assembly SharpHook.dll Represents a task pool-based implementation of IGlobalHook. public sealed class TaskPoolGlobalHook : GlobalHookBase, IGlobalHook, IDisposable Inheritance object GlobalHookBase TaskPoolGlobalHook Implements IGlobalHook IDisposable Inherited Members GlobalHookBase.Run() GlobalHookBase.RunAsync() GlobalHookBase.Dispose() GlobalHookBase.IsRunning GlobalHookBase.IsDisposed GlobalHookBase.HookEnabled GlobalHookBase.HookDisabled GlobalHookBase.KeyTyped GlobalHookBase.KeyPressed GlobalHookBase.KeyReleased GlobalHookBase.MouseClicked GlobalHookBase.MousePressed GlobalHookBase.MouseReleased GlobalHookBase.MouseMoved GlobalHookBase.MouseDragged GlobalHookBase.MouseWheel object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The event handlers will run with the specified parallelism level on separate threads inside the default thread pool for tasks. This way the hook itself will not be blocked if the handlers are long-running. The exception is the HookDisabled event which will run on the same thread that called the Dispose() method since at that point it doesn't matter anymore that the hook is not blocked. Setting SuppressEvent inside the handlers will have no effect as they are run on other threads. Constructors TaskPoolGlobalHook() Initializes a new instance of TaskPoolGlobalHook. public TaskPoolGlobalHook() Remarks Calling this constructor is the same as passing Sequential to the other constructor. TaskPoolGlobalHook(IGlobalHookProvider) Initializes a new instance of TaskPoolGlobalHook. public TaskPoolGlobalHook(IGlobalHookProvider globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. Exceptions ArgumentNullException globalHookProvider is null. TaskPoolGlobalHook(IGlobalHookProvider, TaskPoolGlobalHookOptions) Initializes a new instance of TaskPoolGlobalHook. [Obsolete(\"Use a constructor which accepts all possible parameters with named parameters instead\")] public TaskPoolGlobalHook(IGlobalHookProvider globalHookProvider, TaskPoolGlobalHookOptions options) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. options TaskPoolGlobalHookOptions The options of the hook which include its parallelism level. Exceptions ArgumentNullException globalHookProvider or options is null. TaskPoolGlobalHook(TaskPoolGlobalHookOptions) Initializes a new instance of TaskPoolGlobalHook. [Obsolete(\"Use a constructor which accepts all possible parameters with a named parameter instead\")] public TaskPoolGlobalHook(TaskPoolGlobalHookOptions options) Parameters options TaskPoolGlobalHookOptions The options of the hook which include its parallelism level. Exceptions ArgumentNullException options is null. TaskPoolGlobalHook(int, GlobalHookType, IGlobalHookProvider?, bool) Initializes a new instance of TaskPoolGlobalHook. public TaskPoolGlobalHook(int parallelismLevel = 1, GlobalHookType globalHookType = GlobalHookType.All, IGlobalHookProvider? globalHookProvider = null, bool runAsyncOnBackgroundThread = false) Parameters parallelismLevel int The parallelism level of event handlers. globalHookType GlobalHookType The global hook type. globalHookProvider IGlobalHookProvider The underlying global hook provider, or null to use the default one. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Methods Dispose(bool) Destoys the global hook. protected override void Dispose(bool disposing) Parameters disposing bool true if the method is called from the Dispose() method. Otherwise, false. Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IGlobalHook. Exceptions HookException Stopping the hook has failed. HandleHookEvent(ref UioHookEvent) Handles the hook event. protected override void HandleHookEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to handle. See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions"
  },
  "api/SharpHook.TaskPoolGlobalHookOptions.html": {
    "href": "api/SharpHook.TaskPoolGlobalHookOptions.html",
    "title": "Class TaskPoolGlobalHookOptions | SharpHook",
    "summary": "Class TaskPoolGlobalHookOptions Namespace SharpHook Assembly SharpHook.dll Represents options for TaskPoolGlobalHook. [Obsolete(\"Use a TaskPoolGlobalHook constructor which accepts all possible parameters instead\")] public sealed class TaskPoolGlobalHookOptions Inheritance object TaskPoolGlobalHookOptions Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TaskPoolGlobalHookOptions(bool) Initializes a new instance of TaskPoolGlobalHookOptions. public TaskPoolGlobalHookOptions(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. TaskPoolGlobalHookOptions(int) Initializes a new instance of TaskPoolGlobalHookOptions. public TaskPoolGlobalHookOptions(int parallelismLevel) Parameters parallelismLevel int The parallelism level of the event handlers. TaskPoolGlobalHookOptions(int, bool) Represents options for TaskPoolGlobalHook. public TaskPoolGlobalHookOptions(int parallelismLevel, bool runAsyncOnBackgroundThread) Parameters parallelismLevel int The parallelism level of the event handlers. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also TaskPoolGlobalHook Fields Sequential The default options with the parallelism level of 1. public static readonly TaskPoolGlobalHookOptions Sequential Field Value TaskPoolGlobalHookOptions The options with the parallelism level of 1. Properties ParallelismLevel Gets the configured parallelism level of the event handlers. public int ParallelismLevel { get; } Property Value int The parallelism level of the event handlers. RunAsyncOnBackgroundThread Gets the value of whether RunAsync() should run the hook on a background thread. public bool RunAsyncOnBackgroundThread { get; } Property Value bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also TaskPoolGlobalHook"
  },
  "api/SharpHook.Testing.TestGlobalHook.html": {
    "href": "api/SharpHook.Testing.TestGlobalHook.html",
    "title": "Class TestGlobalHook | SharpHook",
    "summary": "Class TestGlobalHook Namespace SharpHook.Testing Assembly SharpHook.dll A global hook and event simulator which can be used in tests. public sealed class TestGlobalHook : IGlobalHook, IDisposable, IEventSimulator Inheritance object TestGlobalHook Implements IGlobalHook IDisposable IEventSimulator Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TestGlobalHook() public TestGlobalHook() Properties CurrentMouseX Gets or sets the function which will specify the current mouse X-coordinate. public Func<short> CurrentMouseX { get; set; } Property Value Func<short> Exceptions ArgumentNullException value is null. CurrentMouseY Gets or sets the function which will specify the current mouse Y-coordinate. public Func<short> CurrentMouseY { get; set; } Property Value Func<short> Exceptions ArgumentNullException value is null. DisposeResult Gets or sets the result of the Dispose() method. If anything other than Success is set, then the method will throw a HookException. public UioHookResult DisposeResult { get; set; } Property Value UioHookResult The result of the Dispose() method. DragMouseWhenMoving Gets or sets the value which indicates whether simulating mouse movement will simulate events of type MouseDragged. public bool DragMouseWhenMoving { get; set; } Property Value bool true if simulating mouse movement should simulate events of type MouseDragged. Otherwise, false. EventDateTime Gets or sets the function which will be called to set the date/time of events. public Func<EventType, DateTimeOffset> EventDateTime { get; set; } Property Value Func<EventType, DateTimeOffset> Exceptions ArgumentNullException value is null. EventMask Gets or sets the function which will be called to set the mask of events. public Func<EventType, ModifierMask> EventMask { get; set; } Property Value Func<EventType, ModifierMask> Exceptions ArgumentNullException value is null. IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. KeyCodeToChars Gets or sets the function which will map key codes to characters. public Func<KeyCode, IEnumerable<char>> KeyCodeToChars { get; set; } Property Value Func<KeyCode, IEnumerable<char>> Remarks By default every key code maps to an empty character sequence. Exceptions ArgumentNullException value is null. KeyCodeToRawCode Gets or sets the function which will map key codes to raw key codes. public Func<KeyCode, ushort> KeyCodeToRawCode { get; set; } Property Value Func<KeyCode, ushort> Exceptions ArgumentNullException value is null. MouseClickCount Gets or sets the click count for events of type MousePressed, MouseReleased, and MouseClicked. public ushort MouseClickCount { get; set; } Property Value ushort The click count for events of type MousePressed, MouseReleased, and MouseClicked. RaiseMouseClicked Gets or sets the value which specifies whether MouseClicked events should be raised after MouseReleased events. public bool RaiseMouseClicked { get; set; } Property Value bool true if MouseClicked events should be raised. RunResult Gets or sets the result of the Run() and RunAsync() methods. If anything other than Success is set, then the method will throw a HookException. public UioHookResult RunResult { get; set; } Property Value UioHookResult The result of the Run() and RunAsync() methods. SimulateKeyPressResult Gets or sets the result of the SimulateKeyPress(KeyCode) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateKeyPressResult { get; set; } Property Value UioHookResult The result of the SimulateKeyPress(KeyCode) method. SimulateKeyReleaseResult Gets or sets the result of the SimulateKeyRelease(KeyCode) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateKeyReleaseResult { get; set; } Property Value UioHookResult The result of the SimulateKeyRelease(KeyCode) method. SimulateMouseMovementResult Gets or sets the result of the SimulateMouseMovement(short, short) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMouseMovementResult { get; set; } Property Value UioHookResult The result of the SimulateMouseMovement(short, short) method. SimulateMousePressResult Gets or sets the result of the SimulateMousePress(MouseButton) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMousePressResult { get; set; } Property Value UioHookResult The result of the SimulateMousePress(MouseButton) method. SimulateMouseReleaseResult Gets or sets the result of the SimulateMouseRelease(MouseButton) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMouseReleaseResult { get; set; } Property Value UioHookResult The result of the SimulateMouseRelease(MouseButton) method. SimulateMouseWheelResult Gets or sets the result of the SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMouseWheelResult { get; set; } Property Value UioHookResult The result of the SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) method. SimulateTextEntryResult Gets or sets the result of the SimulateTextEntry(string) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateTextEntryResult { get; set; } Property Value UioHookResult The result of the SimulateTextEntry(string) method. SimulatedEvents Gets the events that have been simulated using this instance. public IReadOnlyList<UioHookEvent> SimulatedEvents { get; } Property Value IReadOnlyList<UioHookEvent> SimulatedText Gets the text that has been simulated using this instance. public IReadOnlyList<string> SimulatedText { get; } Property Value IReadOnlyList<string> Methods Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. This method does nothing if the hook has already been disposed. Exceptions HookException DisposeResult was set to something other than Success. Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException RunResult was set to something other than Success. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public Task RunAsync() Returns Task A Task which finishes when the hook is destroyed. Exceptions HookException RunResult was set to something other than Success. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. SimulateKeyPress(KeyCode) Simulates pressing a key if SimulateKeyPressResult is Success. Otherwise, does nothing. public UioHookResult SimulateKeyPress(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to press. Returns UioHookResult The value of SimulateKeyPressResult. Remarks This method simulates KeyTyped events as well if KeyCodeToChars returns characters for keyCode. SimulateKeyRelease(KeyCode) Simulates releasing a key if SimulateKeyReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateKeyRelease(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to release. Returns UioHookResult The value of SimulateKeyReleaseResult. SimulateMouseMovement(short, short) Simulates moving a mouse pointer if SimulateMouseMovementResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseMovement(short x, short y) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. Returns UioHookResult The result of the operation. SimulateMouseMovementRelative(short, short) Simulates moving a mouse pointer relative to the current cursor position if SimulateMouseMovementResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseMovementRelative(short x, short y) Parameters x short The X-coordinate offset. y short The Y-coordinate offset. Returns UioHookResult The value of SimulateMouseMovementResult. SimulateMousePress(MouseButton) Simulates pressing a mouse button at the current coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public UioHookResult SimulateMousePress(MouseButton button) Parameters button MouseButton The mouse button to press. Returns UioHookResult The value of SimulateMousePressResult. SimulateMousePress(MouseButton, ushort) Simulates pressing a mouse button at the current coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public UioHookResult SimulateMousePress(MouseButton button, ushort clicks) Parameters button MouseButton The mouse button to press. clicks ushort The click count. Returns UioHookResult The value of SimulateMousePressResult. SimulateMousePress(short, short, MouseButton) Simulates pressing a mouse button at the specified coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public UioHookResult SimulateMousePress(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. Returns UioHookResult The value of SimulateMousePressResult. SimulateMousePress(short, short, MouseButton, ushort) Simulates pressing a mouse button at the specified coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public UioHookResult SimulateMousePress(short x, short y, MouseButton button, ushort clicks) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. clicks ushort The click count. Returns UioHookResult The value of SimulateMousePressResult. SimulateMouseRelease(MouseButton) Simulates releasing a mouse button at the current coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseRelease(MouseButton button) Parameters button MouseButton The mouse button to release. Returns UioHookResult The value of SimulateMouseReleaseResult. Remarks This method simulates a MouseClicked event as well if RaiseMouseClicked is true. SimulateMouseRelease(MouseButton, ushort) Simulates releasing a mouse button at the current coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseRelease(MouseButton button, ushort clicks) Parameters button MouseButton The mouse button to release. clicks ushort The click count. Returns UioHookResult The value of SimulateMouseReleaseResult. Remarks This method simulates a MouseClicked event as well if RaiseMouseClicked is true. SimulateMouseRelease(short, short, MouseButton) Simulates releasing a mouse button at the specified coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseRelease(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. Returns UioHookResult The value of SimulateMouseReleaseResult. Remarks This method simulates a MouseClicked event as well if RaiseMouseClicked is true. SimulateMouseRelease(short, short, MouseButton, ushort) Simulates releasing a mouse button at the specified coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseRelease(short x, short y, MouseButton button, ushort clicks) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. clicks ushort The click count. Returns UioHookResult The value of SimulateMouseReleaseResult. Remarks This method simulates a MouseClicked event as well if RaiseMouseClicked is true. SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) Simulates scrolling the mouse wheel if SimulateMouseWheelResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseWheel(short rotation, MouseWheelScrollDirection direction = MouseWheelScrollDirection.Vertical, MouseWheelScrollType type = MouseWheelScrollType.UnitScroll) Parameters rotation short The wheel rotation. A positive value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. direction MouseWheelScrollDirection The scroll direction. type MouseWheelScrollType The scroll type. Returns UioHookResult The value of SimulateMouseWheelResult. SimulateTextEntry(string) Simulates the input of arbitrary Unicode characters if SimulateTextEntryResult is Success. Otherwise, does nothing. public UioHookResult SimulateTextEntry(string text) Parameters text string The text to simulate. Returns UioHookResult The value of SimulateTextEntryResult. Remarks This method doesn't cause any input events to be created, unlike real text entry simulation. Exceptions ArgumentNullException text is null. Events HookDisabled An event which is raised when the global hook is disabled. public event EventHandler<HookEventArgs>? HookDisabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Dispose() method is called. HookEnabled An event which is raised when the global hook is enabled. public event EventHandler<HookEventArgs>? HookEnabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Run() or RunAsync() method is called. KeyPressed An event which is raised when a key is pressed. public event EventHandler<KeyboardHookEventArgs>? KeyPressed Event Type EventHandler<KeyboardHookEventArgs> KeyReleased An event which is raised when a key is released. public event EventHandler<KeyboardHookEventArgs>? KeyReleased Event Type EventHandler<KeyboardHookEventArgs> KeyTyped An event which is raised when a key is typed. public event EventHandler<KeyboardHookEventArgs>? KeyTyped Event Type EventHandler<KeyboardHookEventArgs> MouseClicked An event which is raised when a mouse button is clicked. public event EventHandler<MouseHookEventArgs>? MouseClicked Event Type EventHandler<MouseHookEventArgs> MouseDragged An event which is raised when the mouse cursor is dragged. public event EventHandler<MouseHookEventArgs>? MouseDragged Event Type EventHandler<MouseHookEventArgs> MouseMoved An event which is raised when the mouse cursor is moved. public event EventHandler<MouseHookEventArgs>? MouseMoved Event Type EventHandler<MouseHookEventArgs> MousePressed An event which is raised when a mouse button is pressed. public event EventHandler<MouseHookEventArgs>? MousePressed Event Type EventHandler<MouseHookEventArgs> MouseReleased An event which is raised when a mouse button is released. public event EventHandler<MouseHookEventArgs>? MouseReleased Event Type EventHandler<MouseHookEventArgs> MouseWheel An event which is raised when the mouse wheel is scrolled. public event EventHandler<MouseWheelHookEventArgs>? MouseWheel Event Type EventHandler<MouseWheelHookEventArgs>"
  },
  "api/SharpHook.Testing.TestProvider.html": {
    "href": "api/SharpHook.Testing.TestProvider.html",
    "title": "Class TestProvider | SharpHook",
    "summary": "Class TestProvider Namespace SharpHook.Testing Assembly SharpHook.dll A provider of low-level functionality which can be used in tests. public sealed class TestProvider : IGlobalHookProvider, ILoggingProvider, IEventSimulationProvider, IScreenInfoProvider, IMouseInfoProvider Inheritance object TestProvider Implements IGlobalHookProvider ILoggingProvider IEventSimulationProvider IScreenInfoProvider IMouseInfoProvider Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TestProvider() public TestProvider() Properties AutoRepeatDelay Gets or sets the auto-repeat delay for testing. public int AutoRepeatDelay { get; set; } Property Value int The auto-repeat rate. AutoRepeatRate Gets or sets the auto-repeat rate for testing. public int AutoRepeatRate { get; set; } Property Value int The auto-repeat rate. EventDateTime Gets or sets the function which will be called to set the date/time of the HookEnabled and HookDisabled events. public Func<EventType, DateTimeOffset> EventDateTime { get; set; } Property Value Func<EventType, DateTimeOffset> Exceptions ArgumentNullException value is null. EventMask Gets or sets the function which will be called to set the mask of the HookEnabled and HookDisabled events. public Func<EventType, ModifierMask> EventMask { get; set; } Property Value Func<EventType, ModifierMask> Exceptions ArgumentNullException value is null. GlobalHookType Gets the global hook type of this provider. The provider is set when the Run(), RunKeyboard(), or RunMouse() method is called. public GlobalHookType GlobalHookType { get; } Property Value GlobalHookType IsRunning Gets the value which indicates whether this provider runs the testing hook. public bool IsRunning { get; } Property Value bool true if the testing hook is running. Otherwise, false. MultiClickTime Gets or sets the multi-click time for testing. public int MultiClickTime { get; set; } Property Value int The multi-click time. PointerAccelerationMultiplier Gets or sets the pointer acceleration multiplier for testing. public int PointerAccelerationMultiplier { get; set; } Property Value int The pointer acceleration multiplier. PointerAccelerationThreshold Gets or sets the pointer acceleration threshold for testing. public int PointerAccelerationThreshold { get; set; } Property Value int The pointer acceleration threshold. PointerSensitivity Gets or sets the pointer sensitivity for testing. public int PointerSensitivity { get; set; } Property Value int The pointer sensitivity. PostEventResult Gets or sets the result of the PostEvent(ref UioHookEvent) method. If anything other than Success is set, then the event won't be posted. public UioHookResult PostEventResult { get; set; } Property Value UioHookResult The result of the PostEvent(ref UioHookEvent) method. PostTextDelayX11 Gets or sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public ulong PostTextDelayX11 { get; set; } Property Value ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. PostTextResult Gets or sets the result of the PostText(string) method. If anything other than Success is set, then the text won't be posted. public UioHookResult PostTextResult { get; set; } Property Value UioHookResult The result of the PostText(string) method. PostedEvents Gets the events that have been posted using PostEvent(ref UioHookEvent). public IReadOnlyList<UioHookEvent> PostedEvents { get; } Property Value IReadOnlyList<UioHookEvent> PostedText Gets the text that has been posted using PostText(string). public IReadOnlyList<string> PostedText { get; } Property Value IReadOnlyList<string> RunResult Gets or sets the result of the Run() method. If anything other than Success is set, then the testing hook won't be started. public UioHookResult RunResult { get; set; } Property Value UioHookResult The result of the Run() method. ScreenInfo Gets or sets the information about screens for testing. public ScreenData[] ScreenInfo { get; set; } Property Value ScreenData[] The information about screens. Exceptions ArgumentNullException value is null. StopResult Gets or sets the result of the Stop() method. If anything other than Success is set, then the testing hook won't be stopped. public UioHookResult StopResult { get; set; } Property Value UioHookResult The result of the Stop() method. Methods PostEvent(ref UioHookEvent) Posts an input event if PostEventResult is set to Success - this event will be dispatched if the provider is running. Otherwise, does nothing. public UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The value of PostEventResult. PostText(string) Simulates the input of arbitrary Unicode characters if PostTextResult is set to Success. Otherwise, does nothing. public UioHookResult PostText(string text) Parameters text string The text to simulate. Returns UioHookResult The value of PostTextResult, or ErrorPostTextNull if text is null. Remarks This method doesn't cause any input events to be created, unlike real text entry simulation. Run() Runs the testing hook if RunResult is set to Success. Otherwise, does nothing. public UioHookResult Run() Returns UioHookResult The value of RunResult. Remarks This method simply blocks the current thread until Stop() is called. Actual event dispatching happens directly in the PostEvent(ref UioHookEvent) method. As such, it's different from the real global hook where the thread which calls the Run() method is the thread which dispatches events - this is not the case with TestProvider. This method can be called when the provider is already running - it will also block the current thread. Calling the Stop() method will unblock all blocked threads. RunAsync() Runs the testing hook if RunResult is set to Success. Otherwise, does nothing. public Task<UioHookResult> RunAsync() Returns Task<UioHookResult> The value of RunResult. Remarks This method doesn't do anything and returns a Task which will be finished when Stop() is called. Actual event dispatching happens directly in the PostEvent(ref UioHookEvent) method. As such, it's different from the real global hook where the thread which calls the Run() method is the thread which dispatches events - this is not the case with TestProvider. This method can be called when the provider is already running - the same Task will be returned. This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception in a future version. RunKeyboard() Runs the testing hook if RunResult is set to Success. Otherwise, does nothing. The hook will react only to keyboard events. public UioHookResult RunKeyboard() Returns UioHookResult The value of RunResult. Remarks This method simply blocks the current thread until Stop() is called. Actual event dispatching happens directly in the PostEvent(ref UioHookEvent) method. As such, it's different from the real global hook where the thread which calls the Run() method is the thread which dispatches events - this is not the case with TestProvider. This method can be called when the provider is already running - it will also block the current thread. Calling the Stop() method will unblock all blocked threads. This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception in a future release. RunKeyboardAsync() Runs the testing hook if RunResult is set to Success. Otherwise, does nothing. The hook will react only to keyboard events. public Task<UioHookResult> RunKeyboardAsync() Returns Task<UioHookResult> The value of RunResult. Remarks This method doesn't do anything and returns a Task which will be finished when Stop() is called. Actual event dispatching happens directly in the PostEvent(ref UioHookEvent) method. As such, it's different from the real global hook where the thread which calls the Run() method is the thread which dispatches events - this is not the case with TestProvider. This method can be called when the provider is already running - the same Task will be returned. This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception in a future version. RunMouse() Runs the testing hook if RunResult is set to Success. Otherwise, does nothing. The hook will react only to mouse events. public UioHookResult RunMouse() Returns UioHookResult The value of RunResult. Remarks This method simply blocks the current thread until Stop() is called. Actual event dispatching happens directly in the PostEvent(ref UioHookEvent) method. As such, it's different from the real global hook where the thread which calls the Run() method is the thread which dispatches events - this is not the case with TestProvider. This method can be called when the provider is already running - it will also block the current thread. Calling the Stop() method will unblock all blocked threads. This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception in a future release. RunMouseAsync() Runs the testing hook if RunResult is set to Success. Otherwise, does nothing. The hook will react only to mouse events. public Task<UioHookResult> RunMouseAsync() Returns Task<UioHookResult> The value of RunResult. Remarks This method doesn't do anything and returns a Task which will be finished when Stop() is called. Actual event dispatching happens directly in the PostEvent(ref UioHookEvent) method. As such, it's different from the real global hook where the thread which calls the Run() method is the thread which dispatches events - this is not the case with TestProvider. This method can be called when the provider is already running - the same Task will be returned. This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception in a future version. SetDispatchProc(DispatchProc?, nint) Sets the hook callback function for testing. public void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Stop() Stops the testing hook if StopResult is set to Success. Otherwise, does nothing. public UioHookResult Stop() Returns UioHookResult The value of StopResult."
  },
  "api/SharpHook.Testing.html": {
    "href": "api/SharpHook.Testing.html",
    "title": "Namespace SharpHook.Testing | SharpHook",
    "summary": "Namespace SharpHook.Testing Classes TestGlobalHook A global hook and event simulator which can be used in tests. TestProvider A provider of low-level functionality which can be used in tests."
  },
  "api/SharpHook.html": {
    "href": "api/SharpHook.html",
    "title": "Namespace SharpHook | SharpHook",
    "summary": "Namespace SharpHook Classes EventSimulator A keyboard and mouse event simulator which posts events to a simulation provider (libuiohook by default). GlobalHookBase Represents an abstract implementation of IGlobalHook which defines everything needed except for a strategy for dispatching events and uses a global hook provider (libuiohook by default). HookEventArgs A base class for event args related to the global hook. HookException Represents an exception related to global hooks. KeyboardHookEventArgs Event args for keyboard-related hook events. MouseHookEventArgs Event args for mouse-related hook events. MouseWheelHookEventArgs Event args for mouse wheel-related hook events. SimpleGlobalHook Represents an implementation of IGlobalHook which raises events on the same thread on which the hook itself runs. TaskPoolGlobalHook Represents a task pool-based implementation of IGlobalHook. TaskPoolGlobalHookOptions Represents options for TaskPoolGlobalHook. Interfaces IEventSimulator Represents an object which can simulate keyboard and mouse events. IGlobalHook Represents a global keyboard and mouse hook. Enums GlobalHookType Represents a global hook type - keyboard hook, mouse hook, or both."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "SharpHook API Docs | SharpHook",
    "summary": "SharpHook API Docs This section contains API docs for the SharpHook and SharpHook.Reactive packages. Use the sidebar to navigate the docs."
  },
  "articles/about.html": {
    "href": "articles/about.html",
    "title": "About SharpHook | SharpHook",
    "summary": "About SharpHook SharpHook. Version 5.3.9. Created by Tolik Pylypchuk. Library Status I will maintain the library to keep up with the releases of libuiohook which uses a rolling release model - every commit to its 1.3 branch is considered stable. If you've noticed that this library hasn't gotten new commits in some time, rest assured that it's not abandoned! I'm not giving up on this library any time soon. Changelog v5.3.9 (March 29, 2025) The state of the modifiers is now queried on every event instead of tracking them internally which removes inconsistencies when some events are skipped. .NET 9 was added as a target. libuiohook was updated to commit 961ed5a. v5.3.8 (September 27, 2024) libuiohook was updated to commit ce96f42 which fixes mouse button release events for mouse buttons 2 and 3 on Linux. v5.3.7 (July 9, 2024) libuiohook was updated to commit 1c96539 which fixes a CPU usage issue on Linux. v5.3.6 (May 22, 2024) SharpHook now provides the correct version of libuiohook for macOS x64. v5.3.5 (May 20, 2024) Simulating mouse events when the screen configuration changes was fixed on Windows. Simulating text with repeating characters was fixed on Windows. libuiohook was updated to commit c7500ce. v5.3.4 (May 5, 2024) Simulating some keys was fixed on Windows. libuiohook was updated to commit 5128c04. v5.3.3 (April 28, 2024) Simulating mouse movement on multiple screens was fixed on Windows. libuiohook was updated to commit 902a30b. v5.3.2 (April 2, 2024) Publishing applications which reference SharpHook with Visual Studio should now work correctly. Mouse movement simulation is now more precise on Windows. libuiohook was updated to commit 5024193. v5.3.1 (March 3, 2024) Disposing an already disposed test global hook is now safe and won't throw an exception. v5.3.0 (February 24, 2024) It's now possible to run keyboard-only or mouse-only global hooks. Simulating key press/release events was fixed for some keys (such as media keys) on Windows. Global hooks and the event simulator now don't throw an exception on null parameters and instead use default values. libuiohook was updated to commit 963415f. v5.2.3 (February 2, 2024) Windows x86 support was fixed for .NET Framework. v5.2.2 (January 13, 2024) The package targets are now executed only for .NET Framework since they aren't needed for .NET/.NET Core. libuiohook resolution for Linux Arm64 was fixed in package targets. v5.2.1 (January 3, 2024) HookEventArgs.IsEventSimulated has been fixed - previously it always returned true. kCGEventTapDisabledByTimeout doesn't break the global hook on macOS anymore. The packages are now marked as AOT-compatible. libuiohook was updated to commit 7dbdc09. v5.2.0 (December 16, 2023) Simulated events can now be distinguished from real events using the HookEventArgs.IsEventSimulated property. Key codes which aren't present on modern keyboards have been deprecated. libuiohook was updated to commit d710f0f. v5.1.2 (November 25, 2023) An issue with key events changing the way some applications handle Alt keys on Windows was fixed. .NET 8 was added as a target. libuiohook was updated to commit 9027a77. v5.1.1 (October 13, 2023) An issue with key events not being simulated on Linux without a running global hook was fixed. libuiohook was updated to commit a8b6506. v5.1.0 (October 8, 2023) Mouse coordinates were fixed for event simulation on Windows with multiple screens. Simulating multiple mouse clicks on macOS was fixed. An issue with some events being ignored on Windows was fixed. Reactive log source adapter can now accept a default scheduler. libuiohook was updated to commit 2712b31. v5.0.0 (August 10, 2023) Platform Support Support for Mac Catalyst was added which makes it possible to use SharpHook in .NET MAUI apps on macOS. The minimum .NET Framework version was bumped to 4.6.2. Support for Windows on Arm32 was removed. Breaking Changes Almost all KeyCode values were changed. New codes were added and some were removed. The actual enum values are meaningless and may be changed again in the future. MouseWheelEventData doesn't contain Amount anymore. Mouse wheel simulation doesn't accept the amount anymore. Instead it accepts the scroll direction and type which makes it possible to simulate horizontal scrolling. The meaning of the mouse wheel rotation value was changed - a positive value indicates that the wheel is rotated up or left, and a negative value indicates that the wheel is rotated down or right. KeyboardEventData.KeyChar was renamed to KeyboardEventData.RawKeyChar and the KeyboardEventData.KeyChar property was added. LogEntryParser is now a singleton and doesn't have a public constructor. The constants in the MouseWheelScrollDirection enum were shortened: VerticalDirection to Vertical and HorizontalDirection to Horizontal. New Features Text entry simulation was added. Low-level functionality providers were added - they can be used instead of directly using the UioHook class. Horizontal mouse wheel simulation is now possible. Classes which help with testing were added. Reactive global hook can now accept a default scheduler which will be used for all observables. Extension methods for SharpHook.Native.ModifierMask were added. Bug Fixes Global hooks can now be created and disposed multiple times on Windows without problems. Many key code mappings to OS-specific key codes were fixed. KeyTyped events are now better at determining which characters should be produced by key presses on Windows. Other Changes libuiohook was updated to commit 6f42599. All methods in all structs in the UioHook.Native namespace are now marked as readonly. SharpHook.Reactive now depends on Rx.NET 6.0.0. Docs now use a new theme. v4.2.1 (June 18, 2023) libuiohook was updated to commit 34f279c. Getting screen info for multiple screens was fixed on Windows. A memory leak from getting screen info was fixed. v4.2.0 (April 8, 2023) libuiohook was updated to commit 56e8cb8. The ability to simulate mouse movement relative to the current cursor position was added. v4.1.0 (March 27, 2023) libuiohook was updated to commit 3a90aeb. The ability to simulate mouse press/release events at the current coordinates was added. Turns out that libuiohook has always ignored mouse coordinates when simulating mouse wheel events, so the method which simulates them without coordinates was added, and the previous one was marked as obsolete. v4.0.1 (March 12, 2023) libuiohook was updated to commit 41a17e2 which fixes support for multiple screens on Windows. v4.0.0 (November 9, 2022) .NET 7 support was added and [LibraryImport] is used instead of [DllImport] on it. Explicit targets for .NET 5 and .NET Core 3.1 were removed, though the library can be used on those platforms through .NET Standard. HookEventArgs now contains the SuppressEvent property instead of Reserved. KeyboardEventData.KeyChar is now of type ushort instead of char - this was changed purely for marshalling reasons and it should still be used as a char. Simulating mouse presses and releases now requires providing mouse pointer coordinates. The ability to make RunAsync create a background thread was added. KeyCode.VcPrintscreen was renamed to KeyCode.VcPrintScreen. Versioned libuiohook binaries for macOS and Linux were removed from the NuGet package as they were bit-for-bit same as the unversioned binaries. libuiohook is at commit 1ece4c4. v3.1.3 (October 27, 2022) Copying native libraries to the build output folder should now work correctly for .NET Framework-based projects (#18). v3.1.2 (October 19, 2022) A fix for posting keyboard events on Windows was added, as suggested by FaithBeam, and fixes #20. libuiohook is at commit fc779b0. v3.1.1 (August 5, 2022) A fork of libuiohook which fixes issue #9 is used and is at commit 09bae87. v3.1.0 (July 30, 2022) SharpHook now uses a build of libuiohook which links the C runtime statically on Windows. This means that Visual C++ Redistributable is not needed for client apps to run (the logging functionality is a exception though). (#14). The EmptyLogSource class was added, mostly for using it instead of LogSource in release builds of client apps. A memory issue which was fixed for hooks in v3.0.1 was fixed for logging as well. v3.0.2 (July 1, 2022) Windows x86 support was fixed (#10). The functions in UioHook which return system properties now return int instead of long. This is a tiny breaking change, but I believe it's too small to warrant a bump of the major (or even minor) version. v3.0.1 (June 25, 2022) A memory issue which arose only when debugging was fixed (#12). libuiohook was updated to commit de3f683. v3.0.0 (March 27, 2022) The ability to get libuiohook logs was added. Event simulation now ignores event masks not only on Windows, but everywhere, and returns a result. UioHookEvent.Time now contains the event's UNIX timestamp. IGlobalHook and IReactiveGlobalHook now contain the IsDisposed property. The HookEvent<TArgs> class was removed from SharpHook.Reactive. Several minor (but breaking) changes in the UioHook class. libuiohook is now at version 1.3 and commit a887cde. v2.0.0 (February 4, 2022) Global hooks now support both blocking and non-blocking running via the Run and RunAsync methods, and the Start method was removed. Support for suppressing event propagation. UioHookEvent.Time now has the correct type - ulong instead of ushort. Global hooks now throw an exception if they are started when already running. v1.1.0 (December 4, 2021) Cross-platform input event simulation using libuiohook. Support for Windows on Arm64. MouseWheelEventData.Rotation now has the correct type - short instead of ushort. This is a tiny breaking change, but had to be fixed. libuiohook was updated to commit 5cf864d. v1.0.1 (November 21, 2021) libuiohook was updated to commit 28ccf9c. v1.0.0 (November 8, 2021) This release is basically the same as v1.0.0 Preview 4, but built with a GA release of .NET 6. v1.0.0 Preview 4 (November 6, 2021) When Dispose on global hooks is called, they now reset the static hook callback function. HookDisabled is now emitted correctly for reactive global hooks. The assemblies are now trimmable. v1.0.0 Preview 3 (November 1, 2021) IsRunning was added to SharpHook.IGlobalHook and SharpHook.Reactive.IReactiveGlobalHook. Dispose is now safe to call when the hook is not running for all implementations. libuiohook was updated to commit 4867b8e. v1.0.0 Preview 2 (October 26, 2021) SharpHook.Native.ModifierMask.None was added. Package descriptions were fixed. v1.0.0 Preview 1 (October 26, 2021) The basic functionality is implemented: native functions, default global hooks, and reactive global hooks. libuiohook is at commit e2c581f."
  },
  "articles/hooks.html": {
    "href": "articles/hooks.html",
    "title": "Global Hooks | SharpHook",
    "summary": "Global Hooks The Interface SharpHook provides the SharpHook.IGlobalHook interface along with two default implementations which you can use to control the hook and subscribe to its events. This way is preferred to using native functions since it's more convenient. Here's a basic usage example: using SharpHook; // ... var hook = new TaskPoolGlobalHook(); hook.HookEnabled += OnHookEnabled; // EventHandler<HookEventArgs> hook.HookDisabled += OnHookDisabled; // EventHandler<HookEventArgs> hook.KeyTyped += OnKeyTyped; // EventHandler<KeyboardHookEventArgs> hook.KeyPressed += OnKeyPressed; // EventHandler<KeyboardHookEventArgs> hook.KeyReleased += OnKeyReleased; // EventHandler<KeyboardHookEventArgs> hook.MouseClicked += OnMouseClicked; // EventHandler<MouseHookEventArgs> hook.MousePressed += OnMousePressed; // EventHandler<MouseHookEventArgs> hook.MouseReleased += OnMouseReleased; // EventHandler<MouseHookEventArgs> hook.MouseMoved += OnMouseMoved; // EventHandler<MouseHookEventArgs> hook.MouseDragged += OnMouseDragged; // EventHandler<MouseHookEventArgs> hook.MouseWheel += OnMouseWheel; // EventHandler<MouseWheelHookEventArgs> hook.Run(); // or await hook.RunAsync(); IGlobalHook contains separate events for every event type that can be raised by libuiohook. The sender of these events is the IGlobalHook itself. It also contains the Run and RunAsync methods which run the global hook. Run runs it on the current thread, blocking it until the global hook is disposed. RunAsync runs the global hook in a non-blocking way and returns a Task - this task is finished when the hook is destroyed. Since the underlying native API is blocking, the only way to run the hook in a non-blocking way is to run it on a separate thread, and all default implementations do just that. You can specify in the hook constructors whether RunAsync should create a background thread or not. Background threads don't block the application from exiting if all other threads have finished executing. By default the created thread will not be a background thread. You can subscribe to events after the hook is started. If you run the hook when it's already running, then an exception will be thrown. You can check whether a hook is running using its IsRunning property. IGlobalHook extends IDisposable. When you call the Dispose method on a hook, it's destroyed. The contract of the interface is that once a hook has been destroyed, it cannot be started again - you'll have to create a new instance. Calling Dispose when the hook is not running is safe - it just won't do anything (other than marking the instance as disposed). You can check whether the hook is disposed using the IsDisposed property. The HookEnabled event is raised once when the Run or RunAsync method is called. The HookDisabled event is raised once when the Dispose method is called. Hook events are of type HookEventArgs or a derived type which contains more info. It's possible to suppress event propagation by setting the SuppressEvent property to true inside the event handler. This must be done synchronously and is only supported on Windows and macOS. You can check the event time and whether the event is real or simulated with the EventTime and IsEventSimulated properties respectively. Important Always use one instance of IGlobalHook at a time in the entire application since they all must use the same static method to set the hook callback for libuiohook, so there may only be one callback at a time. Running a global hook when another global hook is already running will corrupt the internal global state of libuiohook. You can create a keyboard-only or a mouse-only hook by passing a GlobalHookType to the hook's constructor. This makes a difference only on Windows where there are two different global hooks - a keyboard hook and a mouse hook. On macOS and Linux there is one hook for all events, and this simply enables filtering keyboard or mouse events out on these OSes. The Default Implementations SharpHook provides two implementations of IGlobalHook: SharpHook.SimpleGlobalHook runs all of its event handlers on the same thread on which the hook itself runs. This means that the handlers should generally be fast since they will block the hook from handling the events that follow if they run for too long. SharpHook.TaskPoolGlobalHook runs all of its event handlers on other threads inside the default thread pool for tasks. The parallelism level of the handlers can be configured. On backpressure it will queue the remaining handlers. This means that the hook will be able to process all events. This implementation should be preferred to SimpleGlobalHook except for very simple use-cases. But it has a downside - suppressing event propagation will be ignored since event handlers are run on other threads. The library also provides the SharpHook.GlobalHookBase class which you can extend to create your own implementation of the global hook. It calls the appropriate event handlers, and you only need to implement a strategy for dispatching the events. It also contains a finalizer which will stop the global hook if this object is not reachable anymore."
  },
  "articles/keycodes.html": {
    "href": "articles/keycodes.html",
    "title": "Key Code Mappings | SharpHook",
    "summary": "Key Code Mappings The following table contains the mapping of virtual key codes defined in the SharpHook.Native.KeyCode enum to OS-specific key code definitions. Note that many key codes are not available on all 3 OSes. Important Key code values in the KeyCode enum are meaningless and may change between major versions. Only the enum constant names should be taken into consideration (e.g. when persisting key codes). Sources: Windows: Microsoft Docs. macOS: HIToolbox/Events.h as defined in macOS 13.5 with some additional key codes included in libuiohook. X11: /usr/share/X11/xkb/keycodes/evdev as defined in Kubuntu 22.04 Evdev: input-event-codes.h from the Linux source code. Note Key codes marked with O are obsolete since these keys don't exist on modern keyboards. These key codes will most probably be removed in the next major version. SharpHook Key Code Windows Key Code macOS Key Code X11 Key Name Evdev Key Definition VcUndefined Undefined Undefined Undefined Undefined VcEscape VK_ESCAPE kVK_Escape ESC KEY_ESC VcF1 VK_F1 kVK_F1 FK01 KEY_F1 VcF2 VK_F2 kVK_F2 FK02 KEY_F2 VcF3 VK_F3 kVK_F3 FK03 KEY_F3 VcF4 VK_F4 kVK_F4 FK04 KEY_F4 VcF5 VK_F5 kVK_F5 FK05 KEY_F5 VcF6 VK_F6 kVK_F6 FK06 KEY_F6 VcF7 VK_F7 kVK_F7 FK07 KEY_F7 VcF8 VK_F8 kVK_F8 FK08 KEY_F8 VcF9 VK_F9 kVK_F9 FK09 KEY_F9 VcF10 VK_F10 kVK_F10 FK010 KEY_F10 VcF11 VK_F11 kVK_F11 FK011 KEY_F11 VcF12 VK_F12 kVK_F12 FK012 KEY_F12 VcF13 VK_F13 kVK_F13 FK013 KEY_F13 VcF14 VK_F14 kVK_F14 FK014 KEY_F14 VcF15 VK_F15 kVK_F15 FK015 KEY_F15 VcF16 VK_F16 kVK_F16 FK016 KEY_F16 VcF17 VK_F17 kVK_F17 FK017 KEY_F17 VcF18 VK_F18 kVK_F18 FK018 KEY_F18 VcF19 VK_F19 kVK_F19 FK019 KEY_F19 VcF20 VK_F20 kVK_F20 FK020 KEY_F20 VcF21 VK_F21 - FK021 KEY_F21 VcF22 VK_F22 - FK022 KEY_F22 VcF23 VK_F23 - FK023 KEY_F23 VcF24 VK_F24 - FK024 KEY_F24 VcBackQuote VK_OEM_3 kVK_ANSI_Grave TLDE KEY_GRAVE Vc0 0x30, '0' kVK_ANSI_0 AE10 KEY_0 Vc1 0x31, '1' kVK_ANSI_1 AE01 KEY_1 Vc2 0x32, '2' kVK_ANSI_2 AE02 KEY_2 Vc3 0x33, '3' kVK_ANSI_3 AE03 KEY_3 Vc4 0x34, '4' kVK_ANSI_4 AE04 KEY_4 Vc5 0x35, '5' kVK_ANSI_5 AE05 KEY_5 Vc6 0x36, '6' kVK_ANSI_6 AE06 KEY_6 Vc7 0x37, '7' kVK_ANSI_7 AE07 KEY_7 Vc8 0x38, '8' kVK_ANSI_8 AE08 KEY_8 Vc9 0x39, '9' kVK_ANSI_9 AE09 KEY_9 VcMinus VK_OEM_MINUS kVK_ANSI_Minus AE11 KEY_MINUS VcEquals VK_OEM_PLUS kVK_ANSI_Equal AE12 KEY_EQUAL VcBackspace VK_BACK kVK_Delete BKSP KEY_BACKSPACE VcTab VK_TAB kVK_Tab TAB KEY_TAB VcCapsLock VK_CAPITAL kVK_CapsLock CAPS KEY_CAPSLOCK VcA 0x41, 'A' kVK_ANSI_A AC01 KEY_A VcB 0x42, 'B' kVK_ANSI_B AB05 KEY_B VcC 0x43, 'C' kVK_ANSI_C AB03 KEY_C VcD 0x44, 'D' kVK_ANSI_D AC03 KEY_D VcE 0x45, 'E' kVK_ANSI_E AD03 KEY_E VcF 0x46, 'F' kVK_ANSI_F AC04 KEY_F VcG 0x47, 'G' kVK_ANSI_G AC05 KEY_G VcH 0x48, 'H' kVK_ANSI_H AC06 KEY_H VcI 0x49, 'I' kVK_ANSI_I AD08 KEY_I VcJ 0x4A, 'J' kVK_ANSI_J AC07 KEY_J VcK 0x4B, 'K' kVK_ANSI_K AC08 KEY_K VcL 0x4C, 'L' kVK_ANSI_L AC09 KEY_L VcM 0x4D, 'M' kVK_ANSI_M AB07 KEY_M VcN 0x4E, 'N' kVK_ANSI_N AB06 KEY_N VcO 0x4F, 'O' kVK_ANSI_O AD09 KEY_O VcP 0x50, 'P' kVK_ANSI_P AD10 KEY_P VcQ 0x51, 'Q' kVK_ANSI_Q AD01 KEY_Q VcR 0x52, 'R' kVK_ANSI_R AD04 KEY_R VcS 0x53, 'S' kVK_ANSI_S AC02 KEY_S VcT 0x54, 'T' kVK_ANSI_T AD05 KEY_T VcU 0x55, 'U' kVK_ANSI_U AD07 KEY_U VcV 0x56, 'V' kVK_ANSI_V AB04 KEY_V VcW 0x57, 'W' kVK_ANSI_W AD02 KEY_W VcX 0x58, 'X' kVK_ANSI_X AB02 KEY_X VcY 0x59, 'Y' kVK_ANSI_Y AD06 KEY_Y VcZ 0x5A, 'Z' kVK_ANSI_Z AB01 KEY_Z VcOpenBracket VK_OEM_4 kVK_ANSI_LeftBracket AD11 KEY_LEFTBRACE VcCloseBracket VK_OEM_6 kVK_ANSI_RightBracket AD12 KEY_RIGHTBRACE VcBackslash VK_OEM_5 kVK_ANSI_Backslash AC12 and BKSL KEY_BACKSLASH VcSemicolon VK_OEM_1 kVK_ANSI_Semicolon AC10 KEY_SEMICOLON VcQuote VK_OEM_7 kVK_ANSI_Quote AC11 KEY_APOSTROPHE VcEnter VK_RETURN kVK_Return RTRN KEY_ENTER VcComma VK_OEM_COMMA kVK_ANSI_Comma AB08 KEY_COMMA VcPeriod VK_OEM_PERIOD kVK_ANSI_Period AB09 KEY_DOT VcSlash VK_OEM_2 kVK_ANSI_Slash AB10 KEY_DOT VcSpace VK_SPACE kVK_Space SPCE KEY_SPACE Vc102 VK_OEM_102 kVK_ISO_Section LSGT KEY_102ND VcMisc VK_OEM_8 - - - VcPrintScreen VK_SNAPSHOT - PRSC KEY_SYSRQ VcPrint O VK_PRINT - I218 KEY_PRINT VcSelect O VK_SELECT - - - VcExecute O VK_EXECUTE - - - VcScrollLock VK_SCROLL - SCLK KEY_SCROLLLOCK VcPause VK_PAUSE - PAUS KEY_PAUSE VcCancel VK_CANCEL - I231 KEY_CANCEL VcHelp VK_HELP kVK_Help HELP KEY_HELP VcInsert VK_INSERT - INS KEY_INSERT VcDelete VK_DELETE kVK_ForwardDelete DELE KEY_DELETE VcHome VK_HOME kVK_Home HOME KEY_HOME VcEnd VK_END kVK_End END KEY_END VcPageUp VK_PRIOR kVK_PageUp PGUP KEY_PAGEUP VcPageDown VK_NEXT kVK_PageDown PGDN KEY_PAGEDOWN VcUp VK_UP kVK_UpArrow UP KEY_UP VcLeft VK_LEFT kVK_LeftArrow LEFT KEY_LEFT VcRight VK_RIGHT kVK_RightArrow RGHT KEY_RIGHT VcDown VK_DOWN kVK_DownArrow DOWN KEY_DOWN VcNumLock VK_NUMLOCK - NMLK KEY_NUMLOCK VcNumPadClear VK_CLEAR and VK_OEM_CLEAR kVK_ANSI_KeypadClear - - VcNumPadDivide VK_DIVIDE kVK_ANSI_KeypadDivide KPDV KEY_KPASTERISK VcNumPadMultiply VK_MULTIPLY kVK_ANSI_KeypadMultiply KPMU KEY_KPSLASH VcNumPadSubtract VK_SUBTRACT kVK_ANSI_KeypadMinus KPSU KEY_KPMINUS VcNumPadEquals 0x92 kVK_ANSI_KeypadEquals KPEQ KEY_KPEQUAL VcNumPadAdd VK_ADD kVK_ANSI_KeypadPlus KPAD KEY_KPPLUS VcNumPadEnter VK_RETURN with KEYEVENTF_EXTENDEDKEY kVK_ANSI_KeypadEnter KPEN KEY_KPENTER VcNumPadDecimal VK_DECIMAL kVK_ANSI_KeypadDecimal KPDL KEY_KPDOT VcNumPadSeparator VK_SEPARATOR - I129 KEY_KPCOMMA VcNumPadPlusMinus O - - I126 KEY_KPPLUSMINUS VcNumPad0 VK_NUMPAD0 kVK_ANSI_Keypad0 KP0 KEY_KP0 VcNumPad1 VK_NUMPAD1 kVK_ANSI_Keypad1 KP1 KEY_KP1 VcNumPad2 VK_NUMPAD2 kVK_ANSI_Keypad2 KP2 KEY_KP2 VcNumPad3 VK_NUMPAD3 kVK_ANSI_Keypad3 KP3 KEY_KP3 VcNumPad4 VK_NUMPAD4 kVK_ANSI_Keypad4 KP4 KEY_KP4 VcNumPad5 VK_NUMPAD5 kVK_ANSI_Keypad6 KP6 KEY_KP6 VcNumPad6 VK_NUMPAD6 kVK_ANSI_Keypad6 KP6 KEY_KP6 VcNumPad7 VK_NUMPAD7 kVK_ANSI_Keypad7 KP7 KEY_KP7 VcNumPad8 VK_NUMPAD8 kVK_ANSI_Keypad8 KP8 KEY_KP8 VcNumPad9 VK_NUMPAD9 kVK_ANSI_Keypad9 KP9 KEY_KP9 VcNumPadOpenParenthesis O - - I187 KEY_KPLEFTPAREN VcNumPadCloseParenthesis O - - I188 KEY_KPRIGHTPAREN VcLeftShift VK_LSHIFT and VK_SHIFT kVK_Shift LFSH KEY_LEFTSHIFT VcRightShift VK_RSHIFT kVK_RightShift RTSH KEY_RIGHTSHIFT VcLeftControl VK_LCONTROL and VK_CONTROL kVK_Control LCTL KEY_LEFTCTRL VcRightControl VK_RCONTROL kVK_RightControl RCTL KEY_RIGHTCTRL VcLeftAlt VK_LMENU and VK_MENU kVK_Option LALT KEY_LEFTALT VcRightAlt VK_RMENU kVK_RightOption RALT KEY_RIGHTALT VcLeftMeta VK_LWIN kVK_Command LWIN and LMTA KEY_LEFTMETA VcRightMeta VK_RWIN kVK_RightCommand RWIN and RMTA KEY_RIGHTMETA VcContextMenu VK_APPS 0x6E COMP and MENU KEY_COMPOSE VcFunction - kVK_Function - - VcChangeInputSource - 0xB3 - - VcPower - 0xE6 POWR KEY_POWER VcSleep VK_SLEEP - I150 KEY_SLEEP VcWake O - - I151 KEY_WAKEUP VcMedia O - - I234 KEY_MEDIA VcMediaPlay VK_MEDIA_PLAY_PAUSE 0xF0 I172 KEY_PLAYPAUSE VcMediaStop VK_MEDIA_STOP - I174 KEY_STOPCD VcMediaPrevious VK_MEDIA_PREV_TRACK 0xF2 I173 KEY_PREVIOUSSONG VcMediaNext VK_MEDIA_NEXT_TRACK 0xF1 I171 KEY_NEXTSONG VcMediaSelect VK_LAUNCH_MEDIA_SELECT - - - VcMediaEject - 0xEE I169 KEY_EJECTCD VcMediaClose O - - I168 KEY_CLOSECD VcMediaEjectClose O - - I170 KEY_EJECTCLOSECD VcMediaRecord O - - I175 KEY_RECORD VcMediaRewind O - - I176 KEY_REWIND VcVolumeMute VK_VOLUME_MUTE kVK_Mute MUTE KEY_MUTE VcVolumeDown VK_VOLUME_DOWN kVK_VolumeDown VOL- KEY_VOLUMEDOWN VcVolumeUp VK_VOLUME_UP kVK_VolumeUp VOL+ KEY_VOLUMEUP VcAttn O VK_ATTN - - - VcCrSel O VK_CRSEL - - - VcExSel O VK_EXSEL - - - VcEraseEof O VK_EREOF - - - VcPlay O VK_PLAY - I215 KEY_PLAY VcZoom O VK_ZOOM - - - VcNoName O VK_NONAME - - - VcPa1 O VK_PA1 - - - VcApp1 VK_LAUNCH_APP1 - I156 KEY_PROG1 VcApp2 VK_LAUNCH_APP2 - I157 KEY_PROG2 VcApp3 - - I210 KEY_PROG3 VcApp4 - - I211 KEY_PROG4 VcAppBrowser - - I158 KEY_WWW VcAppCalculator - - I148 KEY_CALC VcAppMail VK_LAUNCH_MAIL - I163 KEY_MAIL VcBrowserSearch VK_BROWSER_SEARCH - I225 KEY_SEARCH VcBrowserHome VK_BROWSER_HOME - I180 KEY_HOMEPAGE VcBrowserBack VK_BROWSER_BACK - I166 KEY_BACK VcBrowserForward VK_BROWSER_FORWARD - I167 KEY_FORWARD VcBrowserStop VK_BROWSER_STOP - - - VcBrowserRefresh VK_BROWSER_REFRESH - I181 KEY_REFRESH VcBrowserFavorites VK_BROWSER_FAVORITES - I164 KEY_BOOKMARKS VcKatakanaHiragana - - HKTG KEY_KATAKANAHIRAGANA VcKatakana - - KATA KEY_KATAKANA VcHiragana - - HIRA KEY_HIRAGANA VcKana VK_KANA kVK_JIS_Kana - - VcKanji VK_KANJI - - - VcHangul VK_HANGUL - HNGL KEY_HANGEUL VcJunja VK_JUNJA - - - VcFinal VK_FINAL - - - VcHanja VK_HANJA - HJCV KEY_HANJA VcAccept VK_ACCEPT - - - VcConvert VK_CONVERT - HENK KEY_HENKAN VcNonConvert VK_NONCONVERT - MUHE KEY_MUHENKAN VcImeOn VK_IME_ON - - - VcImeOff VK_IME_OFF - - - VcModeChange VK_MODECHANGE - I155 KEY_XFER VcProcess VK_PROCESSKEY - - - VcAlphanumeric - kVK_JIS_Eisu - - VcUnderscore - kVK_JIS_Underscore AB11 KEY_RO VcYen - kVK_JIS_Yen AE13 KEY_YEN VcJpComma - kVK_JIS_KeypadComma JPCM KEY_KPJPCOMMA VcStop O - - STOP and I136 KEY_STOP VcProps O - - PROP and I138 KEY_PROPS VcFront O - - FRNT and I140 KEY_FRONT VcOpen O - - OPEN and I142 KEY_OPEN VcFind O - - FIND and I144 KEY_FIND VcAgain O - - AGAI and I137 KEY_AGAIN VcUndo O - - UNDO and I139 KEY_UNDO VcRedo O - - I190 KEY_REDO VcCopy O - - COPY and I141 KEY_COPY VcPaste O - - PAST and I143 KEY_PASTE VcCut O - - CUT and I145 KEY_CUT VcLineFeed O - - LNFD KEY_LINEFEED VcMacro O - - I120 KEY_MACRO VcScale O - - I128 KEY_SCALE VcSetup O - - I149 KEY_SETUP VcFile O - - I152 KEY_FILE VcSendFile O - - I153 KEY_SENDFILE VcDeleteFile O - - I154 KEY_DELETEFILE VcMsDos O - - I159 KEY_MSDOS VcLock O - - I160 KEY_COFFEE VcRotateDisplay O - - I161 KEY_ROTATE_DISPLAY VcCycleWindows O - - I162 KEY_CYCLEWINDOWS VcComputer O - - I165 KEY_COMPUTER VcPhone O - - I177 KEY_PHONE VcIso O - - I178 KEY_ISO VcConfig O - - I179 KEY_CONFIG VcExit O - - I182 KEY_EXIT VcMove O - - I183 KEY_MOVE VcEdit O - - I184 KEY_EDIT VcScrollUp O - - I185 KEY_SCROLLUP VcScrollDown O - - I186 KEY_SCROLLDOWN VcNew O - - I189 KEY_NEW VcPlayCd O - - I208 KEY_PLAYCD VcPauseCd O - - I209 KEY_PAUSECD VcDashboard O - - I212 KEY_DASHBOARD VcSuspend O - - I213 KEY_SUSPEND VcClose O - - I214 KEY_CLOSE VcFastForward O - - I216 KEY_FASTFORWARD VcBassBoost O - - I217 KEY_BASSBOOST VcHp O - - I219 KEY_HP VcCamera O - - I220 KEY_CAMERA VcSound O - - I221 KEY_SOUND VcQuestion O - - I222 KEY_QUESTION VcEmail O - - I223 KEY_EMAIL VcChat O - - I224 KEY_CHAT VcConnect O - - I226 KEY_CONNECT VcFinance O - - I227 KEY_FINANCE VcSport O - - I228 KEY_SPORT VcShop O - - I229 KEY_SHOP VcAltErase O - - I230 KEY_ALTERASE VcBrightnessDown O - - I232 KEY_BRIGHTNESSDOWN VcBrightnessUp O - - I233 KEY_BRIGHTNESSUP VcBrightnesCycle O - - I251 KEY_BRIGHTNESS_CYCLE VcBrightnessAuto O - - I252 KEY_BRIGHTNESS_AUTO VcSwitchVideoMode O - - I235 KEY_SWITCHVIDEOMODE VcKeyboardLightToggle O - - I236 KEY_KBDILLUMTOGGLE VcKeyboardLightDown O - - I237 KEY_KBDILLUMDOWN VcKeyboardLightUp O - - I238 KEY_KBDILLUMUP VcSend O - - I239 KEY_SEND VcReply O - - I240 KEY_REPLY VcForwardMail O - - I241 KEY_FORWARDMAIL VcSave O - - I242 KEY_SAVE VcDocuments O - - I243 KEY_DOCUMENTS VcBattery O - - I244 KEY_BATTERY VcBluetooth O - - I245 KEY_BLUETOOTH VcWlan O - - I246 KEY_WLAN VcUwb O - - I247 KEY_UWB VcX11Unknown O - - I248 KEY_UNKNOWN VcVideoNext O - - I249 KEY_VIDEO_NEXT VcVideoPrevious O - - I250 KEY_VIDEO_PREV VcVideoPrevious O - - I250 KEY_VIDEO_PREV VcDisplayOff O - - I253 KEY_DISPLAY_OFF VcWwan O - - I254 KEY_WWAN VcRfKill O - - I255 KEY_RFKILL"
  },
  "articles/logging.html": {
    "href": "articles/logging.html",
    "title": "Logging | SharpHook",
    "summary": "Logging libuiohook can log messages throughout its execution. By default the messages are not logged anywhere, but you can get these logs by using UioHook.SetLoggerProc, or the ILogSource interface and its default implementation, LogSource. libuiohook logs contain the log level (debug, info, warning, error), message format, and message arguments. The message structure is the following: function [line]: message function is the function name in the libuiohook source code, and line is the source code line. Using High-Level Types The easiest way to subscribe to libuiohook's logs is to use the LogSource class and its interface - ILogSource. The interface contains the MessageLogged event, and extends IDisposable. Calling the Dispose method will stop the log source from receiving the logs. The IsDisposed property is also available. LogSource also contains the MinLevel property which can be set to filter log messages by level. It's not recommended to use the debug level for long periods of time since a debug message is logged for every single input event. Here's a usage example: using SharpHook.Logging; using SharpHook.Native; // ... var logSource = LogSource.RegisterOrGet(minLevel: LogLevel.Info); logSource.MessageLogged += this.OnMessageLogged; private void OnMessageLogged(object? sender, LogEventArgs e) => this.logger.Log(this.AdaptLogLevel(e.LogEntry.Level), e.LogEntry.FullText); You can get an instance of LogSource by using the static RegisterOrGet method. Subsequent calls to this method will return the same registered instance. You can dispose of a log source to stop receiving libuiohook messages. After that calling RegisterOrGet will register a new instance. The MessageLogged event contains event args of type LogEventArgs which contains just one property of type LogEntry. This class contains the actual log message. The simplest way to use LogEntry is to use its Level and FullText properties. FullText is created using the log message format and arguments so you don't have to do it yourself. SharpHook.Reactive contains the IReactiveLogSource and its implementation - ReactiveLogSourceAdapter. Here's a usage example: using SharpHook.Logging; using SharpHook.Native; using SharpHook.Reactive.Logging; // ... var logSource = LogSource.RegisterOrGet(minLevel: LogLevel.Info); var reactiveLogSource = new ReactiveLogSourceAdapter(logSource); reactiveLogSource.MessageLogged.Subscribe(this.OnMessageLogged); IReactiveLogSource is basically the same as ILogSource, but MessageLogged is an observable of LogEntry instead of an event. ReactiveLogSourceAdapter adapts an ILogSource to the IReactiveLogSource interface. A default scheduler can be set for the MessageLogged observable. Using the Low-Level Functionality The logging functionality works by using UioHook.SetLoggerProc. This method sets the log callback - a delegate of type LoggerProc, which will be called to log the messages of libuiohook. LoggerProc receives the log level, a pointer to the message format, and a pointer to the message arguments. It also receives a pointer to user-supplied data (which is set in the UioHook.SetLoggerProc), but you shouldn't ever use that. It is highly recommended to use LogEntryParser in order to create a log entry out of the pointers to the message format and arguments. This way you won't have to handle these pointers directly. The problem with handling them directly is that the log callback receives a variable number of arguments. In C# you can use the params keyword for that, but native functions do that in an entirely different way, and .NET doesn't have a default way to handle that (there is an undocumented __arglist keyword, but it can't be used in delegates and callbacks). LogEntryParser handles all that - its code is based on the log handling code of LibVLCSharp. Basically it calls the native vsprintf function from the C runtime and lets it deal with formatting the log message with native variable arguments. It then parses the log message and the log format and extracts the arguments. If you want to use your own callback then its form should be the following: private void OnLog(LogLevel level, IntPtr userData, IntPtr format, IntPtr args) { // Filter by log level if needed var logEntry = LogEntryParser.Instance.ParseNativeLogEntry(level, format, args); // Handle the log entry instead of the native format and arguments } Advanced Usage If you use structured logging then you may want to use the message format and arguments directly, instead of using the formatted result. LogEntry contains properties which can help you with that: Format - the format of the log message which can be passed to String.Format. RawFormat - the raw native format of the log message (which uses argument placeholders for C's printf function). Arguments - the strongly-typed arguments of the log message. RawArguments - the arguments of the log message as they appear in the formatted log message. ArgumentPlaceholders - the placeholders extracted from the native log format (e.g. %d for a number). String.Format(entry.Format, entry.RawAguments.ToArray()) is equal to entry.FullText. String.Format(entry.Format, entry.Aguments.ToArray()) is not necessarily equal to entry.FullText since some formatting information is discarded, but using Arguments instead of RawArguments is better suited for structured logging. Arguments contains parsed message arguments which can be of one of the types listed below, according to the argument placeholders. Only the specifier and length are considered (see the C's printf docs for reference). Type Placeholder int %d, %i sbyte %hhd, %hhi short %hd, %hi long %ld, %li, %lld, %lli, %jd, %ji uint %u, %o, %x, %X byte %hhu, %hho, %hhx, %hhX ushort %hu, %ho, %hx, %hX ulong %lu, %lo, %lx, %lX, %llu, %llo, %llx, %llX, %ju, %jo, %jx, %jX double %f, %F, %e, %E, %g, %G decimal %Lf, %LF, %Le, %LE, %Lg, %LG char %c IntPtr %p string Any other placeholder, including %s The %a, %A, and %n specifiers are not supported, as well as length z and t. LogEntry also contains the Function and SourceLine properties. These are the first two arguments of the log message - the function name in the libuiohook source code, and the source code line."
  },
  "articles/migration.html": {
    "href": "articles/migration.html",
    "title": "Migration Guide | SharpHook",
    "summary": "Migration Guide A Note on SemVer SharpHook follows SemVer with two exceptions: the IEventSimulator interface and the interfaces in the SharpHook.Providers namespace. These interfaces are not meant to be implemented directly in client code - they are just abstractions over the corresponding classes. As such, when new features are added to event simulation or low-level functionality providers, these interfaces need to be changed. Technically, this is a breaking change and would require bumping the major version. Instead, changes to these interfaces are usually treated as minor version updates since they are not expected to break client code. Version 4 to 5 Version 5 contains multiple breaking changes, so you may need to change your code to upgrade. Almost all KeyCode values were changed. New codes were added and some were removed. Before upgrading, make sure that no numeric key code values are persisted since they will be incompatible. The actual enum values are meaningless and may be changed again in the future. Make sure to only use the enum constant names, e.g. when persisting key codes. Mouse wheel events were changed. MouseWheelEventData doesn't contain Amount anymore - instead only Rotation should be considered the value of the scroll. Mouse wheel simulation was changed as well and doesn't accept the amount anymore. Instead it accepts the scroll direction and type which makes it possible to simulate horizontal scrolling. The meaning of the Rotation value was changed - a positive value indicates that the wheel is rotated up or left, and a negative value indicates that the wheel is rotated down or right. KeyboardEventData.KeyChar was renamed to KeyboardEventData.RawKeyChar. Since the key char is of type ushort for marshalling reasons but should be used as a char, the KeyboardEventData.KeyChar property was added, which simply casts KeyboardEventData.RawKeyChar to char. LogEntryParser is now a singleton and doesn't have a public constructor. The constants in the MouseWheelScrollDirection enum were shortened: VerticalDirection to Vertical and HorizontalDirection to Horizontal. All methods in all structs in the UioHook.Native namespace are now marked as readonly. The minimum .NET Framework version was bumped to 4.6.2 since 4.6.1 is not supported anymore. Support for Windows on Arm32 was removed since it was removed in .NET 5. Support for Mac Catalyst was added which makes it possible to use SharpHook in .NET MAUI apps on macOS. SharpHook.Reactive now depends on Rx.NET 6.0.0. Version 3 to 4 Version 4 contains a couple breaking changes, so you may need to change your code to upgrade. The biggest change is that simulating mouse button pressing/releasing now requires mouse pointer coordinates. They were actually always required by libuiohook, so previously the buttons were always pressed/released at (0, 0). EventSimulator.SimulateMousePress and EventSimulator.SimulateMouseRelease now have the following parameters: short x, short y, MouseButton button. HookEventArgs doesn't contain the Reserved property anymore as its purpose wasn't really clear. Now HookEventArgs contains the SuppressEvent property - set it to true inside an event handler to suppress the event. On .NET 7 [LibraryImport] is now used instead of [DllImport]. This change required making UioHookEvent a blittable type, and as a result, the type of KeyboardEventData.KeyChar was changed from char to ushort. The field should still be used as a char. Explicit targets for .NET 5 and .NET Core 3.1 were removed, though the library can be used on those platforms through .NET Standard. KeyCode.VcPrintscreen was renamed to KeyCode.VcPrintScreen. When simulating mouse wheel events on Windows, their rotation value was previously multiplied by 120. This behavior was removed. The ability to make RunAsync create a background thread was added - you can now specify that a running hook won't stop the application from exiting if all other threads have finished executing. Versioned libuiohook binaries for macOS and Linux were removed from the NuGet package as they were bit-for-bit same as the unversioned binaries. Version 2 to 3 Version 3 contains several breaking changes, so you may need to change your code to upgrade. libuiohook is now at version 1.3 and contains breaking changes which propagated to the UioHook class and a few other types. UioHook.SetDispatchProc now receives a pointer to user-supplied data. This pointer is then passed to the callback, so DispatchProc also receives it. You shouldn't ever use this functionality (you should pass IntPtr.Zero to SetDispatchProc). View the article about low-level features for more info. Previously event masks were ignored when simulating events on Windows. Now event masks are always ignored when simulating events, so the methods of IEventSimulator and EventSimulator don't have the optional second parameter which specifies the event's mask anymore. It's not possible to simulate Windows events with masks directly the way macOS and Linux allow it, so this functionality was removed from libuiohook on other OSes as well. UioHook.PostEvent now returns UioHookResult instead of being void. Thus, all methods of IEventSimulator and EventSimulator also return UioHookResult. UioHookEvent.Time now contains the event's UNIX timestamp, and HookEventArgs now contains the EventTime property - a DateTimeOffset object derived from the timestamp. You can now get libuiohook logs if you need to log its execution, which was not possible before. Other changes were done independently of libuiohook. IGlobalHook and IReactiveGlobalHook now contain the IsDisposed property. The HookEvent<TArgs> class was removed from SharpHook.Reactive. The observables of IReactiveGlobalHook now emit HookEventArgs or a derived type directly. If you need the sender of the event, then use closures. Version 1 to 2 In order to migrate from version 1 to version 2 there are several things that should be done - they are all quite small. The Start method was removed from IGlobalHook and IReactiveGlobalHook. Instead these interfaces now provide two methods: Run and RunAsync. Run is for running the global hook on the same thread and blocking that thread. RunAsync behaves the same way that Start did before - it starts the hook on a separate thread and doesn't block the calling thread. Replace the invocation of Start to the invocation of RunAsync on a global hook if you simply want to keep the previous behavior. EmptyDispatchProc was removed from UioHook. If you want to unset the hook callback function, then call UioHook.SetDispatchProc(null). The type of UioHookEvent.Reserved was changed from ushort to a ushort-based enum so that its possible values are more clear. The type of UioHookEvent.Time previously was ushort which was wrong. It was corrected to ulong. Note that this field does not contain the event's timestamp. The global hooks now throw an exception if the hook is started when it's already running. Also, possible exceptions are now part of the interface definition. All unexpected exceptions that can happen when starting and stopping the hook are now wrapped into HookException with the value of UioHookResult.Failure."
  },
  "articles/native.html": {
    "href": "articles/native.html",
    "title": "Native Functions | SharpHook",
    "summary": "Native Functions This article describes how to use the low-level features provided by SharpHook. SharpHook exposes the functions of libuiohook in the SharpHook.Native.UioHook class. The SharpHook.Native namespace also contains types which represent the data used by libuiohook. In general, you don't need to use the native methods directly. Instead, use the higher-level interfaces and classes provided by SharpHook. However, you should still read this article to know how the high-level features work under the hood. Working with the Hook Itself UioHook contains the following methods for working with the global hook: SetDispatchProc - sets the function which will be called when an event is raised by libuiohook. Run - creates a keyboard and mouse global hook and runs it on the current thread, blocking it until Stop is called. RunKeyboard - creates a keyboard-only global hook and runs it on the current thread, blocking it until Stop is called. RunMouse - creates a mouse-only global hook and runs it on the current thread, blocking it until Stop is called. Stop - destroys the global hook. You have to remember that only one global hook can exist at a time since calling SetDispatchProc will override the previously set one. Also, running a global hook when another global hook is already running will corrupt the internal global state of libuiohook. SetDispatchProc accepts a delegate of type SharpHook.Native.DispatchProc. This delegate in turn accepts a SharpHook.Native.UioHookEvent by reference, and returns nothing. You can pass null to SetDispatchProc in order to unset the callback function. Run and Stop return a UioHookResult which specifies whether the result of the method was successful (UioHookResult.Success) or not (any other value). The methods described above are also defined in the SharpHook.Providers.IGlobalHookProvider interface. macOS has constraints on how the global hook can be used. More info can be found in the article on OS-specific constraints. Input Events The SharpHook.Native.UioHookEvent struct contains information about events that have occured. There are several event types supported by libuiohook (contained in the event's Type field and defined in the SharpHook.Native.EventType enum). Following are the general-purpose events: HookEnabled - raised when the Run method is called. HookDisabled - raised when the Stop method is called. Following are the keyboard events, and UioHookEvent will contain more infomration in its Keyboard field: KeyPressed - raised when a key is pressed (its state changed from up to down). KeyReleased - raised when a key is released (its state changed from down to up). KeyTyped - raised when a key press may have caused a character to be typed regardless of whether a character was actually typed. Following are the mouse events, and UioHookEvent will contain more infomration in its Mouse field: MouseClicked - raised when a mouse button is clicked (pressed and released without dragging). MousePressed - raised when a mouse button is pressed (its state changed from up to down). MouseReleased - raised when a mouse button is released (its state changed from down to up). MouseMoved - raised when the mouse cursor is moved. MouseDragged - raised when the mouse cursor is dragged (moved while a button is down). And the last one is also a mouse event, but UioHookEvent will contain more information in its Wheel field since it has more information: MouseWheel - raised when the mouse wheel is scrolled. EventType defines three more types, but they are used only when simulating events. UioHookEvent also contains the Time field which is the event's UNIX timestamp. UioHookEvent also contains the Mask field which contains the state of keyboard modifiers and the mouse state at the time of the event. Note that when running a keyboard-only global hook, Mask will not contain any mouse state; conversely, when running a mouse-only global hook, Mask will not contain the state of keyboard modifiers. Lastly, UioHookEvent contains the Reserved field which is contains various bit flags. Currently two flags are supported: Suppressing event propagation (bit 0). If it's set in the event handler then libuiohook will not propagate the event further and it will effectively be blocked. This bit should be set synchronously i.e. on the same thread which handles the event. Supressing events works only on Windows and macOS. Distinguishing real events from simulated events (bit 1). If this bit is set, then the event is simulated. Otherwise, the event is real. Note KeyTyped and MouseClicked events are not raised by the OS, but by libuiohook itself. KeyTyped is raised after KeyPressed if the key press may have caused characters to be typed. Since a single key press can cause multiple characters to be typed, a single KeyPressed event can raise multiple KeyTyped events. MouseClicked is raised after MouseReleased if the cursor was not dragged. Since these events are raised by libuiohook, and not the OS, suppressing them has no effect. Simulating Input Events UioHook contains the PostEvent method for simulating input events. It accepts a UioHookEvent, but it doesn't need all its fields. Only Type and Keyboard/Mouse/Wheel should be present. PostEvent returns UioHookResult to indicate whether it was successful or not. This method is also defined in the SharpHook.Providers.IEventSimulationProvider interface. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyboardEventData.KeyCode is considered. KeyReleased Only KeyboardEventData.KeyCode is considered. KeyTyped Events of this type are ignored. The next section describes text entry simulation. MousePressed Only MouseWheelEventData.X, MouseWheelEventData.Y, and MouseEventData.Button are considered. MousePressedIgnoreCoordinates Only MouseEventData.Button is considered. MouseReleased Only MouseWheelEventData.X, MouseWheelEventData.Y, and MouseEventData.Button are considered. MouseReleasedIgnoreCoordinates Only MouseEventData.Button is considered. MouseClicked Events of this type are ignored. MouseMoved Only MouseEventData.X and MouseEventData.Y are considered. MouseMovedRelativeToCursor Only MouseEventData.X and MouseEventData.Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only MouseWheelEventData.Rotation, MouseWheelEventData.Direction, and MouseWheelEventData.Type are considered. Mouse wheel simulation is a little more complex than other events. A positive MouseWheelEventData.Rotation value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. On Windows the value 120 represents the default wheel step. As such, multiples of 120 can be used as the rotation value, but it's not required. The value of MouseWheelEventData.Type is ignored. On macOS it's recommended to use values between -10 and 10. This will result in quite a small scroll amount with pixel scrolling, so MouseWheelScrollType.BlockScroll is recommended for line scrolling instead of pixel scrolling. On Linux there is no fixed recommendation, but multiples of 100 can be used. The value of MouseWheelEventData.Type is ignored. Simulating Text Entry SharpHook also provides text entry simulation. UioHook contains the PostText method which accepts a string. The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. Text entry simulation may not work well on Linux. More info can be found in the article on OS-specific constraints. The methods described above are also defined in the SharpHook.Providers.IEventSimulationProvider interface. Logging libuiohook can log messages throughout its execution. By default it doesn't log anything, but UioHook contains the SetLoggerProc method to set the log callback function - it will be called by libuiohook to log messages. This method is also defined in the SharpHook.Providers.ILoggingProvider interface. SetLoggerProc accepts a delegate of type SharpHook.Native.LoggerProc. This delegate in turn accepts a log level, the message format (as a pointer) and arguments (also as a pointer). You can read more about how to use the SetLoggerProc method in the article about logging, though it's not recommended to use it directly. Passing Custom Data to Callbacks SetDispatchProc and SetLoggerProc also receive a pointer to user-supplied data. It is then passed to the callbacks - both DispatcherProc and LoggerProc receive user-supplied data as well. Do not use them. You should always pass IntPtr.Zero to SetDispatchProc and SetLoggerProc and not use the respective parameters in the callbacks. The reason is that in order to use pointers to managed objects, they have to be pinned. As these callbacks tend to be long-lived (probably as long as the program itself), the objects will have to be pinned for a long time as well, and that's detrimental to the performance of the garbage collector and the memory layout of the program. If you need to pass custom data to the callbacks then simply use closures. This feature was created with the C language in mind, and C doesn't have closures. Other Functions libuiohook also provides functions which get various pieces of information about the system, and are listed below: CreateScreenInfo GetAutoRepeatRate GetAutoRepeatDelay GetPointerAccelerationMultiplier GetPointerAccelerationThreshold GetPointerSensitivity GetMultiClickTime These functions are quite straightforward, except for CreateScreenInfo. UioHook defines two versions of this function. One is a native function which returns an unmanaged array of ScreenData objects (as an IntPtr) along with its length in an output parameter. Another is a wrapper which returns a managed array. Use the second one if you need it since it's safer. If you decide to use the native version then you must free the returned memory manually. The safe version of CreateScreenInfo is also defined in the SharpHook.Providers.IScreenInfoProvider interface. Other methods described above are also defined in the SharpHook.Providers.IMouseInfoProvider interface. Low-Level Functionality Providers If you want to use the low-level functionality, you don't need to use the UioHook class directly. Instead you can use interfaces in the SharpHook.Providers namespace. The methods in those interfaces are the same as in the UioHook class. SharpHook.Providers.UioHookProvider implements all of these interfaces and simply calls the corresponding methods in UioHook. This should be done to decouple your code from UioHook and make testing easier."
  },
  "articles/os-constraints.html": {
    "href": "articles/os-constraints.html",
    "title": "OS-Specific Constraints | SharpHook",
    "summary": "OS-Specific Constraints This article describes OS-specific constrains and other things that should be noted about OS support. Windows Supported Versions Only Windows 10 and 11 are supported. Important If the global hook runs on versions of Windows older than Windows 10 1607, then it will destroy dead keys rendering them unusable. This is because it uses the ToUnicodeEx function to determine which characters are typed by key presses, and before Windows 10 1607 this function changed the keyboard state. Supported Architectures x86, x64, and Arm64 are supported. Arm32 is not supported since its support was dropped in .NET 5. Visual C++ Redistributable The libuiohook build used by SharpHook on Windows is statically linked to the C runtime which means that client apps don't need the Visual C++ Redistributable package. An exception is the logging functionality - LogEntryParser uses the vsprintf function from the C runtime, and as such, it requires the Visual C++ Redistributable package on Windows, unlike the rest of SharpHook. If you don't want your app to be dependent on this package, then you can use the EmptyLogSource class instead of LogSource in release builds of your app. EmptyLogSource implements ILogSource, but never raises the MessageLogged event and doesn't subscribe to libuiohook logs. DPI Awareness An application manifest is required on Windows to enable DPI awareness for your app. If it's not enabled then mouse coordinates will be wrong on high-DPI screens. You can look at the sample app in the SharpHook repository to see the manifest example. Text Entry Simulation On Windows text simulation should work correctly and consistently. macOS Supported Versions macOS 10.15+ is supported. Mac Catalyst 13.1+ is supported. Supported Architectures x64 and Arm64 are supported. Accessibility API macOS requires that the accessibility API be enabled for the application if it wants to create a global hook. If the accessiblity API is not enabled, then Run will fail and return UioHookResult.ErrorAxApiDisabled. If that happens then the OS will show a dialog about enabling accessibility for the app. Main Run-Loop On macOS running the global hook requires that the main run-loop is present. libuiohook takes care of it if the hook is run on the main thread. It's also taken care of by UI frameworks since they need an event loop on the main thread to run. But if you're using a global hook in a console app or a background service and want to run it on some thread other than the main one then you should take care of it yourself. You can do that by P/Invoking the native CFRunLoopRun function on the main thread. Simulating Multiple Mouse Clicks macOS doesn't recognize that a mouse was clicked multiple times when multiple press/release events have been simulated. Instead, the click count must be explicitly provided. This is why IEvenSimulator contains the SimulateMousePress and SimulateMouseRelease overloads with the clicks parameter. This parameter should be incremented for each press/release, starting with 1. Text Entry Simulation On macOS applications are not required to process text entry simulation, but most of them should handle it correctly. Linux Supported Distributions Linux distributions supported by .NET are supported by SharpHook. It may work correctly on other distributions, but if it doesn't then the problems will most probably not be fixed. Supported Architectures x64, Arm32, and Arm64 are supported. x86 is not supported by .NET itself. X11 and Wayland Only X11 is supported. Wayland support may be available in a future version. Text Entry Simulation X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. UioHook contains the SetPostTextDelayX11 method which can be used to increase (or decrease) the delay if needed - longer delays add consistency but may be more jarring to end users. UioHook also contains the GetPostTextDelayX11 which can be used to get the currently configured delay - the default is 50 milliseconds. Delays are configurable on a nanosecond level. On Windows and macOS SetPostTextDelayX11 does nothing, and GetPostTextDelayX11 always returns 0. IEventSimulator contains the TextSimulationDelayOnX11 property which is wrapper arount the aforementioned methods."
  },
  "articles/reactive.html": {
    "href": "articles/reactive.html",
    "title": "Reactive Global Hooks | SharpHook",
    "summary": "Reactive Global Hooks If you're using Rx.NET, you can use the SharpHook.Reactive package to integrate SharpHook with Rx.NET. Using this package is preferred when possible since it's more powerful. The Interface SharpHook.Reactive provides the SharpHook.Reactive.IReactiveGlobalHook interface along with a default implementation which you can use to use to control the hook and subscribe to its observables. Here's a basic example: using SharpHook.Reactive; // ... var hook = new SimpleReactiveGlobalHook(); hook.HookEnabled.Subscribe(OnHookEnabled); hook.HookDisabled.Subscribe(OnHookDisabled); hook.KeyTyped.Subscribe(OnKeyTyped); hook.KeyPressed.Subscribe(OnKeyPressed); hook.KeyReleased.Subscribe(OnKeyReleased); hook.MouseClicked.Subscribe(OnMouseClicked); hook.MousePressed.Subscribe(OnMousePressed); hook.MouseReleased.Subscribe(OnMouseReleased); hook.MouseMoved .Throttle(TimeSpan.FromSeconds(0.5)) .Subscribe(OnMouseMoved); hook.MouseDragged .Throttle(TimeSpan.FromSeconds(0.5)) .Subscribe(OnMouseDragged); hook.MouseWheel.Subscribe(OnMouseWheel); hook.Run(); // or hook.RunAsync().Subscribe(); The observables for events emit the EventArgs-derived types which are the same as in the events of IGlobalHook. Unlike IGlobalHook you can't get the sender of the event by default. If you need to pass the hook itself as well, then use a closure. The Run and RunAsync methods are basically the same as in IGlobalHook, but RunAsync returns an IObservable<Unit> instead of a Task (the observable is hot). This observable will emit a single value and then complete when the global hook is destroyed. Running the hook when it's already running is also not allowed, and the IsRunning property is also available. IReactiveGlobalHook extends IDisposable as well and calling Dispose will destroy the global hook. As with IGlobalHook, starting a disposed instance again shouldn't be allowed. Calling Dispose when the hook is not running is safe - it just won't do anything (other than marking the instance as disposed). The IsDisposed property is also available. The HookEnabled and HookDisabled observables will emit a single event and then immediately complete afterwards. Important Always use one instance of IReactiveGlobalHook at a time in the entire application since they all must use the same static method to set the hook callback for libuiohook, so there may only be one callback at a time. Running a global hook when another global hook is already running will corrupt the internal global state of libuiohook. The Default Implementations SharpHook.Reactive provides two implementations of IReactiveGlobalHook: SharpHook.Reactive.SimpleReactiveGlobalHook. Since we're dealing with observables, it's up to you to decide when and where to handle the events through schedulers. A default scheduler can be specified for all observables. SharpHook.Reactive.ReactiveGlobalHookAdapter adapts an IGlobalHook to IReactiveGlobalHook. All subscriptions and changes are propagated to the adapted hook. There is no default adapter from IReactiveGlobalHook to IGlobalHook. A default scheduler can be specified for all observables. SimpleReactiveGlobalHook contains a finalizer which will stop the global hook if the object is not reachable anymore. All event observables of both classes will be completed when the hook is destroyed."
  },
  "articles/simulation.html": {
    "href": "articles/simulation.html",
    "title": "Event and Text Entry Simulation | SharpHook",
    "summary": "Event and Text Entry Simulation SharpHook provides the ability to simulate keyboard and mouse events, as well as text entry, in a cross-platform way as well. It provides the IEventSimulator interface, and the default implementation, EventSimulator, which calls UioHook.PostEvent to simulate the events by default (though it's configurable). The methods in this interface return a UioHookResult to specify whether the event was simulated successfully, or not. Simulated events can be distinguished from real ones in a global hook handler with the HookEventArgs.IsEventSimulated property. Event Simulation Input event simulation is quite straightforward. Here's a quick example: using SharpHook; using SharpHook.Native; // ... var simulator = new EventSimulator(); // Press Ctrl+C simulator.SimulateKeyPress(KeyCode.VcLeftControl); simulator.SimulateKeyPress(KeyCode.VcC); // Release Ctrl+C simulator.SimulateKeyRelease(KeyCode.VcC); simulator.SimulateKeyRelease(KeyCode.VcLeftControl); // Press the left mouse button simulator.SimulateMousePress(MouseButton.Button1); // Release the left mouse button simulator.SimulateMouseRelease(MouseButton.Button1); // Press the left mouse button at (0, 0) simulator.SimulateMousePress(0, 0, MouseButton.Button1); // Release the left mouse button at (0, 0) simulator.SimulateMouseRelease(0, 0, MouseButton.Button1); // Move the mouse pointer to (0, 0) simulator.SimulateMouseMovement(0, 0); // Move the mouse pointer 50 pixels to the right and 100 pixels down simulator.SimulateMouseMovementRelative(50, 100); // Scroll the mouse wheel simulator.SimulateMouseWheel( rotation: -120, direction: MouseWheelScrollDirection.Vertical, // Vertical by default type: MouseWheelScrollType.UnitScroll); // UnitScroll by default Mouse wheel simulation is a little more complex than other events. A positive rotation value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. On Windows the value 120 represents the default wheel step. As such, multiples of 120 can be used as the rotation value, but it's not required. The value of type is ignored. On macOS it's recommended to use values between -10 and 10. This will result in quite a small scroll amount with pixel scrolling, so MouseWheelScrollType.BlockScroll is recommended for line scrolling instead of pixel scrolling. On Linux there is no fixed recommendation, but multiples of 100 can be used. The value of type is ignored. Text Entry Simulation SharpHook also provides text entry simulation. IEventSimulator contains the SimulateTextEntry method which accepts a string. The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. Text entry simulation may not work well on Linux. More info can be found in the article on OS-specific constraints."
  },
  "articles/testing.html": {
    "href": "articles/testing.html",
    "title": "Testing | SharpHook",
    "summary": "Testing SharpHook provides two classes which make testing easier. They aren't required since mocks can be used instead, but unlike mocks, no setup is required to use these classes. Note Testing classes are contained directly in the SharpHook package. This increases the package size, but these classes will be removed if trimming is enabled. Test Global Hook SharpHook.Testing.TestGlobalHook provides an implementation of IGlobalHook and IEventSimulator which can be used for testing. When the Run or RunAsync method is called, it will dispatch events using the various Simulate methods from IEventSimulator. Here's a very simple example of a test which utilizes TestGlobalHook: [Fact] public void TestLastPressedKey() { using var hook = new TestGlobalHook(); var keyCode = KeyCode.VcA; var componentUnderTest = new SomeClassWhichUsesGlobalHookEvents(hook); // Run the test hook asynchronously and ignore the result _ = hook.RunAsync(); hook.SimulateKeyPress(keyCode); Assert.Equal(keyCode, componentUnderTest.LastPressedKey); } If this class is used as an IEventSimulator in the tested code, then the SimulatedEvents property can be checked to see which events were simulated using the test instance. Members of TestGlobalHook are quite straightforward; the API reference should be viewed for more info. If an IReactiveGlobalHook is needed for testing, then ReactiveGlobalHookAdapter can be used to adapt an instance of TestGlobalHook. Test Low-Level Functionality Provider If the low-level functionality of SharpHook should be mocked, or mocking should be pushed as far away as possible, then SharpHook.Testing.TestProvider can be used. It implements every interface in the SharpHook.Providers namespace and as such it can be used instead of a normal low-level functionality provider. Like TestGlobalHook, this class can post events using the PostEvent method and dispatch them if Run was called. It also contains the PostedEvents property. All classes in SharpHook use providers instead of directly using the UioHook class for low-level functionality. The providers are selectable, so e.g. the following global hook can be used for testing: var testProvider = new TestProvider(); // Calls to methods in testProvider will be reflected in the hook var hook = new SimpleGlobalHook(globalHookProvider: testProvider); Note TaskPoolGlobalHook shouldn't be used this way since its event handlers are asynchronous and there is no built-in way to know when they are actually executed. As such, it's difficult to check event handler results. If you want to use a real hook, e.g. for integration testing, then use SimpleGlobalHook instead."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | SharpHook",
    "summary": "Introduction SharpHook provides a cross-platform global keyboard and mouse hook, event simulation, and text entry simulation for .NET. It is a wrapper of libuiohook and provides direct access to its features as well as higher-level types to work with it. Installation dotnet add package SharpHook --version 5.3.9 dotnet add package SharpHook.Reactive --version 5.3.9 Supported Platforms SharpHook targets .NET 6+, .NET Framework 4.6.2+, and .NET Standard 2.0. The following table describes the availability of SharpHook on various platforms: Windows macOS Linux x86 Yes N/A No x64 Yes Yes Yes Arm32 No N/A Yes Arm64 Yes Yes Yes Platform support notes: Windows 10/11 is supported. Support for Windows on Arm32 was removed in version 5.0.0 since it was removed in .NET 5. macOS 10.15+ is supported. Mac Catalyst is also supported (13.1+). macOS requires that the accessibility API be enabled for the application if it wants to create a global hook. Linux distributions supported by .NET are supported by SharpHook. Linux on x86 is not supported by .NET itself. Only X11 is supported - Wayland support may be coming, but it's not yet here. More info on OS support can be found in an article on OS-specific constraints."
  }
}