{
  "api/SharpHook.EventSimulator.html": {
    "href": "api/SharpHook.EventSimulator.html",
    "title": "Class EventSimulator | SharpHook",
    "keywords": "Class EventSimulator Namespace SharpHook Assembly SharpHook.dll A keyboard and mouse event simulator which posts events to the OS. public class EventSimulator : IEventSimulator Inheritance object EventSimulator Implements IEventSimulator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EventSimulator() Initializes a new instance of the EventSimulator class. public EventSimulator() See Also IEventSimulationProvider PostEvent(ref UioHookEvent) EventSimulator(IEventSimulationProvider) Initializes a new instance of the EventSimulator class. public EventSimulator(IEventSimulationProvider simulationProvider) Parameters simulationProvider IEventSimulationProvider The simulation functionality provider. Exceptions ArgumentNullException simulationProvider is null. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) Properties TextSimulationDelayOnX11 Gets or sets the delay between simulating individual characters when simulating text on Linux. public TimeSpan TextSimulationDelayOnX11 { get; set; } Property Value TimeSpan The delay between simulating individual characters when simulating text on Linux. Remarks X11 doesn't support simulating arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this property is ignored. Exceptions ArgumentOutOfRangeException value represents a negative time span. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) Methods SimulateKeyPress(KeyCode) Simulates pressing a key. public UioHookResult SimulateKeyPress(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to press. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateKeyRelease(KeyCode) Simulates releasing a key. public UioHookResult SimulateKeyRelease(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to release. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateMouseMovement(short, short) Simulates moving a mouse pointer. public UioHookResult SimulateMouseMovement(short x, short y) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateMouseMovementRelative(short, short) Simulates moving a mouse pointer relative to the current cursor position. public UioHookResult SimulateMouseMovementRelative(short x, short y) Parameters x short The X-coordinate offset. y short The Y-coordinate offset. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateMousePress(MouseButton) Simulates pressing a mouse button at the current coordinates. public UioHookResult SimulateMousePress(MouseButton button) Parameters button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateMousePress(short, short, MouseButton) Simulates pressing a mouse button at the specified coordinates. public UioHookResult SimulateMousePress(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateMouseRelease(MouseButton) Simulates releasing a mouse button at the current coordinates. public UioHookResult SimulateMouseRelease(MouseButton button) Parameters button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateMouseRelease(short, short, MouseButton) Simulates releasing a mouse button at the specified coordinates. public UioHookResult SimulateMouseRelease(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) Simulates scrolling the mouse wheel. public UioHookResult SimulateMouseWheel(short rotation, MouseWheelScrollDirection direction = MouseWheelScrollDirection.Vertical, MouseWheelScrollType type = MouseWheelScrollType.UnitScroll) Parameters rotation short The wheel rotation. A positive value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. direction MouseWheelScrollDirection The scroll direction. type MouseWheelScrollType The scroll type (considered only on macOS). Returns UioHookResult The result of the operation. Remarks On Windows the value 120 represents the default wheel step. As such, multiples of 120 can be used, but it's not required. The value of type is ignored. On macOS it's recommended to use values between -10 and 10. This will result in quite a small scroll amount with pixel scrolling, so BlockScroll is recommended for line scrolling instead of pixel scrolling. On Linux there is no fixed recommendation, but multiples of 100 can be used. The value of type is ignored. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) SimulateTextEntry(string) Simulates the input of arbitrary Unicode characters. public UioHookResult SimulateTextEntry(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. TextSimulationDelayOnX11 can be used to increase (or decrease) the delay if needed - longer dealys add consistency but may be more jarring to end users. TextSimulationDelayOnX11 can also be used to get the currently configured delay - the default is 50 milliseconds. Exceptions ArgumentNullException text is null. See Also IEventSimulationProvider PostEvent(ref UioHookEvent) See Also IEventSimulationProvider PostEvent(ref UioHookEvent)"
  },
  "api/SharpHook.GlobalHookBase.html": {
    "href": "api/SharpHook.GlobalHookBase.html",
    "title": "Class GlobalHookBase | SharpHook",
    "keywords": "Class GlobalHookBase Namespace SharpHook Assembly SharpHook.dll Represents an abstract implementation of IGlobalHook which raises events only when there is at least one subscriber. public abstract class GlobalHookBase : IGlobalHook, IDisposable Inheritance object GlobalHookBase Implements IGlobalHook IDisposable Derived SimpleGlobalHook TaskPoolGlobalHook Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors GlobalHookBase() Initializes a new instance of GlobalHookBase. protected GlobalHookBase() See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook GlobalHookBase(IGlobalHookProvider) Initializes a new instance of GlobalHookBase. protected GlobalHookBase(IGlobalHookProvider globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. Exceptions ArgumentNullException globalHookProvider is null. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook GlobalHookBase(IGlobalHookProvider, bool) Initializes a new instance of GlobalHookBase. protected GlobalHookBase(IGlobalHookProvider globalHookProvider, bool runAsyncOnBackgroundThread) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Exceptions ArgumentNullException globalHookProvider is null. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook GlobalHookBase(bool) Initializes a new instance of GlobalHookBase. protected GlobalHookBase(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook Properties IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook Methods DispatchEvent(ref UioHookEvent) Dispatches an event from libuiohook, i.e. raises the appropriate event. protected void DispatchEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to dispatch. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IGlobalHook. Exceptions HookException Stopping the hook has failed. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook Dispose(bool) Destoys the global hook. protected virtual void Dispose(bool disposing) Parameters disposing bool true if the method is called from the Dispose() method. Otherwise, false. Exceptions HookException Stopping the hook has failed. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook ~GlobalHookBase() Destroys the global hook if it's running. protected ~GlobalHookBase() See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook HandleHookEvent(ref UioHookEvent) When implemented in a derived class, represents a strategy for handling a hook event. protected abstract void HandleHookEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to handle. Remarks Derived classes should call DispatchEvent(ref UioHookEvent) inside this method to raise the appropriate event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnHookDisabled(HookEventArgs) Raises the HookDisabled event with this object as the sender. protected virtual void OnHookDisabled(HookEventArgs args) Parameters args HookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnHookEnabled(HookEventArgs) Raises the HookEnabled event with this object as the sender. protected virtual void OnHookEnabled(HookEventArgs args) Parameters args HookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnKeyPressed(KeyboardHookEventArgs) Raises the KeyPressed event with this object as the sender. protected virtual void OnKeyPressed(KeyboardHookEventArgs args) Parameters args KeyboardHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnKeyReleased(KeyboardHookEventArgs) Raises the KeyReleased event with this object as the sender. protected virtual void OnKeyReleased(KeyboardHookEventArgs args) Parameters args KeyboardHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnKeyTyped(KeyboardHookEventArgs) Raises the KeyTyped event with this object as the sender. protected virtual void OnKeyTyped(KeyboardHookEventArgs args) Parameters args KeyboardHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnMouseClicked(MouseHookEventArgs) Raises the MouseClicked event with this object as the sender. protected virtual void OnMouseClicked(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnMouseDragged(MouseHookEventArgs) Raises the MouseDragged event with this object as the sender. protected virtual void OnMouseDragged(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnMouseMoved(MouseHookEventArgs) Raises the MouseMoved event with this object as the sender. protected virtual void OnMouseMoved(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnMousePressed(MouseHookEventArgs) Raises the MousePressed event with this object as the sender. protected virtual void OnMousePressed(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnMouseReleased(MouseHookEventArgs) Raises the MouseReleased event with this object as the sender. protected virtual void OnMouseReleased(MouseHookEventArgs args) Parameters args MouseHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook OnMouseWheel(MouseWheelHookEventArgs) Raises the MouseWheel event with this object as the sender. protected virtual void OnMouseWheel(MouseWheelHookEventArgs args) Parameters args MouseWheelHookEventArgs The arguments of the event. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public Task RunAsync() Returns Task A Task which finishes when the hook is destroyed. Remarks The hook is started on a separate thread. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook ThrowIfDisposed(string?) Throws an ObjectDisposedException if this object is disposed. protected void ThrowIfDisposed(string? method = null) Parameters method string The method which calls this method. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook Events HookDisabled An event which is raised when the global hook is disabled. public event EventHandler<HookEventArgs>? HookDisabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Dispose() method is called. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook HookEnabled An event which is raised when the global hook is enabled. public event EventHandler<HookEventArgs>? HookEnabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Run() or RunAsync() method is called. See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook KeyPressed An event which is raised when a key is pressed. public event EventHandler<KeyboardHookEventArgs>? KeyPressed Event Type EventHandler<KeyboardHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook KeyReleased An event which is raised when a key is released. public event EventHandler<KeyboardHookEventArgs>? KeyReleased Event Type EventHandler<KeyboardHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook KeyTyped An event which is raised when a key is typed. public event EventHandler<KeyboardHookEventArgs>? KeyTyped Event Type EventHandler<KeyboardHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook MouseClicked An event which is raised when a mouse button is clicked. public event EventHandler<MouseHookEventArgs>? MouseClicked Event Type EventHandler<MouseHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook MouseDragged An event which is raised when the mouse cursor is dragged. public event EventHandler<MouseHookEventArgs>? MouseDragged Event Type EventHandler<MouseHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook MouseMoved An event which is raised when the mouse cursor is moved. public event EventHandler<MouseHookEventArgs>? MouseMoved Event Type EventHandler<MouseHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook MousePressed An event which is raised when a mouse button is pressed. public event EventHandler<MouseHookEventArgs>? MousePressed Event Type EventHandler<MouseHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook MouseReleased An event which is raised when a mouse button is released. public event EventHandler<MouseHookEventArgs>? MouseReleased Event Type EventHandler<MouseHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook MouseWheel An event which is raised when the mouse wheel is turned. public event EventHandler<MouseWheelHookEventArgs>? MouseWheel Event Type EventHandler<MouseWheelHookEventArgs> See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook See Also IGlobalHook SimpleGlobalHook TaskPoolGlobalHook"
  },
  "api/SharpHook.HookEventArgs.html": {
    "href": "api/SharpHook.HookEventArgs.html",
    "title": "Class HookEventArgs | SharpHook",
    "keywords": "Class HookEventArgs Namespace SharpHook Assembly SharpHook.dll A base class for event args related to the global hook. public class HookEventArgs : EventArgs Inheritance object EventArgs HookEventArgs Derived KeyboardHookEventArgs MouseHookEventArgs MouseWheelHookEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HookEventArgs(UioHookEvent) Initializes a new instance of the HookEventArgs class. public HookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent Properties EventTime Gets the date and time of the event (in UTC), derived from the event's UNIX timestamp. public DateTimeOffset EventTime { get; } Property Value DateTimeOffset The date and time of the event. See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent RawEvent Gets the raw event data. public UioHookEvent RawEvent { get; } Property Value UioHookEvent The raw event data. See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent SuppressEvent Gets or sets whether to suppress the event from further propagation after running the event handler. Events must be suppressed synchronously. Suppressing events works only on Windows and macOS. public bool SuppressEvent { get; set; } Property Value bool true if the event propagation should be suppressed. Otherwise, false. See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent Methods FromEvent(UioHookEvent) Creates a new instance of the HookEventArgs class or a derived class, depending on the event type. public static HookEventArgs FromEvent(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. Returns HookEventArgs See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent See Also KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData UioHookEvent"
  },
  "api/SharpHook.HookException.html": {
    "href": "api/SharpHook.HookException.html",
    "title": "Class HookException | SharpHook",
    "keywords": "Class HookException Namespace SharpHook Assembly SharpHook.dll Represents an exception related to the global hook. public sealed class HookException : Exception, ISerializable Inheritance object Exception HookException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HookException() Initializes a new instance of the HookException class. public HookException() HookException(UioHookResult) Initializes a new instance of the HookException class. public HookException(UioHookResult result) Parameters result UioHookResult The result of an opetaion which caused this exception. HookException(UioHookResult, Exception) Initializes a new instance of the HookException class. public HookException(UioHookResult result, Exception innerException) Parameters result UioHookResult The result of an opetaion which caused this exception. innerException Exception The exception which caused this exception. HookException(UioHookResult, string) Initializes a new instance of the HookException class. public HookException(UioHookResult result, string message) Parameters result UioHookResult The result of an opetaion which caused this exception. message string The message of the exception. HookException(UioHookResult, string, Exception) Initializes a new instance of the HookException class. public HookException(UioHookResult result, string message, Exception innerException) Parameters result UioHookResult The result of an opetaion which caused this exception. message string The message of the exception. innerException Exception The exception which caused this exception. HookException(string) Initializes a new instance of the HookException class. public HookException(string message) Parameters message string The message of the exception. HookException(string, Exception) Initializes a new instance of the HookException class. public HookException(string message, Exception innerException) Parameters message string The message of the exception. innerException Exception The exception which caused this exception. Properties Result Gets the result of an opetaion which caused this exception. public UioHookResult Result { get; } Property Value UioHookResult The result of an opetaion which caused this exception. Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about this exception. public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The serialization info to set. context StreamingContext The streaming context."
  },
  "api/SharpHook.IEventSimulator.html": {
    "href": "api/SharpHook.IEventSimulator.html",
    "title": "Interface IEventSimulator | SharpHook",
    "keywords": "Interface IEventSimulator Namespace SharpHook Assembly SharpHook.dll Represents an object which can simulate keyboard and mouse events. public interface IEventSimulator Remarks The methods of this interface correspond to constants defined in the EventType enum. Properties TextSimulationDelayOnX11 Gets or sets the delay between simulating individual characters when simulating text on Linux. TimeSpan TextSimulationDelayOnX11 { get; set; } Property Value TimeSpan The delay between simulating individual characters when simulating text on Linux. Remarks X11 doesn't support simulating arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this property is ignored. Exceptions ArgumentOutOfRangeException value represents a negative time span. Methods SimulateKeyPress(KeyCode) Simulates pressing a key. UioHookResult SimulateKeyPress(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to press. Returns UioHookResult The result of the operation. SimulateKeyRelease(KeyCode) Simulates releasing a key. UioHookResult SimulateKeyRelease(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to release. Returns UioHookResult The result of the operation. SimulateMouseMovement(short, short) Simulates moving a mouse pointer. UioHookResult SimulateMouseMovement(short x, short y) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. Returns UioHookResult The result of the operation. SimulateMouseMovementRelative(short, short) Simulates moving a mouse pointer relative to the current cursor position. UioHookResult SimulateMouseMovementRelative(short x, short y) Parameters x short The X-coordinate offset. y short The Y-coordinate offset. Returns UioHookResult The result of the operation. SimulateMousePress(MouseButton) Simulates pressing a mouse button at the current coordinates. UioHookResult SimulateMousePress(MouseButton button) Parameters button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. SimulateMousePress(short, short, MouseButton) Simulates pressing a mouse button at the specified coordinates. UioHookResult SimulateMousePress(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. Returns UioHookResult The result of the operation. SimulateMouseRelease(MouseButton) Simulates releasing a mouse button at the current coordinates. UioHookResult SimulateMouseRelease(MouseButton button) Parameters button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. SimulateMouseRelease(short, short, MouseButton) Simulates releasing a mouse button at the specified coordinates. UioHookResult SimulateMouseRelease(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. Returns UioHookResult The result of the operation. SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) Simulates scrolling the mouse wheel. UioHookResult SimulateMouseWheel(short rotation, MouseWheelScrollDirection direction = MouseWheelScrollDirection.Vertical, MouseWheelScrollType type = MouseWheelScrollType.UnitScroll) Parameters rotation short The wheel rotation. A positive value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. direction MouseWheelScrollDirection The scroll direction. type MouseWheelScrollType The scroll type (considered only on macOS). Returns UioHookResult The result of the operation. Remarks On Windows the value 120 represents the default wheel step. As such, multiples of 120 can be used, but it's not required. The value of type is ignored. On macOS it's recommended to use values between -10 and 10. This will result in quite a small scroll amount with pixel scrolling, so BlockScroll is recommended for line scrolling instead of pixel scrolling. On Linux there is no fixed recommendation, but multiples of 100 can be used. The value of type is ignored. SimulateTextEntry(string) Simulates the input of arbitrary Unicode characters. UioHookResult SimulateTextEntry(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. TextSimulationDelayOnX11 can be used to increase (or decrease) the delay if needed - longer dealys add consistency but may be more jarring to end users. TextSimulationDelayOnX11 can also be used to get the currently configured delay - the default is 50 milliseconds. Exceptions ArgumentNullException text is null."
  },
  "api/SharpHook.IGlobalHook.html": {
    "href": "api/SharpHook.IGlobalHook.html",
    "title": "Interface IGlobalHook | SharpHook",
    "keywords": "Interface IGlobalHook Namespace SharpHook Assembly SharpHook.dll Represents a global keyboard and mouse hook. public interface IGlobalHook : IDisposable Inherited Members IDisposable.Dispose() Properties IsDisposed Gets the value which indicates whether the global hook is disposed. bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook IsRunning Gets the value which indicates whether the global hook is running. bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook Methods Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. Task RunAsync() Returns Task A Task which finishes when the hook is destroyed. Remarks Since the underlying native API for running a global hook is blocking, the only way to run it without blocking the current thread is to run it on a separate thread. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook Events HookDisabled An event which is raised when the global hook is disabled. event EventHandler<HookEventArgs> HookDisabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Dispose() method is called. See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook HookEnabled An event which is raised when the global hook is enabled. event EventHandler<HookEventArgs> HookEnabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Run() or RunAsync() method is called. See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook KeyPressed An event which is raised when a key is pressed. event EventHandler<KeyboardHookEventArgs> KeyPressed Event Type EventHandler<KeyboardHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook KeyReleased An event which is raised when a key is released. event EventHandler<KeyboardHookEventArgs> KeyReleased Event Type EventHandler<KeyboardHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook KeyTyped An event which is raised when a key is typed. event EventHandler<KeyboardHookEventArgs> KeyTyped Event Type EventHandler<KeyboardHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook MouseClicked An event which is raised when a mouse button is clicked. event EventHandler<MouseHookEventArgs> MouseClicked Event Type EventHandler<MouseHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook MouseDragged An event which is raised when the mouse cursor is dragged. event EventHandler<MouseHookEventArgs> MouseDragged Event Type EventHandler<MouseHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook MouseMoved An event which is raised when the mouse cursor is moved. event EventHandler<MouseHookEventArgs> MouseMoved Event Type EventHandler<MouseHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook MousePressed An event which is raised when a mouse button is pressed. event EventHandler<MouseHookEventArgs> MousePressed Event Type EventHandler<MouseHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook MouseReleased An event which is raised when a mouse button is released. event EventHandler<MouseHookEventArgs> MouseReleased Event Type EventHandler<MouseHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook MouseWheel An event which is raised when the mouse wheel is scrolled. event EventHandler<MouseWheelHookEventArgs> MouseWheel Event Type EventHandler<MouseWheelHookEventArgs> See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook See Also GlobalHookBase SimpleGlobalHook TaskPoolGlobalHook"
  },
  "api/SharpHook.KeyboardHookEventArgs.html": {
    "href": "api/SharpHook.KeyboardHookEventArgs.html",
    "title": "Class KeyboardHookEventArgs | SharpHook",
    "keywords": "Class KeyboardHookEventArgs Namespace SharpHook Assembly SharpHook.dll Event args for keyboard-related hook events. public sealed class KeyboardHookEventArgs : HookEventArgs Inheritance object EventArgs HookEventArgs KeyboardHookEventArgs Inherited Members HookEventArgs.FromEvent(UioHookEvent) HookEventArgs.RawEvent HookEventArgs.EventTime HookEventArgs.SuppressEvent EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors KeyboardHookEventArgs(UioHookEvent) Initializes a new instance of the KeyboardHookEventArgs class. public KeyboardHookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also HookEventArgs MouseHookEventArgs MouseWheelHookEventArgs KeyboardEventData Properties Data Gets the event data. public KeyboardEventData Data { get; } Property Value KeyboardEventData The event data. See Also HookEventArgs MouseHookEventArgs MouseWheelHookEventArgs KeyboardEventData See Also HookEventArgs MouseHookEventArgs MouseWheelHookEventArgs KeyboardEventData"
  },
  "api/SharpHook.Logging.EmptyLogSource.html": {
    "href": "api/SharpHook.Logging.EmptyLogSource.html",
    "title": "Class EmptyLogSource | SharpHook",
    "keywords": "Class EmptyLogSource Namespace SharpHook.Logging Assembly SharpHook.dll Represents a souce of libuiohook logs which never raises any events. public sealed class EmptyLogSource : ILogSource, IDisposable Inheritance object EmptyLogSource Implements ILogSource IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks This class exists primarily to be used instead of LogSource in release builds of client apps as they will most probably not need any logs from libuiohook. Also, unlike LogSource this class doesn't need the Visual C++ Redistributable package to be installed on Windows. Constructors EmptyLogSource() public EmptyLogSource() See Also ILogSource LogSource Properties IsDisposed Gets the value which indicates whether the log source is disposed. public bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks Since empty log sources don't do anything, it doesn't matter whether they are disposed. See Also ILogSource LogSource Methods Dispose() Marks this object as disposed. public void Dispose() Remarks Since empty log sources don't do anything, it doesn't matter whether they are disposed. See Also ILogSource LogSource Events MessageLogged An event which is never raised. public event EventHandler<LogEventArgs> MessageLogged Event Type EventHandler<LogEventArgs> See Also ILogSource LogSource See Also ILogSource LogSource"
  },
  "api/SharpHook.Logging.ILogSource.html": {
    "href": "api/SharpHook.Logging.ILogSource.html",
    "title": "Interface ILogSource | SharpHook",
    "keywords": "Interface ILogSource Namespace SharpHook.Logging Assembly SharpHook.dll Represents a source of libuiohook logs. public interface ILogSource : IDisposable Inherited Members IDisposable.Dispose() Properties IsDisposed Gets the value which indicates whether the log source is disposed. bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks A disposed log source doesn't raise the MessageLogged event. See Also LogSource EmptyLogSource LogEventArgs LogEntry Events MessageLogged An event which is raised when libuiohook logs a message. event EventHandler<LogEventArgs> MessageLogged Event Type EventHandler<LogEventArgs> See Also LogSource EmptyLogSource LogEventArgs LogEntry See Also LogSource EmptyLogSource LogEventArgs LogEntry"
  },
  "api/SharpHook.Logging.LogEntry.html": {
    "href": "api/SharpHook.Logging.LogEntry.html",
    "title": "Class LogEntry | SharpHook",
    "keywords": "Class LogEntry Namespace SharpHook.Logging Assembly SharpHook.dll Represents a log entry from libuiohook. public sealed class LogEntry : IEquatable<LogEntry> Inheritance object LogEntry Implements IEquatable<LogEntry> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks For simple handling the Level and FullText properties are anough. For more advanced handling you can use the entries' formats and arguments. Each log entry from libuiohook has the following format: function [line]: message The function and line reference the source code of libuiohook itself, and can be retrieved using the Function and SourceLine properties. The message can be retrieved by splitting the text by : and getting the trimmed second part. You shouldn't create LogEntry instances yourself. Instead, use the LogEntryParser class to create them in the logging callback. Constructors LogEntry(LogLevel, string, string, string, IReadOnlyList<object>, IReadOnlyList<string>, IReadOnlyList<string>) Initializes a new instance of the LogEntry class. public LogEntry(LogLevel level, string fullText, string format, string nativeFormat, IReadOnlyList<object> arguments, IReadOnlyList<string> rawArguments, IReadOnlyList<string> argumentPlaceholders) Parameters level LogLevel The log level. fullText string The full text of the log entry. format string The format of the log entry which can be used in String.Format. nativeFormat string The native format of the log entry. arguments IReadOnlyList<object> The arguments of the log entry which can be used in String.Format. rawArguments IReadOnlyList<string> The arguments as they appear in the entry's full text. argumentPlaceholders IReadOnlyList<string> The argument placeholders from the native format. See Also ILogSource LogSource LogEventArgs LogEntryParser Fields Level Gets the level of the current log entry. public LogLevel Level Field Value LogLevel The level of the current log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser Properties ArgumentPlaceholders Gets the argument placeholders from the native format. public IReadOnlyList<string> ArgumentPlaceholders { get; } Property Value IReadOnlyList<string> The argument placeholders from the native format. See Also ILogSource LogSource LogEventArgs LogEntryParser Arguments Gets the arguments of the current log entry. public IReadOnlyList<object> Arguments { get; } Property Value IReadOnlyList<object> The arguments of the current log entry. Remarks The function and line are the first two arguments of the log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser Format Gets the format of the current log entry. public string Format { get; } Property Value string The format of the current log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser FullText Gets the full text of the current log entry. public string FullText { get; } Property Value string The full text of the current log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser Function Gets the libuiohook function which called the logger. public string Function { get; } Property Value string The function which called the logger. Remarks The function is the first argument of the log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser NativeFormat Gets the native format of the current log entry, as defined in libuiohook. public string NativeFormat { get; } Property Value string The native format of the current log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser RawArguments Gets the arguments of the current log entry as they appear in entry's full text. public IReadOnlyList<string> RawArguments { get; } Property Value IReadOnlyList<string> The arguments of the current log entry as they appear in entry's full text. Remarks The function and line are the first two arguments of the log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser SourceLine Gets the source code line in libuiohook where the logger was called. public uint SourceLine { get; } Property Value uint The source code line in libuiohook where the logger was called. Remarks The source code line is the second argument of the log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser Methods Equals(LogEntry?) Compares this object to another object for equality. public bool Equals(LogEntry? entry) Parameters entry LogEntry The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also ILogSource LogSource LogEventArgs LogEntryParser Equals(object?) Compares this object to another object for equality. public override bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also ILogSource LogSource LogEventArgs LogEntryParser GetHashCode() Gets the hash code of this object. public override int GetHashCode() Returns int The hash code of this object. See Also ILogSource LogSource LogEventArgs LogEntryParser ToString() Gets the string representation of the log entry i.e. its full text. public override string ToString() Returns string The full text of the log entry. See Also ILogSource LogSource LogEventArgs LogEntryParser Operators operator ==(LogEntry?, LogEntry?) Compares two objects for equality. public static bool operator ==(LogEntry? left, LogEntry? right) Parameters left LogEntry The first object to compare right LogEntry The second object to compare Returns bool true if the objects are equal. Otherwise, false. See Also ILogSource LogSource LogEventArgs LogEntryParser operator !=(LogEntry?, LogEntry?) Compares two objects for inequality. public static bool operator !=(LogEntry? left, LogEntry? right) Parameters left LogEntry The first object to compare right LogEntry The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also ILogSource LogSource LogEventArgs LogEntryParser See Also ILogSource LogSource LogEventArgs LogEntryParser"
  },
  "api/SharpHook.Logging.LogEntryParser.html": {
    "href": "api/SharpHook.Logging.LogEntryParser.html",
    "title": "Class LogEntryParser | SharpHook",
    "keywords": "Class LogEntryParser Namespace SharpHook.Logging Assembly SharpHook.dll Creates log entries from native log formats and arguments. public sealed class LogEntryParser Inheritance object LogEntryParser Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The log text is formatted using the vsprintf function from the C runtime and then the result is parsed to extract the arguments. This means that on Windows this class requires the Visual C++ Redistributable package to be installed. Properties Instance Gets the single instance of LogEntryParser. public static LogEntryParser Instance { get; } Property Value LogEntryParser Methods ParseNativeLogEntry(LogLevel, nint, nint) Parses a native log format and arguments to create a log entry. public LogEntry ParseNativeLogEntry(LogLevel level, nint format, nint args) Parameters level LogLevel The log level. format nint A pointer to the native format of the log message. args nint A pointer to the native arguments of the log message. Returns LogEntry A log entry represented by the level, format, and argumets."
  },
  "api/SharpHook.Logging.LogEventArgs.html": {
    "href": "api/SharpHook.Logging.LogEventArgs.html",
    "title": "Class LogEventArgs | SharpHook",
    "keywords": "Class LogEventArgs Namespace SharpHook.Logging Assembly SharpHook.dll Event args for logging events. public sealed class LogEventArgs : EventArgs Inheritance object EventArgs LogEventArgs Inherited Members EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors LogEventArgs(LogEntry) Initializes a new instance of the LogEventArgs class. public LogEventArgs(LogEntry logEntry) Parameters logEntry LogEntry The entry of log event. See Also ILogSource LogSource LogEntry Properties LogEntry Gets the entry of the current log event. public LogEntry LogEntry { get; } Property Value LogEntry The entry of the current log event. See Also ILogSource LogSource LogEntry See Also ILogSource LogSource LogEntry"
  },
  "api/SharpHook.Logging.LogSource.html": {
    "href": "api/SharpHook.Logging.LogSource.html",
    "title": "Class LogSource | SharpHook",
    "keywords": "Class LogSource Namespace SharpHook.Logging Assembly SharpHook.dll Represents a source of libuiohook logs. public sealed class LogSource : ILogSource, IDisposable Inheritance object LogSource Implements ILogSource IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Only a single LogSource instance must be used at a time. On Windows this class requires the Visual C++ Redistributable package to be installed as it uses the C runtime. Properties IsDisposed Gets the value which indicates whether the log source is disposed. public bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks A disposed log source doesn't raise the MessageLogged event and cannot be registered again. See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser MinLevel Gets or sets the minimum log level. public LogLevel MinLevel { get; set; } Property Value LogLevel The minimum log level. See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser Methods Dispose() Stops the currently registered LogSource instance from receiving libuiohook logs. public void Dispose() See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser ~LogSource() Unregisters the current LogSource instance. protected ~LogSource() See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser Register(LogLevel) Creates and registers a source of libuiohook logs. public static LogSource Register(LogLevel minLevel = LogLevel.Info) Parameters minLevel LogLevel The minimum log level. Returns LogSource A source of libuiohook logs. Remarks This method must not be called when another LogSource instance has already been registerd and hasn't been disposed. See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser Register(ILoggingProvider, LogLevel) Creates and registers a source of libuiohook logs using the specified provider. public static LogSource Register(ILoggingProvider loggingProvider, LogLevel minLevel = LogLevel.Info) Parameters loggingProvider ILoggingProvider The logging provider used to register the log source. minLevel LogLevel The minimum log level. Returns LogSource A source of libuiohook logs. Remarks This method must not be called when another LogSource instance has already been registerd and hasn't been disposed. Exceptions ArgumentNullException loggingProvider is null. See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser Events MessageLogged An event which is raised when libuiohook logs a message. public event EventHandler<LogEventArgs>? MessageLogged Event Type EventHandler<LogEventArgs> See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser See Also ILogSource EmptyLogSource LogEventArgs LogEntry LogEntryParser"
  },
  "api/SharpHook.Logging.html": {
    "href": "api/SharpHook.Logging.html",
    "title": "Namespace SharpHook.Logging | SharpHook",
    "keywords": "Namespace SharpHook.Logging Classes EmptyLogSource Represents a souce of libuiohook logs which never raises any events. LogEntry Represents a log entry from libuiohook. LogEntryParser Creates log entries from native log formats and arguments. LogEventArgs Event args for logging events. LogSource Represents a source of libuiohook logs. Interfaces ILogSource Represents a source of libuiohook logs."
  },
  "api/SharpHook.MouseHookEventArgs.html": {
    "href": "api/SharpHook.MouseHookEventArgs.html",
    "title": "Class MouseHookEventArgs | SharpHook",
    "keywords": "Class MouseHookEventArgs Namespace SharpHook Assembly SharpHook.dll Event args for mouse-related hook events. public sealed class MouseHookEventArgs : HookEventArgs Inheritance object EventArgs HookEventArgs MouseHookEventArgs Inherited Members HookEventArgs.FromEvent(UioHookEvent) HookEventArgs.RawEvent HookEventArgs.EventTime HookEventArgs.SuppressEvent EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MouseHookEventArgs(UioHookEvent) Initializes a new instance of the MouseHookEventArgs class. public MouseHookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also HookEventArgs KeyboardHookEventArgs MouseWheelHookEventArgs MouseEventData Properties Data Gets the event data. public MouseEventData Data { get; } Property Value MouseEventData The event data. See Also HookEventArgs KeyboardHookEventArgs MouseWheelHookEventArgs MouseEventData See Also HookEventArgs KeyboardHookEventArgs MouseWheelHookEventArgs MouseEventData"
  },
  "api/SharpHook.MouseWheelHookEventArgs.html": {
    "href": "api/SharpHook.MouseWheelHookEventArgs.html",
    "title": "Class MouseWheelHookEventArgs | SharpHook",
    "keywords": "Class MouseWheelHookEventArgs Namespace SharpHook Assembly SharpHook.dll Event args for mouse wheel-related hook events. public sealed class MouseWheelHookEventArgs : HookEventArgs Inheritance object EventArgs HookEventArgs MouseWheelHookEventArgs Inherited Members HookEventArgs.FromEvent(UioHookEvent) HookEventArgs.RawEvent HookEventArgs.EventTime HookEventArgs.SuppressEvent EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MouseWheelHookEventArgs(UioHookEvent) Initializes a new instance of the MouseWheelHookEventArgs class. public MouseWheelHookEventArgs(UioHookEvent rawEvent) Parameters rawEvent UioHookEvent The raw event data. See Also HookEventArgs KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData Properties Data Gets the event data. public MouseWheelEventData Data { get; } Property Value MouseWheelEventData The event data. See Also HookEventArgs KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData See Also HookEventArgs KeyboardHookEventArgs MouseHookEventArgs MouseWheelEventData"
  },
  "api/SharpHook.Native.DispatchProc.html": {
    "href": "api/SharpHook.Native.DispatchProc.html",
    "title": "Delegate DispatchProc | SharpHook",
    "keywords": "Delegate DispatchProc Namespace SharpHook.Native Assembly SharpHook.dll Represents a function which is called when an event occurs. public delegate void DispatchProc(ref UioHookEvent e, nint userData) Parameters e UioHookEvent The event that has occured. userData nint The data that was passed to SetDispatchProc(DispatchProc?, nint). Should not be used. Constructors DispatchProc(object, nint) public DispatchProc(object @object, nint method) Parameters object object method nint See Also SetDispatchProc(DispatchProc, nint) Methods BeginInvoke(ref UioHookEvent, nint, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(ref UioHookEvent e, nint userData, AsyncCallback callback, object @object) Parameters e UioHookEvent userData nint callback AsyncCallback object object Returns IAsyncResult See Also SetDispatchProc(DispatchProc, nint) EndInvoke(ref UioHookEvent, IAsyncResult) public virtual void EndInvoke(ref UioHookEvent e, IAsyncResult result) Parameters e UioHookEvent result IAsyncResult See Also SetDispatchProc(DispatchProc, nint) Invoke(ref UioHookEvent, nint) public virtual void Invoke(ref UioHookEvent e, nint userData) Parameters e UioHookEvent userData nint See Also SetDispatchProc(DispatchProc, nint) See Also SetDispatchProc(DispatchProc, nint)"
  },
  "api/SharpHook.Native.EventReservedValueMask.html": {
    "href": "api/SharpHook.Native.EventReservedValueMask.html",
    "title": "Enum EventReservedValueMask | SharpHook",
    "keywords": "Enum EventReservedValueMask Namespace SharpHook.Native Assembly SharpHook.dll Represents possible values of the Reserved field. [Flags] public enum EventReservedValueMask : ushort Fields None = 0 No value. SuppressEvent = 1 If this flag is set in the event handler then the event will be suppressed from further propagation."
  },
  "api/SharpHook.Native.EventType.html": {
    "href": "api/SharpHook.Native.EventType.html",
    "title": "Enum EventType | SharpHook",
    "keywords": "Enum EventType Namespace SharpHook.Native Assembly SharpHook.dll Represents the type of an input event which can be raised from a global hook or posted as a fake event. public enum EventType Fields HookDisabled = 2 Raised when the global hook is stopped. Ignored when posted. HookEnabled = 1 Raised when the global hook is started. Ignored when posted. KeyPressed = 4 Raised when a key is pressed or posted to press a key. KeyReleased = 5 Raised when a key is released or posted to release a key. KeyTyped = 3 Raised when a character is typed. Ignored when posted. MouseClicked = 6 Raised when a mouse button is clicked. Ignored when posted. MouseDragged = 10 Raised when the mouse is dragged. Not recommended to post as it will be the same as MouseMoved. MouseMoved = 9 Raised when the mouse is moved or posted to move the mouse. MouseMovedRelativeToCursor = 14 Posted to move the mouse relative to the current cursor position. Never raised. MousePressed = 7 Raised when a mouse button is pressed or posted to press a mouse button. MousePressedIgnoreCoordinates = 12 Posted to press a mouse button at the current coordinates. Never raised. MouseReleased = 8 Raised when a mouse button is released or posted to release a mouse button. MouseReleasedIgnoreCoordinates = 13 Posted to release a mouse button at the current coordinates. Never raised. MouseWheel = 11 Raised when the mouse wheel is scrolled or posted to scroll the mouse wheel. See Also UioHookEvent PostEvent(ref UioHookEvent)"
  },
  "api/SharpHook.Native.KeyCode.html": {
    "href": "api/SharpHook.Native.KeyCode.html",
    "title": "Enum KeyCode | SharpHook",
    "keywords": "Enum KeyCode Namespace SharpHook.Native Assembly SharpHook.dll Represents a virtual key code. public enum KeyCode : ushort Fields Vc0 = 48 0 Vc1 = 49 1 Vc102 = 153 The <> keys on the US standard keyboard, or the | key on the non-US 102-key keyboard, or the Section key (§) on the macOS ISO keyboard Vc2 = 50 2 Vc3 = 51 3 Vc4 = 52 4 Vc5 = 53 5 Vc6 = 54 6 Vc7 = 55 7 Vc8 = 56 8 Vc9 = 57 9 VcA = 65 A VcAccept = 30 IME Accept VcAgain = 65401 Again VcAlphanumeric = 240 IME Alphanumeric mode (eisū) VcAltErase = 49192 Alt Erase VcApp1 = 57382 Launch app 1 VcApp2 = 57383 Launch app 2 VcApp3 = 57384 Launch app 3 VcApp4 = 57385 Launch app 4 VcAppBrowser = 57381 Launch browser VcAppCalculator = 57377 Launch calculator VcAppMail = 57452 Launch mail VcAttn = 57488 Attn VcB = 66 B VcBackQuote = 192 ` VcBackSlash = 93 \\ VcBackspace = 8 Backspace (on Windows and Linux) or Delete (on macOS) VcBassBoost = 49181 Bass Boost VcBattery = 49206 Battery VcBluetooth = 49207 Bluetooth VcBrightnesCycle = 49195 Brightness Cycle VcBrightnessAuto = 49196 Brightness Auto VcBrightnessDown = 49193 Brightness Down VcBrightnessUp = 49194 Brightness Up VcBrowserBack = 57450 Browser Back VcBrowserFavorites = 57446 Browser Favorites VcBrowserForward = 57449 Browser Forward VcBrowserHome = 57394 Browser Home VcBrowserRefresh = 57447 Browser Refresh VcBrowserSearch = 57445 Browser Search VcBrowserStop = 57448 Browser Stop VcC = 67 C VcCamera = 49183 Camera VcCancel = 211 Cancel VcCapsLock = 20 Caps Lock VcChangeInputSource = 527 Function key when used to change an input source on macOS VcChat = 49187 Chat VcClose = 49178 Close VcCloseBracket = 92 ] VcComma = 44 , VcComputer = 49164 Computer VcConfig = 49167 Config VcConnect = 49188 Connect VcContextMenu = 525 Context Menu VcConvert = 28 IME Convert (henkan) VcCopy = 65404 Copy VcCrSel = 57489 CrSel VcCut = 65403 Cut VcCycleWindows = 49163 Cycle Windows VcD = 68 D VcDashboard = 49176 Dashboard VcDelete = 127 Delete (on Windows and Linux) or Forward Delete (on macOS) VcDeleteFile = 49159 Delete File VcDisplayOff = 49213 Display Off VcDocuments = 49205 Documents VcDown = 40 Down Arrow VcE = 69 E VcEdit = 49170 Edit VcEmail = 49186 Email VcEnd = 35 End VcEnter = 10 Enter VcEquals = 61 = VcEraseEof = 57491 Erase EOF VcEscape = 27 Escape VcExSel = 57490 ExSel VcExecute = 158 Execute VcExit = 49168 Exit VcF = 70 F VcF1 = 112 F1 VcF10 = 121 F10 VcF11 = 122 F11 VcF12 = 123 F12 VcF13 = 61440 F13 VcF14 = 61441 F14 VcF15 = 61442 F15 VcF16 = 61443 F16 VcF17 = 61444 F17 VcF18 = 61445 F18 VcF19 = 61446 F19 VcF2 = 113 F2 VcF20 = 61447 F20 VcF21 = 61448 F21 VcF22 = 61449 F22 VcF23 = 61450 F23 VcF24 = 61451 F24 VcF3 = 114 F3 VcF4 = 115 F4 VcF5 = 116 F5 VcF6 = 117 F6 VcF7 = 118 F7 VcF8 = 119 F8 VcF9 = 120 F9 VcFastForward = 49180 Fast-Forward VcFile = 49157 File VcFinal = 231 IME Final mode VcFinance = 49189 Finance VcFind = 65392 Find VcForwardMail = 49203 Forward Mail VcFront = 65399 Front VcFunction = 526 Function VcG = 71 G VcH = 72 H VcHangul = 233 IME Hangul mode VcHanja = 230 IME Hanja mode VcHelp = 159 Help VcHiragana = 242 IME Hiragana mode VcHome = 36 Home VcHp = 49182 HP VcI = 73 I VcImeOff = 264 IME Off VcImeOn = 265 IME On VcInsert = 155 Insert VcIso = 49166 ISO VcJ = 74 J VcJpComma = 528 JP Comma VcJunja = 232 IME Junja mode VcK = 75 K VcKana = 21 IME Kana mode VcKanji = 25 IME Kanji mode VcKatakana = 241 IME Katakana mode VcKatakanaHiragana = 262 IME Katakana/Hiragana toggle VcKeyboardLightDown = 49199 Keyboard Light Down VcKeyboardLightToggle = 49198 Keyboard Light Toggle VcKeyboardLightUp = 49200 Keyboard Light Up VcL = 76 L VcLeft = 37 Left Arrow VcLeftAlt = 40978 Left Alt (on Windows and Linux) or Option (on macOS) VcLeftControl = 40977 Left Control VcLeftMeta = 41117 Left Win (on Windows), Command (on macOS), or Super/Meta (on Linux) VcLeftShift = 40976 Left Shift VcLineFeed = 49153 Line Feed VcLock = 49161 Lock VcM = 77 M VcMacro = 49154 Macro VcMedia = 57379 Media VcMediaClose = 57389 Close Media VcMediaEject = 57388 Eject Media VcMediaEjectClose = 57391 Eject/Close Media VcMediaNext = 57369 Next Media VcMediaPlay = 57378 Play/Pause Media VcMediaPrevious = 57360 Previous Media VcMediaRecord = 57393 Record Media VcMediaRewind = 57395 Rewind Media VcMediaSelect = 57453 Select Media VcMediaStop = 57380 Stop Media VcMinus = 45 VcMisc = 3585 Miscellaneous OEM-specific key VcModeChange = 263 IME Mode Change VcMove = 49169 Move VcMsDos = 49160 MS DOS VcN = 78 N VcNew = 49173 New VcNoName = 57494 Reserved for future use VcNonConvert = 29 IME Non-Convert (muhenkan) VcNumLock = 144 Num Lock VcNumPad0 = 96 Num-Pad 0 VcNumPad1 = 97 Num-Pad 1 VcNumPad2 = 98 Num-Pad 2 VcNumPad3 = 99 Num-Pad 3 VcNumPad4 = 100 Num-Pad 4 VcNumPad5 = 101 Num-Pad 5 VcNumPad6 = 102 Num-Pad 6 VcNumPad7 = 103 Num-Pad 7 VcNumPad8 = 104 Num-Pad 8 VcNumPad9 = 105 Num-Pad 9 VcNumPadAdd = 107 Num-Pad + VcNumPadClear = 12 Num-Pad Clear VcNumPadCloseParenthesis = 60930 Num-Pad ) VcNumPadDecimal = 110 Num-Pad Decimal VcNumPadDivide = 111 Num-Pad / VcNumPadEnter = 125 Num-Pad Enter VcNumPadEquals = 124 Num-Pad = VcNumPadMultiply = 106 Num-Pad * VcNumPadOpenParenthesis = 60929 Num-Pad ( VcNumPadPlusMinus = 126 Num-Pad ± VcNumPadSeparator = 108 Num-Pad Separator VcNumPadSubtract = 109 Num-Pad - VcO = 79 O VcOpen = 65396 Open VcOpenBracket = 91 [ VcP = 80 P VcPa1 = 57495 PA1 VcPageDown = 34 Page Down VcPageUp = 33 Page Up VcPaste = 65405 Paste VcPause = 19 Pause VcPauseCd = 49175 Pause CD VcPeriod = 46 . VcPhone = 49165 Phone VcPlay = 57492 Play VcPlayCd = 49174 Play CD VcPower = 57438 Power VcPrint = 156 Print VcPrintScreen = 154 Print Screen VcProcess = 261 IME Process VcProps = 65398 Props VcQ = 81 Q VcQuestion = 49185 Question VcQuote = 222 ' VcR = 82 R VcRedo = 65407 Redo VcReply = 49202 Reply VcRfKill = 49215 RfKill VcRight = 39 Right Arrow VcRightAlt = 45074 Right Alt (on Windows and Linux) or Option (on macOS) VcRightControl = 45073 Right Control VcRightMeta = 45213 Right Win (on Windows), Command (on macOS), or Super/Meta (on Linux) VcRightShift = 45072 Right Shift VcRotateDisplay = 49162 Rotate Display VcS = 83 S VcSave = 49204 Save VcScale = 49155 Scale VcScrollDown = 49172 Scroll Down VcScrollLock = 145 Scroll Lock VcScrollUp = 49171 Scroll Up VcSelect = 157 Select VcSemicolon = 59 ; VcSend = 49201 Send VcSendFile = 49158 Send File VcSetup = 49156 Setup VcShop = 49191 Shop VcSlash = 47 / VcSleep = 57439 Sleep VcSound = 49184 Sound VcSpace = 32 Space VcSport = 49190 Sport VcStop = 65400 Stop VcSuspend = 49177 Suspend VcSwitchVideoMode = 49197 Switch Video Mode VcT = 84 T VcTab = 9 Tab VcU = 85 U VcUndefined = 0 Undefined key VcUnderscore = 523 _ VcUndo = 65402 Undo VcUp = 38 Up Arrow VcUwb = 49209 UWB VcV = 86 V VcVideoNext = 49211 Next Video VcVideoPrevious = 49212 Previous Video VcVolumeDown = 57392 Volume Down VcVolumeMute = 57376 Volume Mute VcVolumeUp = 57390 Volume Up VcW = 87 W VcWake = 57443 Wake VcWlan = 49208 WLAN VcWwan = 49214 WWAN VcX = 88 X VcX11Unknown = 49210 Unknown key (X11) VcY = 89 Y VcYen = 524 Yen VcZ = 90 Z VcZoom = 57493 Zoom See Also KeyboardEventData"
  },
  "api/SharpHook.Native.KeyboardEventData.html": {
    "href": "api/SharpHook.Native.KeyboardEventData.html",
    "title": "Struct KeyboardEventData | SharpHook",
    "keywords": "Struct KeyboardEventData Namespace SharpHook.Native Assembly SharpHook.dll Represents the data of a keyboard-related event. public struct KeyboardEventData : IEquatable<KeyboardEventData> Implements IEquatable<KeyboardEventData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields KeyCode The key code. public KeyCode KeyCode Field Value KeyCode The key code. See Also KeyboardHookEventArgs KeyCode RawCode The raw key code. public ushort RawCode Field Value ushort The raw key code. See Also KeyboardHookEventArgs KeyCode RawKeyChar The character of the key. public ushort RawKeyChar Field Value ushort The character of the key. Remarks This field is available only for the KeyTyped event. In general KeyChar should be used instead of this field. This field is of type ushort purely for marshalling reasons. It should be used as a char. See Also KeyboardHookEventArgs KeyCode RawUndefinedChar The value of RawKeyChar in events of type KeyPressed and KeyReleased. public static readonly ushort RawUndefinedChar Field Value ushort See Also KeyboardHookEventArgs KeyCode UndefinedChar The value of KeyChar in events of type KeyPressed and KeyReleased. public static readonly char UndefinedChar Field Value char See Also KeyboardHookEventArgs KeyCode Properties KeyChar The character of the key. public readonly char KeyChar { get; } Property Value char The character of the key. Remarks This property is available only for the KeyTyped event. See Also KeyboardHookEventArgs KeyCode Methods Equals(KeyboardEventData) Compares this object to another object for equality. public readonly bool Equals(KeyboardEventData data) Parameters data KeyboardEventData The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also KeyboardHookEventArgs KeyCode Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also KeyboardHookEventArgs KeyCode GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. See Also KeyboardHookEventArgs KeyCode ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. See Also KeyboardHookEventArgs KeyCode Operators operator ==(KeyboardEventData, KeyboardEventData) Compares two objects for equality. public static bool operator ==(KeyboardEventData left, KeyboardEventData right) Parameters left KeyboardEventData The first object to compare right KeyboardEventData The second object to compare Returns bool true if the objects are equal. Otherwise, false. See Also KeyboardHookEventArgs KeyCode operator !=(KeyboardEventData, KeyboardEventData) Compares two objects for inequality. public static bool operator !=(KeyboardEventData left, KeyboardEventData right) Parameters left KeyboardEventData The first object to compare right KeyboardEventData The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also KeyboardHookEventArgs KeyCode See Also KeyboardHookEventArgs KeyCode"
  },
  "api/SharpHook.Native.LogLevel.html": {
    "href": "api/SharpHook.Native.LogLevel.html",
    "title": "Enum LogLevel | SharpHook",
    "keywords": "Enum LogLevel Namespace SharpHook.Native Assembly SharpHook.dll Represents a log level. public enum LogLevel : uint Fields Debug = 1 Debug information Error = 4 Error Info = 2 General-purpose information Warn = 3 Warning"
  },
  "api/SharpHook.Native.LoggerProc.html": {
    "href": "api/SharpHook.Native.LoggerProc.html",
    "title": "Delegate LoggerProc | SharpHook",
    "keywords": "Delegate LoggerProc Namespace SharpHook.Native Assembly SharpHook.dll Represents a function which is called when a logging event occurs. public delegate void LoggerProc(LogLevel level, nint userData, nint format, nint args) Parameters level LogLevel The log level. userData nint The data that was passed to SetLoggerProc(LoggerProc?, nint). Should not be used. format nint The format of the log message. args nint The arguments of the log message. Constructors LoggerProc(object, nint) public LoggerProc(object @object, nint method) Parameters object object method nint See Also SetLoggerProc(LoggerProc, nint) Methods BeginInvoke(LogLevel, nint, nint, nint, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(LogLevel level, nint userData, nint format, nint args, AsyncCallback callback, object @object) Parameters level LogLevel userData nint format nint args nint callback AsyncCallback object object Returns IAsyncResult See Also SetLoggerProc(LoggerProc, nint) EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult See Also SetLoggerProc(LoggerProc, nint) Invoke(LogLevel, nint, nint, nint) public virtual void Invoke(LogLevel level, nint userData, nint format, nint args) Parameters level LogLevel userData nint format nint args nint See Also SetLoggerProc(LoggerProc, nint) See Also SetLoggerProc(LoggerProc, nint)"
  },
  "api/SharpHook.Native.ModifierMask.html": {
    "href": "api/SharpHook.Native.ModifierMask.html",
    "title": "Enum ModifierMask | SharpHook",
    "keywords": "Enum ModifierMask Namespace SharpHook.Native Assembly SharpHook.dll Represents a virtual modifier mask. [Flags] public enum ModifierMask : ushort Extension Methods ModifierMaskExtensions.HasAll(ModifierMask, ModifierMask) ModifierMaskExtensions.HasAlt(ModifierMask) ModifierMaskExtensions.HasAny(ModifierMask, ModifierMask) ModifierMaskExtensions.HasCtrl(ModifierMask) ModifierMaskExtensions.HasMeta(ModifierMask) ModifierMaskExtensions.HasShift(ModifierMask) ModifierMaskExtensions.Split(ModifierMask) Fields Alt = LeftAlt | RightAlt Left or right Alt (on Windows and Linux) or Option (on macOS) Button1 = 256 Mouse button 1 (usually the left mouse button) Button2 = 512 Mouse button 2 (usually the right mouse button) Button3 = 1024 Mouse button 3 Button4 = 2048 Mouse button 4 Button5 = 4096 Mouse button 5 CapsLock = 16384 Caps Lock Ctrl = LeftCtrl | RightCtrl Left or right Control LeftAlt = 8 Left Alt (on Windows and Linux) or Option (on macOS) LeftCtrl = 2 Left Control LeftMeta = 4 Left Win (on Windows), Command (on macOS), or Super/Meta (on Linux) LeftShift = 1 Left Shift Meta = LeftMeta | RightMeta Left or right Win (on Windows), Command (on macOS), or Super/Meta (on Linux) None = 0 No modifier NumLock = 8192 Num Lock RightAlt = 128 Right Alt (on Windows and Linux) or Option (on macOS) RightCtrl = 32 Right Control RightMeta = 64 Right Win (on Windows), Command (on macOS), or Super/Meta (on Linux) RightShift = 16 Right Shift ScrollLock = 32768 Scroll Lock Shift = LeftShift | RightShift Left or right Shift See Also UioHookEvent"
  },
  "api/SharpHook.Native.ModifierMaskExtensions.html": {
    "href": "api/SharpHook.Native.ModifierMaskExtensions.html",
    "title": "Class ModifierMaskExtensions | SharpHook",
    "keywords": "Class ModifierMaskExtensions Namespace SharpHook.Native Assembly SharpHook.dll Contains extension methods for ModifierMask. public static class ModifierMaskExtensions Inheritance object ModifierMaskExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods HasAll(ModifierMask, ModifierMask) Returns true if the modifier mask contains all of the specified modifiers. Otherwise, returns false. public static bool HasAll(this ModifierMask mask, ModifierMask modifiers) Parameters mask ModifierMask The modifier mask to check. modifiers ModifierMask The modifiers to check against. Returns bool true if the modifier mask contains all of the specified modifiers. Otherwise, false. Remarks This method returns true if modifiers equals None. HasAlt(ModifierMask) Returns true if the modifier mask contains either LeftAlt or RightAlt. Otherwise, returns false. public static bool HasAlt(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftAlt or RightAlt. Otherwise, false. HasAny(ModifierMask, ModifierMask) Returns true if the modifier mask contains any of the specified modifiers. Otherwise, returns false. public static bool HasAny(this ModifierMask mask, ModifierMask modifiers) Parameters mask ModifierMask The modifier mask to check. modifiers ModifierMask The modifiers to check against. Returns bool true if the modifier mask contains any of the specified modifiers. Otherwise, false. Remarks This method returns false if modifiers equals None. HasCtrl(ModifierMask) Returns true if the modifier mask contains either LeftCtrl or RightCtrl. Otherwise, returns false. public static bool HasCtrl(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftCtrl or RightCtrl. Otherwise, false. HasMeta(ModifierMask) Returns true if the modifier mask contains either LeftMeta or RightMeta. Otherwise, returns false. public static bool HasMeta(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftMeta or RightMeta. Otherwise, false. HasShift(ModifierMask) Returns true if the modifier mask contains either LeftShift or RightShift. Otherwise, returns false. public static bool HasShift(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to check. Returns bool true if the modifier mask contains either LeftShift or RightShift. Otherwise, false. Merge(ModifierMask[]) Merges an array of modifiers into a single modifier mask. public static ModifierMask Merge(this ModifierMask[] modifiers) Parameters modifiers ModifierMask[] The modifiers to merge. Returns ModifierMask A modifier mask which contains the specified modifiers. Exceptions ArgumentNullException modifiers is null. Split(ModifierMask) Splits a modifier mask into an array of individual modifiers. public static ModifierMask[] Split(this ModifierMask mask) Parameters mask ModifierMask The modifier mask to split. Returns ModifierMask[] An array of individual modifiers contained in mask, or an empty array if mask is None."
  },
  "api/SharpHook.Native.MouseButton.html": {
    "href": "api/SharpHook.Native.MouseButton.html",
    "title": "Enum MouseButton | SharpHook",
    "keywords": "Enum MouseButton Namespace SharpHook.Native Assembly SharpHook.dll Represents a mouse button. public enum MouseButton : ushort Fields Button1 = 1 Button 1 (usually the left mouse button) Button2 = 2 Button 2 (usually the right mouse button) Button3 = 3 Button 3 Button4 = 4 Button 4 Button5 = 5 Button 5 NoButton = 0 No button See Also MouseEventData"
  },
  "api/SharpHook.Native.MouseEventData.html": {
    "href": "api/SharpHook.Native.MouseEventData.html",
    "title": "Struct MouseEventData | SharpHook",
    "keywords": "Struct MouseEventData Namespace SharpHook.Native Assembly SharpHook.dll Represents the data of a mouse-related event. public struct MouseEventData : IEquatable<MouseEventData> Implements IEquatable<MouseEventData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields Button The mouse button. public MouseButton Button Field Value MouseButton The mouse button. See Also MouseHookEventArgs MouseButton Clicks The number of clicks. public ushort Clicks Field Value ushort The number of clicks. See Also MouseHookEventArgs MouseButton X The X-coordinate of the mouse cursor. public short X Field Value short The X-coordinate of the mouse cursor. See Also MouseHookEventArgs MouseButton Y The Y-coordinate of the mouse cursor. public short Y Field Value short The Y-coordinate of the mouse cursor. See Also MouseHookEventArgs MouseButton Methods Equals(MouseEventData) Compares this object to another object for equality. public readonly bool Equals(MouseEventData data) Parameters data MouseEventData The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also MouseHookEventArgs MouseButton Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also MouseHookEventArgs MouseButton GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. See Also MouseHookEventArgs MouseButton ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. See Also MouseHookEventArgs MouseButton Operators operator ==(MouseEventData, MouseEventData) Compares two objects for equality. public static bool operator ==(MouseEventData left, MouseEventData right) Parameters left MouseEventData The first object to compare right MouseEventData The second object to compare Returns bool true if the objects are equal. Otherwise, false. See Also MouseHookEventArgs MouseButton operator !=(MouseEventData, MouseEventData) Compares two objects for inequality. public static bool operator !=(MouseEventData left, MouseEventData right) Parameters left MouseEventData The first object to compare right MouseEventData The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also MouseHookEventArgs MouseButton See Also MouseHookEventArgs MouseButton"
  },
  "api/SharpHook.Native.MouseWheelEventData.html": {
    "href": "api/SharpHook.Native.MouseWheelEventData.html",
    "title": "Struct MouseWheelEventData | SharpHook",
    "keywords": "Struct MouseWheelEventData Namespace SharpHook.Native Assembly SharpHook.dll Represents the data of a mouse wheel-related event. public struct MouseWheelEventData : IEquatable<MouseWheelEventData> Implements IEquatable<MouseWheelEventData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields Delta The wheel delta. public ushort Delta Field Value ushort The wheel delta. Remarks On Windows this value is equal to the WHEEL_DELTA constant (120). On macOS this value is the number of pixels per line. On Linux this value is always equal to 100. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection Direction The wheel scroll direction. public MouseWheelScrollDirection Direction Field Value MouseWheelScrollDirection The wheel scroll direction. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection Rotation The wheel rotation. public short Rotation Field Value short The wheel rotation. Remarks A positive value indicates that the wheel was rotated up or left, and a negative value indicates that the wheel was rotated down or right. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection Type The wheel scroll type. public MouseWheelScrollType Type Field Value MouseWheelScrollType The wheel scroll type. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection X The X-coordinate of the mouse cursor. public short X Field Value short The X-coordinate of the mouse cursor. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection Y The Y-coordinate of the mouse cursor. public short Y Field Value short The Y-coordinate of the mouse cursor. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection Methods Equals(MouseWheelEventData) Compares this object to another object for equality. public readonly bool Equals(MouseWheelEventData data) Parameters data MouseWheelEventData The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection Operators operator ==(MouseWheelEventData, MouseWheelEventData) Compares two objects for equality. public static bool operator ==(MouseWheelEventData left, MouseWheelEventData right) Parameters left MouseWheelEventData The first object to compare right MouseWheelEventData The second object to compare Returns bool true if the objects are equal. Otherwise, false. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection operator !=(MouseWheelEventData, MouseWheelEventData) Compares two objects for inequality. public static bool operator !=(MouseWheelEventData left, MouseWheelEventData right) Parameters left MouseWheelEventData The first object to compare right MouseWheelEventData The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection See Also MouseWheelHookEventArgs MouseWheelScrollType MouseWheelScrollDirection"
  },
  "api/SharpHook.Native.MouseWheelScrollDirection.html": {
    "href": "api/SharpHook.Native.MouseWheelScrollDirection.html",
    "title": "Enum MouseWheelScrollDirection | SharpHook",
    "keywords": "Enum MouseWheelScrollDirection Namespace SharpHook.Native Assembly SharpHook.dll Represents a mouse wheel scroll direction. public enum MouseWheelScrollDirection : byte Fields Horizontal = 4 Horizontal scroll direction. Vertical = 3 Vertical scroll direction. See Also MouseWheelEventData"
  },
  "api/SharpHook.Native.MouseWheelScrollType.html": {
    "href": "api/SharpHook.Native.MouseWheelScrollType.html",
    "title": "Enum MouseWheelScrollType | SharpHook",
    "keywords": "Enum MouseWheelScrollType Namespace SharpHook.Native Assembly SharpHook.dll Represents a mouse wheel scroll type. public enum MouseWheelScrollType : byte Fields BlockScroll = 2 The page scroll type on Windows, and the line scroll type on macOS. Not available on Linux. UnitScroll = 1 The default scroll type on Windows and Linux, and the pixel scroll type on macOS. See Also MouseWheelEventData"
  },
  "api/SharpHook.Native.ScreenData.html": {
    "href": "api/SharpHook.Native.ScreenData.html",
    "title": "Struct ScreenData | SharpHook",
    "keywords": "Struct ScreenData Namespace SharpHook.Native Assembly SharpHook.dll Represents screen-related data. public struct ScreenData : IEquatable<ScreenData> Implements IEquatable<ScreenData> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields Height The height of the screen. public ushort Height Field Value ushort The height of the screen. Number The ordinal number of the screen. public byte Number Field Value byte The ordinal number of the screen. Width The width of the screen. public ushort Width Field Value ushort The width of the screen. X The X-coordinate of the screen. public short X Field Value short The X-coordinate of the screen. Y The Y-coordinate of the screen. public short Y Field Value short The Y-coordinate of the screen. Methods Equals(ScreenData) Compares this object to another object for equality. public readonly bool Equals(ScreenData data) Parameters data ScreenData The object to compare Returns bool true if the objects are equal. Otherwise, false. Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. Operators operator ==(ScreenData, ScreenData) Compares two objects for equality. public static bool operator ==(ScreenData left, ScreenData right) Parameters left ScreenData The first object to compare right ScreenData The second object to compare Returns bool true if the objects are equal. Otherwise, false. operator !=(ScreenData, ScreenData) Compares two objects for inequality. public static bool operator !=(ScreenData left, ScreenData right) Parameters left ScreenData The first object to compare right ScreenData The second object to compare Returns bool true if the objects are not equal. Otherwise, false."
  },
  "api/SharpHook.Native.UioHook.html": {
    "href": "api/SharpHook.Native.UioHook.html",
    "title": "Class UioHook | SharpHook",
    "keywords": "Class UioHook Namespace SharpHook.Native Assembly SharpHook.dll Contains native methods of libuiohook. public static class UioHook Inheritance object UioHook Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreateScreenInfo() Gets the information about screens. public static ScreenData[] CreateScreenInfo() Returns ScreenData[] The information about screens. Remarks This is the safe version of CreateScreenInfo(out byte) as it returns a managed array. See Also CreateScreenInfo(out byte) CreateScreenInfo(out byte) Gets the information about screens. public static nint CreateScreenInfo(out byte count) Parameters count byte The number of screens. Returns nint The information about screens as an unmanaged array of ScreenData whose length is returned as count. The memory used by the array must be freed manually. Remarks You should use CreateScreenInfo() instead as it returns a managed array. See Also CreateScreenInfo() GetAutoRepeatDelay() Gets the auto-repeat delay. public static extern int GetAutoRepeatDelay() Returns int The auto-repeat delay. GetAutoRepeatRate() Gets the auto-repeat rate. public static extern int GetAutoRepeatRate() Returns int The auto-repeat rate. GetMultiClickTime() Gets the multi-click time. public static extern int GetMultiClickTime() Returns int The multi-click time. GetPointerAccelerationMultiplier() Gets the pointer acceleration multiplier. public static extern int GetPointerAccelerationMultiplier() Returns int The pointer acceleration multiplier. GetPointerAccelerationThreshold() Gets the pointer acceleration threshold. public static extern int GetPointerAccelerationThreshold() Returns int The pointer acceleration threshold. GetPointerSensitivity() Gets the pointer sensitivity. public static extern int GetPointerSensitivity() Returns int The pointer sensitivity. GetPostTextDelayX11() Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public static extern ulong GetPostTextDelayX11() Returns ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method always returns 0. See Also EventSimulator PostEvent(ref UioHookEvent) Posts a fake input event. public static UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The result of the operation. Remarks The instance of the event doesn't need all fields to have value. Only Type, Keyboard/Mouse/Wheel should be present. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyCode is considered. KeyReleased Only KeyCode is considered. KeyTyped Events of this type are ignored. PostText(string) should be used to post Unicode characters. MousePressed Only X, Y, and Button are considered. MouseReleased Only X, Y, and Button are considered. MouseClicked Events of this type are ignored. MouseMoved Only X and Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only Rotation, Direction, and Type are considered. See Also EventSimulator PostText(string) Simulates the input of arbitrary Unicode characters. public static UioHookResult PostText(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. SetPostTextDelayX11(ulong) can be used to increase (or decrease) the delay if needed - longer dealys add consistency but may be more jarring to end users. GetPostTextDelayX11() can be used to get the currently configured delay - the default is 50 milliseconds. See Also EventSimulator Run() Runs the global hook and blocks the thread until it's stopped. public static extern UioHookResult Run() Returns UioHookResult The result of the operation. SetDispatchProc(DispatchProc?, nint) Sets the hook callback function. public static void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also DispatchProc SetLoggerProc(LoggerProc?, nint) Sets the log callback function. public static void SetLoggerProc(LoggerProc? loggerProc, nint userData) Parameters loggerProc LoggerProc The function to call for logging, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also LoggerProc SetPostTextDelayX11(ulong) Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public static extern void SetPostTextDelayX11(ulong delayNanoseconds) Parameters delayNanoseconds ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method does nothing. See Also EventSimulator Stop() Stops the global hook. public static extern UioHookResult Stop() Returns UioHookResult The result of the operation."
  },
  "api/SharpHook.Native.UioHookEvent.html": {
    "href": "api/SharpHook.Native.UioHookEvent.html",
    "title": "Struct UioHookEvent | SharpHook",
    "keywords": "Struct UioHookEvent Namespace SharpHook.Native Assembly SharpHook.dll Represents an event which can be raised by libuiohook. public struct UioHookEvent : IEquatable<UioHookEvent> Implements IEquatable<UioHookEvent> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Remarks This is a union-like struct and the data it contains depends on the type of the event. The Keyboard field is available for the events of the following types: KeyTyped KeyPressed KeyReleased The Mouse field is available for the events of the following types: MouseClicked MousePressed MouseReleased MouseMoved MouseDragged The Wheel field is available for the events of the following type: MouseWheel Fields Keyboard The event data if this event is keyboard-related. public KeyboardEventData Keyboard Field Value KeyboardEventData The event data if this event is keyboard-related. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Mask The mask of the event. public ModifierMask Mask Field Value ModifierMask The mask of the event. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Mouse The event data if this event is mouse-related. public MouseEventData Mouse Field Value MouseEventData The event data if this event is mouse-related. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Reserved The reserved value which can be set in event handlers. public EventReservedValueMask Reserved Field Value EventReservedValueMask The reserved value which can be set in event handlers. Remarks The value for this field should be set on the same thread which handles the event. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Time The UNIX timestamp of the event. public ulong Time Field Value ulong The UNIX timestamp of the event. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Type The type of the event. public EventType Type Field Value EventType The type of the event. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Wheel The event data if this event is mouse wheel-related. public MouseWheelEventData Wheel Field Value MouseWheelEventData The event data if this event is mouse wheel-related. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Methods Equals(UioHookEvent) Compares this object to another object for equality. public readonly bool Equals(UioHookEvent e) Parameters e UioHookEvent The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Equals(object?) Compares this object to another object for equality. public override readonly bool Equals(object? obj) Parameters obj object The object to compare Returns bool true if the objects are equal. Otherwise, false. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData GetHashCode() Gets the hash code of this object. public override readonly int GetHashCode() Returns int The hash code of this object. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData ToString() Returns the string representation of this object. public override readonly string ToString() Returns string The string representation of this object. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData Operators operator ==(UioHookEvent, UioHookEvent) Compares two objects for equality. public static bool operator ==(UioHookEvent left, UioHookEvent right) Parameters left UioHookEvent The first object to compare right UioHookEvent The second object to compare Returns bool true if the objects are equal. Otherwise, false. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData operator !=(UioHookEvent, UioHookEvent) Compares two objects for inequality. public static bool operator !=(UioHookEvent left, UioHookEvent right) Parameters left UioHookEvent The first object to compare right UioHookEvent The second object to compare Returns bool true if the objects are not equal. Otherwise, false. See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData See Also EventType ModifierMask KeyboardEventData MouseEventData MouseWheelEventData"
  },
  "api/SharpHook.Native.UioHookResult.html": {
    "href": "api/SharpHook.Native.UioHookResult.html",
    "title": "Enum UioHookResult | SharpHook",
    "keywords": "Enum UioHookResult Namespace SharpHook.Native Assembly SharpHook.dll Represents a result of an operation of libuiohook. public enum UioHookResult Fields ErrorAxApiDisabled = 64 Accessibility API is disabled for the process (macOS) ErrorCreateEventPort = 65 Failed to create an event port (macOS) ErrorCreateInvisibleWindow = 50 Couldn't create an invisible window which will listen to screen changes (Windows) ErrorCreateObserver = 68 CFRunLoopObserverCreate failed (macOS) ErrorCreateRunLoopSource = 66 CFRunLoopSourceCreate or CFMachPortCreateRunLoopSource failed (macOS) ErrorGetModuleHandle = 49 Couldn't get a module handle for SetWindowsHookEx (Windows) ErrorGetRunLoop = 67 CFRunLoopGetCurrent failed (macOS) ErrorOutOfMemory = 2 Out of memory ErrorPostTextNull = 3 A null string was passed to PostText(string). ErrorSetWindowsHookEx = 48 SetWindowsHookEx failed (Windows) ErrorXOpenDisplay = 32 XOpenDisplay failed (X11) ErrorXRecordAllocRange = 34 XRecordAllocRange failed (X11) ErrorXRecordCreateContext = 35 XRecordCreateContext failed (X11) ErrorXRecordEnableContext = 36 XRecordEnableContext failed (X11) ErrorXRecordGetContext = 37 XRecordGetContext failed (X11) ErrorXRecordNotFound = 33 XRecord not found (X11) Failure = 1 Failure Success = 0 Success See Also UioHook"
  },
  "api/SharpHook.Native.html": {
    "href": "api/SharpHook.Native.html",
    "title": "Namespace SharpHook.Native | SharpHook",
    "keywords": "Namespace SharpHook.Native Classes ModifierMaskExtensions Contains extension methods for ModifierMask. UioHook Contains native methods of libuiohook. Structs KeyboardEventData Represents the data of a keyboard-related event. MouseEventData Represents the data of a mouse-related event. MouseWheelEventData Represents the data of a mouse wheel-related event. ScreenData Represents screen-related data. UioHookEvent Represents an event which can be raised by libuiohook. Enums EventReservedValueMask Represents possible values of the Reserved field. EventType Represents the type of an input event which can be raised from a global hook or posted as a fake event. KeyCode Represents a virtual key code. LogLevel Represents a log level. ModifierMask Represents a virtual modifier mask. MouseButton Represents a mouse button. MouseWheelScrollDirection Represents a mouse wheel scroll direction. MouseWheelScrollType Represents a mouse wheel scroll type. UioHookResult Represents a result of an operation of libuiohook. Delegates DispatchProc Represents a function which is called when an event occurs. LoggerProc Represents a function which is called when a logging event occurs."
  },
  "api/SharpHook.Providers.IEventSimulationProvider.html": {
    "href": "api/SharpHook.Providers.IEventSimulationProvider.html",
    "title": "Interface IEventSimulationProvider | SharpHook",
    "keywords": "Interface IEventSimulationProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level event simulation functionality. public interface IEventSimulationProvider Methods GetPostTextDelayX11() Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux. ulong GetPostTextDelayX11() Returns ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method always returns 0. See Also UioHookProvider PostEvent(ref UioHookEvent) Posts a fake input event. UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The result of the operation. Remarks The instance of the event doesn't need all fields to have value. Only Type, Keyboard/Mouse/Wheel should be present. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyCode is considered. KeyReleased Only KeyCode is considered. KeyTyped Events of this type are ignored. PostText(string) should be used to post Unicode characters. MousePressed Only X, Y, and Button are considered. MouseReleased Only X, Y, and Button are considered. MouseClicked Events of this type are ignored. MouseMoved Only X and Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only Rotation, Direction, and Type are considered. See Also UioHookProvider PostText(string) Simulates the input of arbitrary Unicode characters. UioHookResult PostText(string text) Parameters text string The text to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text entry on Linux works slowly and is not guaranteed to be correct. SetPostTextDelayX11(ulong) can be used to increase (or decrease) the delay if needed - longer dealys add consistency but may be more jarring to end users. GetPostTextDelayX11() can be used to get the currently configured delay - the default is 50 milliseconds. See Also UioHookProvider SetPostTextDelayX11(ulong) Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. void SetPostTextDelayX11(ulong delayNanoseconds) Parameters delayNanoseconds ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method does nothing. See Also UioHookProvider See Also UioHookProvider"
  },
  "api/SharpHook.Providers.IGlobalHookProvider.html": {
    "href": "api/SharpHook.Providers.IGlobalHookProvider.html",
    "title": "Interface IGlobalHookProvider | SharpHook",
    "keywords": "Interface IGlobalHookProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level global hook functionality. public interface IGlobalHookProvider Methods Run() Runs the global hook and blocks the thread until it's stopped. UioHookResult Run() Returns UioHookResult The result of the operation. See Also UioHookProvider SetDispatchProc(DispatchProc?, nint) Sets the hook callback function. void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also DispatchProc Stop() Stops the global hook. UioHookResult Stop() Returns UioHookResult The result of the operation. See Also UioHookProvider See Also UioHookProvider"
  },
  "api/SharpHook.Providers.ILoggingProvider.html": {
    "href": "api/SharpHook.Providers.ILoggingProvider.html",
    "title": "Interface ILoggingProvider | SharpHook",
    "keywords": "Interface ILoggingProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level logging functionality. public interface ILoggingProvider Methods SetLoggerProc(LoggerProc?, nint) Sets the log callback function. void SetLoggerProc(LoggerProc? loggerProc, nint userData) Parameters loggerProc LoggerProc The function to call for logging, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also LoggerProc See Also UioHookProvider"
  },
  "api/SharpHook.Providers.IMouseInfoProvider.html": {
    "href": "api/SharpHook.Providers.IMouseInfoProvider.html",
    "title": "Interface IMouseInfoProvider | SharpHook",
    "keywords": "Interface IMouseInfoProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level mouse info functionality. public interface IMouseInfoProvider Methods GetAutoRepeatDelay() Gets the auto-repeat delay. int GetAutoRepeatDelay() Returns int The auto-repeat delay. See Also UioHookProvider GetAutoRepeatRate() Gets the auto-repeat rate. int GetAutoRepeatRate() Returns int The auto-repeat rate. See Also UioHookProvider GetMultiClickTime() Gets the multi-click time. int GetMultiClickTime() Returns int The multi-click time. See Also UioHookProvider GetPointerAccelerationMultiplier() Gets the pointer acceleration multiplier. int GetPointerAccelerationMultiplier() Returns int The pointer acceleration multiplier. See Also UioHookProvider GetPointerAccelerationThreshold() Gets the pointer acceleration threshold. int GetPointerAccelerationThreshold() Returns int The pointer acceleration threshold. See Also UioHookProvider GetPointerSensitivity() Gets the pointer sensitivity. int GetPointerSensitivity() Returns int The pointer sensitivity. See Also UioHookProvider See Also UioHookProvider"
  },
  "api/SharpHook.Providers.IScreenInfoProvider.html": {
    "href": "api/SharpHook.Providers.IScreenInfoProvider.html",
    "title": "Interface IScreenInfoProvider | SharpHook",
    "keywords": "Interface IScreenInfoProvider Namespace SharpHook.Providers Assembly SharpHook.dll Represents a provider of low-level screen info functionality. public interface IScreenInfoProvider Methods CreateScreenInfo() Gets the information about screens. ScreenData[] CreateScreenInfo() Returns ScreenData[] The information about screens. See Also UioHookProvider See Also UioHookProvider"
  },
  "api/SharpHook.Providers.UioHookProvider.html": {
    "href": "api/SharpHook.Providers.UioHookProvider.html",
    "title": "Class UioHookProvider | SharpHook",
    "keywords": "Class UioHookProvider Namespace SharpHook.Providers Assembly SharpHook.dll A provider of low-level functionality which delegates it to the UioHook class. public sealed class UioHookProvider : IGlobalHookProvider, ILoggingProvider, IEventSimulationProvider, IScreenInfoProvider, IMouseInfoProvider Inheritance object UioHookProvider Implements IGlobalHookProvider ILoggingProvider IEventSimulationProvider IScreenInfoProvider IMouseInfoProvider Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Instance Gets the single instance of UioHookProvider. public static UioHookProvider Instance { get; } Property Value UioHookProvider See Also UioHook Methods CreateScreenInfo() Gets the information about screens. public ScreenData[] CreateScreenInfo() Returns ScreenData[] The information about screens. See Also UioHook GetAutoRepeatDelay() Gets the auto-repeat delay. public int GetAutoRepeatDelay() Returns int The auto-repeat delay. See Also UioHook GetAutoRepeatRate() Gets the auto-repeat rate. public int GetAutoRepeatRate() Returns int The auto-repeat rate. See Also UioHook GetMultiClickTime() Gets the multi-click time. public int GetMultiClickTime() Returns int The multi-click time. See Also UioHook GetPointerAccelerationMultiplier() Gets the pointer acceleration multiplier. public int GetPointerAccelerationMultiplier() Returns int The pointer acceleration multiplier. See Also UioHook GetPointerAccelerationThreshold() Gets the pointer acceleration threshold. public int GetPointerAccelerationThreshold() Returns int The pointer acceleration threshold. See Also UioHook GetPointerSensitivity() Gets the pointer sensitivity. public int GetPointerSensitivity() Returns int The pointer sensitivity. See Also UioHook GetPostTextDelayX11() Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public ulong GetPostTextDelayX11() Returns ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method always returns 0. See Also UioHook PostEvent(ref UioHookEvent) Posts a fake input event. public UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The result of the operation. Remarks The instance of the event doesn't need all fields to have value. Only Type, Keyboard/Mouse/Wheel should be present. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyCode is considered. KeyReleased Only KeyCode is considered. KeyTyped Events of this type are ignored. MousePressed Only X, Y, and Button are considered. MouseReleased Only X, Y, and Button are considered. MouseClicked Events of this type are ignored. MouseMoved Only X and Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only Rotation, Direction, and Type are considered. See Also UioHook PostText(string) Simulates input of arbitrary Unicode characters. public UioHookResult PostText(string text) Parameters text string The Unicode characters to simulate. Returns UioHookResult The result of the operation. Remarks The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including surrogate pairs, e.g. emojis) is supported. On Windows text simulation should work correctly and consistently. On macOS applications are not required to process text simulation, but most of them should handle it correctly. X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text simulation on Linux works slowly and is not guaranteed to be correct. SetPostTextDelayX11(ulong) can be used to increase (or decrease) the delay if needed - longer dealys add consistency but may be more jarring to end users. GetPostTextDelayX11() can be used to get the currently configured delay - the default is 50 milliseconds. See Also UioHook Run() Runs the global hook and blocks the thread until it's stopped. public UioHookResult Run() Returns UioHookResult The result of the operation. See Also UioHook SetDispatchProc(DispatchProc?, nint) Sets the hook callback function. public void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also DispatchProc SetLoggerProc(LoggerProc?, nint) Sets the log callback function. public void SetLoggerProc(LoggerProc? loggerProc, nint userData) Parameters loggerProc LoggerProc The function to call for logging, or null to unset the function. userData nint Custom data to pass to the callback. Should not be used, and Zero should always be passed. See Also LoggerProc SetPostTextDelayX11(ulong) Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public void SetPostTextDelayX11(ulong delayNanoseconds) Parameters delayNanoseconds ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. Remarks X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character, an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate simulation. The default delay is 50 milliseconds. On Windows and macOS this method does nothing. See Also UioHook Stop() Stops the global hook. public UioHookResult Stop() Returns UioHookResult The result of the operation. See Also UioHook See Also UioHook"
  },
  "api/SharpHook.Providers.html": {
    "href": "api/SharpHook.Providers.html",
    "title": "Namespace SharpHook.Providers | SharpHook",
    "keywords": "Namespace SharpHook.Providers Classes UioHookProvider A provider of low-level functionality which delegates it to the UioHook class. Interfaces IEventSimulationProvider Represents a provider of low-level event simulation functionality. IGlobalHookProvider Represents a provider of low-level global hook functionality. ILoggingProvider Represents a provider of low-level logging functionality. IMouseInfoProvider Represents a provider of low-level mouse info functionality. IScreenInfoProvider Represents a provider of low-level screen info functionality."
  },
  "api/SharpHook.Reactive.IReactiveGlobalHook.html": {
    "href": "api/SharpHook.Reactive.IReactiveGlobalHook.html",
    "title": "Interface IReactiveGlobalHook | SharpHook",
    "keywords": "Interface IReactiveGlobalHook Namespace SharpHook.Reactive Assembly SharpHook.Reactive.dll Represents a global reactive keyboard and mouse hook. public interface IReactiveGlobalHook : IDisposable Inherited Members IDisposable.Dispose() Remarks All observables of objects of this interface are completed when the object is disposed, unless stated otherwise. Properties HookDisabled Gets an observable which emits a value when the global hook is disabled. IObservable<HookEventArgs> HookDisabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is disabled. Remarks The observable emits a value when the Dispose() method is called and then immediately completes. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter HookEnabled Gets an observable which emits a value when the global hook is enabled. IObservable<HookEventArgs> HookEnabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is enabled. Remarks The observable emits a value when the Run() or RunAsync() method is called and then immediately completes. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter IsDisposed Gets the value which indicates whether the global hook is disposed. bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter IsRunning Gets the value which indicates whether the global hook is running. bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter KeyPressed Gets an observable which emits a value when a key is pressed. IObservable<KeyboardHookEventArgs> KeyPressed { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is pressed. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter KeyReleased Gets an observable which emits a value when a key is released. IObservable<KeyboardHookEventArgs> KeyReleased { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is released. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter KeyTyped Gets an observable which emits a value when a key is typed. IObservable<KeyboardHookEventArgs> KeyTyped { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is typed. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter MouseClicked Gets an observable which emits a value when a mouse button is clicked. IObservable<MouseHookEventArgs> MouseClicked { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is clicked. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter MouseDragged Gets an observable which emits a value when the mouse cursor is dragged. IObservable<MouseHookEventArgs> MouseDragged { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is dragged. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter MouseMoved Gets an observable which emits a value when the mouse cursor is moved. IObservable<MouseHookEventArgs> MouseMoved { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is moved. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter MousePressed Gets an observable which emits a value when a mouse button is pressed. IObservable<MouseHookEventArgs> MousePressed { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is pressed. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter MouseReleased Gets an observable which emits a value when a mouse button is released. IObservable<MouseHookEventArgs> MouseReleased { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is released. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter MouseWheel Gets an observable which emits a value when the mouse wheel is scrolled. IObservable<MouseWheelHookEventArgs> MouseWheel { get; } Property Value IObservable<MouseWheelHookEventArgs> An observable which emits a value when the mouse wheel is scrolled. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter Methods Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. IObservable<Unit> RunAsync() Returns IObservable<Unit> An observable which is completed when the hook is destroyed. Remarks Since the underlying native API for running a global hook is blocking, the only way to run it without blocking the current thread is to run it on a separate thread. The returned observable is hot, and emits a single value and then immediately completes when the hook is destroyed. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter See Also IGlobalHook SimpleReactiveGlobalHook ReactiveGlobalHookAdapter"
  },
  "api/SharpHook.Reactive.Logging.IReactiveLogSource.html": {
    "href": "api/SharpHook.Reactive.Logging.IReactiveLogSource.html",
    "title": "Interface IReactiveLogSource | SharpHook",
    "keywords": "Interface IReactiveLogSource Namespace SharpHook.Reactive.Logging Assembly SharpHook.Reactive.dll Represents a reactive source of libuiohook logs. public interface IReactiveLogSource : IDisposable Inherited Members IDisposable.Dispose() Properties IsDisposed Gets the value which indicates whether the log source is disposed. bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks The MessageLogged observable doesn't emit any values in a disposed log source. See Also ILogSource LogSource ReactiveLogSourceAdapter LogEventArgs LogEntry MessageLogged An observable which is emitted when libuiohook logs a message. IObservable<LogEntry> MessageLogged { get; } Property Value IObservable<LogEntry> See Also ILogSource LogSource ReactiveLogSourceAdapter LogEventArgs LogEntry See Also ILogSource LogSource ReactiveLogSourceAdapter LogEventArgs LogEntry"
  },
  "api/SharpHook.Reactive.Logging.ReactiveLogSourceAdapter.html": {
    "href": "api/SharpHook.Reactive.Logging.ReactiveLogSourceAdapter.html",
    "title": "Class ReactiveLogSourceAdapter | SharpHook",
    "keywords": "Class ReactiveLogSourceAdapter Namespace SharpHook.Reactive.Logging Assembly SharpHook.Reactive.dll Adapts an ILogSource to the IReactiveLogSource interface. public sealed class ReactiveLogSourceAdapter : IReactiveLogSource, IDisposable Inheritance object ReactiveLogSourceAdapter Implements IReactiveLogSource IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ReactiveLogSourceAdapter(ILogSource) Initializes a new instance of the ReactiveLogSourceAdapter class. public ReactiveLogSourceAdapter(ILogSource logSource) Parameters logSource ILogSource The log source to adapt. See Also ILogSource IReactiveLogSource Properties IsDisposed Gets the value which indicates whether the log source is disposed. public bool IsDisposed { get; } Property Value bool true if the log source is disposed. Otherwise, false. Remarks The MessageLogged observable doesn't emit any values in a disposed log source. See Also ILogSource IReactiveLogSource MessageLogged An observable which is emitted when libuiohook logs a message. public IObservable<LogEntry> MessageLogged { get; } Property Value IObservable<LogEntry> See Also ILogSource IReactiveLogSource Methods Dispose() Disposes the adapted log source and emits the completion signal for MessageLogged. public void Dispose() See Also ILogSource IReactiveLogSource ~ReactiveLogSourceAdapter() Completes the MessageLogged observable if the log source hasn't been disposed. protected ~ReactiveLogSourceAdapter() See Also ILogSource IReactiveLogSource See Also ILogSource IReactiveLogSource"
  },
  "api/SharpHook.Reactive.Logging.html": {
    "href": "api/SharpHook.Reactive.Logging.html",
    "title": "Namespace SharpHook.Reactive.Logging | SharpHook",
    "keywords": "Namespace SharpHook.Reactive.Logging Classes ReactiveLogSourceAdapter Adapts an ILogSource to the IReactiveLogSource interface. Interfaces IReactiveLogSource Represents a reactive source of libuiohook logs."
  },
  "api/SharpHook.Reactive.ReactiveGlobalHookAdapter.html": {
    "href": "api/SharpHook.Reactive.ReactiveGlobalHookAdapter.html",
    "title": "Class ReactiveGlobalHookAdapter | SharpHook",
    "keywords": "Class ReactiveGlobalHookAdapter Namespace SharpHook.Reactive Assembly SharpHook.Reactive.dll Adapts an IGlobalHook to the IReactiveGlobalHook interface. public sealed class ReactiveGlobalHookAdapter : IGlobalHook, IReactiveGlobalHook, IDisposable Inheritance object ReactiveGlobalHookAdapter Implements IGlobalHook IReactiveGlobalHook IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ReactiveGlobalHookAdapter(IGlobalHook) Initializes a new instance of ReactiveGlobalHookAdapter. public ReactiveGlobalHookAdapter(IGlobalHook hook) Parameters hook IGlobalHook The hook to adapt. Exceptions ArgumentNullException hook is null. See Also IGlobalHook IReactiveGlobalHook ReactiveGlobalHookAdapter(IGlobalHook, IScheduler) Initializes a new instance of ReactiveGlobalHookAdapter. public ReactiveGlobalHookAdapter(IGlobalHook hook, IScheduler defaultScheduler) Parameters hook IGlobalHook The hook to adapt. defaultScheduler IScheduler The default scheduler for observables. Exceptions ArgumentNullException hook or defaultScheduler is null. See Also IGlobalHook IReactiveGlobalHook Properties HookDisabled Gets an observable which emits a value when the global hook is disabled. public IObservable<HookEventArgs> HookDisabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is disabled. Remarks The observable emits a value when the Dispose() method is called and then immediately completes. See Also IGlobalHook IReactiveGlobalHook HookEnabled Gets an observable which emits a value when the global hook is enabled. public IObservable<HookEventArgs> HookEnabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is enabled. Remarks The observable emits a value when the Run() or RunAsync() method is called and then immediately completes. See Also IGlobalHook IReactiveGlobalHook IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. See Also IGlobalHook IReactiveGlobalHook IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. See Also IGlobalHook IReactiveGlobalHook KeyPressed Gets an observable which emits a value when a key is pressed. public IObservable<KeyboardHookEventArgs> KeyPressed { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is pressed. See Also IGlobalHook IReactiveGlobalHook KeyReleased Gets an observable which emits a value when a key is released. public IObservable<KeyboardHookEventArgs> KeyReleased { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is released. See Also IGlobalHook IReactiveGlobalHook KeyTyped Gets an observable which emits a value when a key is typed. public IObservable<KeyboardHookEventArgs> KeyTyped { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is typed. See Also IGlobalHook IReactiveGlobalHook MouseClicked Gets an observable which emits a value when a mouse button is clicked. public IObservable<MouseHookEventArgs> MouseClicked { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is clicked. See Also IGlobalHook IReactiveGlobalHook MouseDragged Gets an observable which emits a value when the mouse cursor is dragged. public IObservable<MouseHookEventArgs> MouseDragged { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is dragged. See Also IGlobalHook IReactiveGlobalHook MouseMoved Gets an observable which emits a value when the mouse cursor is moved. public IObservable<MouseHookEventArgs> MouseMoved { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is moved. See Also IGlobalHook IReactiveGlobalHook MousePressed Gets an observable which emits a value when a mouse button is pressed. public IObservable<MouseHookEventArgs> MousePressed { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is pressed. See Also IGlobalHook IReactiveGlobalHook MouseReleased Gets an observable which emits a value when a mouse button is released. public IObservable<MouseHookEventArgs> MouseReleased { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is released. See Also IGlobalHook IReactiveGlobalHook MouseWheel Gets an observable which emits a value when the mouse wheel is scrolled. public IObservable<MouseWheelHookEventArgs> MouseWheel { get; } Property Value IObservable<MouseWheelHookEventArgs> An observable which emits a value when the mouse wheel is scrolled. See Also IGlobalHook IReactiveGlobalHook Methods Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IGlobalHook. See Also IGlobalHook IReactiveGlobalHook ~ReactiveGlobalHookAdapter() Destroys the global hook if it's running. protected ~ReactiveGlobalHookAdapter() See Also IGlobalHook IReactiveGlobalHook Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook IReactiveGlobalHook RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public IObservable<Unit> RunAsync() Returns IObservable<Unit> An observable which is completed when the hook is destroyed. Remarks The hook is started on a separate thread. The returned observable is hot, and emits a single value and then immediately completes when the hook is destroyed. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IGlobalHook IReactiveGlobalHook See Also IGlobalHook IReactiveGlobalHook"
  },
  "api/SharpHook.Reactive.SimpleReactiveGlobalHook.html": {
    "href": "api/SharpHook.Reactive.SimpleReactiveGlobalHook.html",
    "title": "Class SimpleReactiveGlobalHook | SharpHook",
    "keywords": "Class SimpleReactiveGlobalHook Namespace SharpHook.Reactive Assembly SharpHook.Reactive.dll Represents a simple reactive global hook. public sealed class SimpleReactiveGlobalHook : IReactiveGlobalHook, IDisposable Inheritance object SimpleReactiveGlobalHook Implements IReactiveGlobalHook IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SimpleReactiveGlobalHook() Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook() See Also IReactiveGlobalHook SimpleReactiveGlobalHook(IGlobalHookProvider) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IGlobalHookProvider globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. Exceptions ArgumentNullException globalHookProvider is null. See Also IReactiveGlobalHook SimpleReactiveGlobalHook(IGlobalHookProvider, bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IGlobalHookProvider globalHookProvider, bool runAsyncOnBackgroundThread) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Exceptions ArgumentNullException globalHookProvider is null. See Also IReactiveGlobalHook SimpleReactiveGlobalHook(bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also IReactiveGlobalHook SimpleReactiveGlobalHook(IScheduler) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler defaultScheduler) Parameters defaultScheduler IScheduler The default scheduler for observables. Exceptions ArgumentNullException defaultScheduler is null. See Also IReactiveGlobalHook SimpleReactiveGlobalHook(IScheduler, IGlobalHookProvider) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler defaultScheduler, IGlobalHookProvider globalHookProvider) Parameters defaultScheduler IScheduler The default scheduler for observables. globalHookProvider IGlobalHookProvider The underlying global hook provider. Exceptions ArgumentNullException defaultScheduler or globalHookProvider is null. See Also IReactiveGlobalHook SimpleReactiveGlobalHook(IScheduler, IGlobalHookProvider, bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler defaultScheduler, IGlobalHookProvider globalHookProvider, bool runAsyncOnBackgroundThread) Parameters defaultScheduler IScheduler The default scheduler for observables. globalHookProvider IGlobalHookProvider The underlying global hook provider. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Exceptions ArgumentNullException defaultScheduler or globalHookProvider is null. See Also IReactiveGlobalHook SimpleReactiveGlobalHook(IScheduler, bool) Initializes a new instance of SimpleReactiveGlobalHook. public SimpleReactiveGlobalHook(IScheduler defaultScheduler, bool runAsyncOnBackgroundThread) Parameters defaultScheduler IScheduler The default scheduler for observables. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Exceptions ArgumentNullException defaultScheduler is null. See Also IReactiveGlobalHook Properties HookDisabled Gets an observable which emits a value when the global hook is disabled. public IObservable<HookEventArgs> HookDisabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is disabled. Remarks The observable emits a value when the Dispose() method is called and then immediately completes. See Also IReactiveGlobalHook HookEnabled Gets an observable which emits a value when the global hook is enabled. public IObservable<HookEventArgs> HookEnabled { get; } Property Value IObservable<HookEventArgs> An observable which emits a value when the global hook is enabled. Remarks The observable emits a value when the Run() or RunAsync() method is called and then immediately completes. See Also IReactiveGlobalHook IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. See Also IReactiveGlobalHook IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. See Also IReactiveGlobalHook KeyPressed Gets an observable which emits a value when a key is pressed. public IObservable<KeyboardHookEventArgs> KeyPressed { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is pressed. See Also IReactiveGlobalHook KeyReleased Gets an observable which emits a value when a key is released. public IObservable<KeyboardHookEventArgs> KeyReleased { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is released. See Also IReactiveGlobalHook KeyTyped Gets an observable which emits a value when a key is typed. public IObservable<KeyboardHookEventArgs> KeyTyped { get; } Property Value IObservable<KeyboardHookEventArgs> An observable which emits a value when a key is typed. See Also IReactiveGlobalHook MouseClicked Gets an observable which emits a value when a mouse button is clicked. public IObservable<MouseHookEventArgs> MouseClicked { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is clicked. See Also IReactiveGlobalHook MouseDragged Gets an observable which emits a value when the mouse cursor is dragged. public IObservable<MouseHookEventArgs> MouseDragged { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is dragged. See Also IReactiveGlobalHook MouseMoved Gets an observable which emits a value when the mouse cursor is moved. public IObservable<MouseHookEventArgs> MouseMoved { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when the mouse cursor is moved. See Also IReactiveGlobalHook MousePressed Gets an observable which emits a value when a mouse button is pressed. public IObservable<MouseHookEventArgs> MousePressed { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is pressed. See Also IReactiveGlobalHook MouseReleased Gets an observable which emits a value when a mouse button is released. public IObservable<MouseHookEventArgs> MouseReleased { get; } Property Value IObservable<MouseHookEventArgs> An observable which emits a value when a mouse button is released. See Also IReactiveGlobalHook MouseWheel Gets an observable which emits a value when the mouse wheel is scrolled. public IObservable<MouseWheelHookEventArgs> MouseWheel { get; } Property Value IObservable<MouseWheelHookEventArgs> An observable which emits a value when the mouse wheel is scrolled. See Also IReactiveGlobalHook Methods Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IReactiveGlobalHook. Exceptions HookException Stopping the hook has failed. See Also IReactiveGlobalHook ~SimpleReactiveGlobalHook() Destroys the global hook if it's running. protected ~SimpleReactiveGlobalHook() See Also IReactiveGlobalHook Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IReactiveGlobalHook RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public IObservable<Unit> RunAsync() Returns IObservable<Unit> An observable which is completed when the hook is destroyed. Remarks The hook is started on a separate thread. The returned observable is hot, and emits a single value and then immediately completes when the hook is destroyed. Exceptions HookException Starting the global hook has failed. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. See Also IReactiveGlobalHook See Also IReactiveGlobalHook"
  },
  "api/SharpHook.Reactive.html": {
    "href": "api/SharpHook.Reactive.html",
    "title": "Namespace SharpHook.Reactive | SharpHook",
    "keywords": "Namespace SharpHook.Reactive Classes ReactiveGlobalHookAdapter Adapts an IGlobalHook to the IReactiveGlobalHook interface. SimpleReactiveGlobalHook Represents a simple reactive global hook. Interfaces IReactiveGlobalHook Represents a global reactive keyboard and mouse hook."
  },
  "api/SharpHook.SimpleGlobalHook.html": {
    "href": "api/SharpHook.SimpleGlobalHook.html",
    "title": "Class SimpleGlobalHook | SharpHook",
    "keywords": "Class SimpleGlobalHook Namespace SharpHook Assembly SharpHook.dll Represents an implementation of IGlobalHook which raises events on the same thread on which the hook itself runs. public sealed class SimpleGlobalHook : GlobalHookBase, IGlobalHook, IDisposable Inheritance object GlobalHookBase SimpleGlobalHook Implements IGlobalHook IDisposable Inherited Members GlobalHookBase.Run() GlobalHookBase.RunAsync() GlobalHookBase.Dispose() GlobalHookBase.IsRunning GlobalHookBase.IsDisposed GlobalHookBase.HookEnabled GlobalHookBase.HookDisabled GlobalHookBase.KeyTyped GlobalHookBase.KeyPressed GlobalHookBase.KeyReleased GlobalHookBase.MouseClicked GlobalHookBase.MousePressed GlobalHookBase.MouseReleased GlobalHookBase.MouseMoved GlobalHookBase.MouseDragged GlobalHookBase.MouseWheel object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The event handlers should generally be fast and simple so that the thread can process all raised events. If you need to do a lot of processing in the event handlers then consider using another implementation, e.g. TaskPoolGlobalHook. Constructors SimpleGlobalHook() Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook() See Also IGlobalHook GlobalHookBase TaskPoolGlobalHook SimpleGlobalHook(IGlobalHookProvider) Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook(IGlobalHookProvider globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. Exceptions ArgumentNullException globalHookProvider is null. See Also IGlobalHook GlobalHookBase TaskPoolGlobalHook SimpleGlobalHook(IGlobalHookProvider, bool) Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook(IGlobalHookProvider globalHookProvider, bool runAsyncOnBackgroundThread) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. Exceptions ArgumentNullException globalHookProvider is null. See Also IGlobalHook GlobalHookBase TaskPoolGlobalHook SimpleGlobalHook(bool) Initializes a new instance of SimpleGlobalHook. public SimpleGlobalHook(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also IGlobalHook GlobalHookBase TaskPoolGlobalHook Methods HandleHookEvent(ref UioHookEvent) Handles the hook event. protected override void HandleHookEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to handle. See Also IGlobalHook GlobalHookBase TaskPoolGlobalHook See Also IGlobalHook GlobalHookBase TaskPoolGlobalHook"
  },
  "api/SharpHook.TaskPoolGlobalHook.html": {
    "href": "api/SharpHook.TaskPoolGlobalHook.html",
    "title": "Class TaskPoolGlobalHook | SharpHook",
    "keywords": "Class TaskPoolGlobalHook Namespace SharpHook Assembly SharpHook.dll Represents a task pool-based implementation of IGlobalHook. public sealed class TaskPoolGlobalHook : GlobalHookBase, IGlobalHook, IDisposable Inheritance object GlobalHookBase TaskPoolGlobalHook Implements IGlobalHook IDisposable Inherited Members GlobalHookBase.Run() GlobalHookBase.RunAsync() GlobalHookBase.Dispose() GlobalHookBase.IsRunning GlobalHookBase.IsDisposed GlobalHookBase.HookEnabled GlobalHookBase.HookDisabled GlobalHookBase.KeyTyped GlobalHookBase.KeyPressed GlobalHookBase.KeyReleased GlobalHookBase.MouseClicked GlobalHookBase.MousePressed GlobalHookBase.MouseReleased GlobalHookBase.MouseMoved GlobalHookBase.MouseDragged GlobalHookBase.MouseWheel object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks The event handlers will run with the specified parallelism level on separate threads inside the default thread pool for tasks. This way the hook itself will not be blocked if the handlers are long-running. The exception is the HookDisabled event which will run on the same thread that called the Dispose() method since at that point it doesn't matter anymore that the hook is not blocked. Setting SuppressEvent inside the handlers will have no effect as they are run on other threads. Constructors TaskPoolGlobalHook() Initializes a new instance of TaskPoolGlobalHook. public TaskPoolGlobalHook() Remarks Calling this constructor is the same as passing Sequential to the other constructor. See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions TaskPoolGlobalHook(IGlobalHookProvider) Initializes a new instance of TaskPoolGlobalHook. public TaskPoolGlobalHook(IGlobalHookProvider globalHookProvider) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. Exceptions ArgumentNullException globalHookProvider is null. See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions TaskPoolGlobalHook(IGlobalHookProvider, TaskPoolGlobalHookOptions) Initializes a new instance of TaskPoolGlobalHook. public TaskPoolGlobalHook(IGlobalHookProvider globalHookProvider, TaskPoolGlobalHookOptions options) Parameters globalHookProvider IGlobalHookProvider The underlying global hook provider. options TaskPoolGlobalHookOptions The options of the hook which include its parallelism level. Exceptions ArgumentNullException globalHookProvider or options is null. See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions TaskPoolGlobalHook(TaskPoolGlobalHookOptions) Initializes a new instance of TaskPoolGlobalHook. public TaskPoolGlobalHook(TaskPoolGlobalHookOptions options) Parameters options TaskPoolGlobalHookOptions The options of the hook which include its parallelism level. Exceptions ArgumentNullException options is null. See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions Methods Dispose(bool) Destoys the global hook. protected override void Dispose(bool disposing) Parameters disposing bool true if the method is called from the Dispose() method. Otherwise, false. Remarks After calling this method, the hook cannot be started again. If you want to do that, create a new instance of IGlobalHook. Exceptions HookException Stopping the hook has failed. See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions HandleHookEvent(ref UioHookEvent) Handles the hook event. protected override void HandleHookEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to handle. See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions See Also IGlobalHook GlobalHookBase SimpleGlobalHook TaskPoolGlobalHookOptions"
  },
  "api/SharpHook.TaskPoolGlobalHookOptions.html": {
    "href": "api/SharpHook.TaskPoolGlobalHookOptions.html",
    "title": "Class TaskPoolGlobalHookOptions | SharpHook",
    "keywords": "Class TaskPoolGlobalHookOptions Namespace SharpHook Assembly SharpHook.dll Represents options for TaskPoolGlobalHook. public sealed class TaskPoolGlobalHookOptions Inheritance object TaskPoolGlobalHookOptions Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TaskPoolGlobalHookOptions(bool) Initializes a new instance of TaskPoolGlobalHookOptions. public TaskPoolGlobalHookOptions(bool runAsyncOnBackgroundThread) Parameters runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also TaskPoolGlobalHook TaskPoolGlobalHookOptions(int) Initializes a new instance of TaskPoolGlobalHookOptions. public TaskPoolGlobalHookOptions(int parallelismLevel) Parameters parallelismLevel int The parallelism level of the event handlers. See Also TaskPoolGlobalHook TaskPoolGlobalHookOptions(int, bool) Initializes a new instance of TaskPoolGlobalHookOptions. public TaskPoolGlobalHookOptions(int parallelismLevel, bool runAsyncOnBackgroundThread) Parameters parallelismLevel int The parallelism level of the event handlers. runAsyncOnBackgroundThread bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also TaskPoolGlobalHook Fields Sequential The default options with the parallelism level of 1. public static readonly TaskPoolGlobalHookOptions Sequential Field Value TaskPoolGlobalHookOptions The options with the parallelism level of 1. See Also TaskPoolGlobalHook Properties ParallelismLevel Gets the configured parallelism level of the event handlers. public int ParallelismLevel { get; } Property Value int The parallelism level of the event handlers. See Also TaskPoolGlobalHook RunAsyncOnBackgroundThread Gets the value of whether RunAsync() should run the hook on a background thread. public bool RunAsyncOnBackgroundThread { get; } Property Value bool true if RunAsync() should run the hook on a background thread. Otherwise, false. See Also TaskPoolGlobalHook See Also TaskPoolGlobalHook"
  },
  "api/SharpHook.Testing.TestEventHandledEventArgs.html": {
    "href": "api/SharpHook.Testing.TestEventHandledEventArgs.html",
    "title": "Class TestEventHandledEventArgs | SharpHook",
    "keywords": "Class TestEventHandledEventArgs Namespace SharpHook.Testing Assembly SharpHook.dll Event args for TestEventHandled and TestEventHandled. public class TestEventHandledEventArgs : EventArgs Inheritance object EventArgs TestEventHandledEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TestEventHandledEventArgs(UioHookEvent, bool) Initializes a new instance of the TestEventHandledEventArgs class. public TestEventHandledEventArgs(UioHookEvent @event, bool hookCalled) Parameters event UioHookEvent The event which was handled. hookCalled bool The value which specifies whether the hook was called for this event. Properties Event Gets the event which was handled. public UioHookEvent Event { get; } Property Value UioHookEvent The event which was handled. HookCalled Gets the value which specifies whether the hook was called for this event - true if the test provider was running when PostEvent(ref UioHookEvent) was called, and false otherwise. public bool HookCalled { get; } Property Value bool The value which specifies whether the hook was called for this event"
  },
  "api/SharpHook.Testing.TestGlobalHook.html": {
    "href": "api/SharpHook.Testing.TestGlobalHook.html",
    "title": "Class TestGlobalHook | SharpHook",
    "keywords": "Class TestGlobalHook Namespace SharpHook.Testing Assembly SharpHook.dll A global hook and event simulator which can be used in tests. public sealed class TestGlobalHook : IGlobalHook, IDisposable, IEventSimulator Inheritance object TestGlobalHook Implements IGlobalHook IDisposable IEventSimulator Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TestGlobalHook() public TestGlobalHook() Properties CurrentMouseX Gets or sets the function which will specify the current mouse X-coordinate. public Func<short> CurrentMouseX { get; set; } Property Value Func<short> Exceptions ArgumentNullException value is null. CurrentMouseY Gets or sets the function which will specify the current mouse Y-coordinate. public Func<short> CurrentMouseY { get; set; } Property Value Func<short> Exceptions ArgumentNullException value is null. DisposeResult Gets or sets the result of the Dispose() method. If anything other than Success is set, then the method will throw a HookException. public UioHookResult DisposeResult { get; set; } Property Value UioHookResult The result of the Dispose() method. DragMouseWhenMoving Gets or sets the value which indicates whether simulating mouse movement will simulate events of type MouseDragged. public bool DragMouseWhenMoving { get; set; } Property Value bool true if simulating mouse movement should simulate events of type MouseDragged. Otherwise, false. EventDateTime Gets or sets the function which will be called to set the date/time of events. public Func<EventType, DateTimeOffset> EventDateTime { get; set; } Property Value Func<EventType, DateTimeOffset> Exceptions ArgumentNullException value is null. EventMask Gets or sets the function which will be called to set the mask of events. public Func<EventType, ModifierMask> EventMask { get; set; } Property Value Func<EventType, ModifierMask> Exceptions ArgumentNullException value is null. IsDisposed Gets the value which indicates whether the global hook is disposed. public bool IsDisposed { get; } Property Value bool true if the global hook is disposed. Otherwise, false. Remarks A disposed global hook cannot be started again. IsRunning Gets the value which indicates whether the global hook is running. public bool IsRunning { get; } Property Value bool true if the global hook is running. Otherwise, false. KeyCodeToChars Gets or sets the function which will map key codes to characters. public Func<KeyCode, IEnumerable<char>> KeyCodeToChars { get; set; } Property Value Func<KeyCode, IEnumerable<char>> Remarks By default every key code maps to an empty character sequence. Exceptions ArgumentNullException value is null. KeyCodeToRawCode Gets or sets the function which will map key codes to raw key codes. public Func<KeyCode, ushort> KeyCodeToRawCode { get; set; } Property Value Func<KeyCode, ushort> Exceptions ArgumentNullException value is null. MouseClickCount Gets or sets the click count for events of type MouseClicked. public ushort MouseClickCount { get; set; } Property Value ushort The click count for events of type MouseClicked. Remarks Events of type MouseClicked won't be simulated if this property has the value of 0. The default value is 1. RunResult Gets or sets the result of the Run() and RunAsync() methods. If anything other than Success is set, then the method will throw a HookException. public UioHookResult RunResult { get; set; } Property Value UioHookResult The result of the Run() and RunAsync() methods. SimulateKeyPressResult Gets or sets the result of the SimulateKeyPress(KeyCode) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateKeyPressResult { get; set; } Property Value UioHookResult The result of the SimulateKeyPress(KeyCode) method. SimulateKeyReleaseResult Gets or sets the result of the SimulateKeyRelease(KeyCode) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateKeyReleaseResult { get; set; } Property Value UioHookResult The result of the SimulateKeyRelease(KeyCode) method. SimulateMouseMovementResult Gets or sets the result of the SimulateMouseMovement(short, short) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMouseMovementResult { get; set; } Property Value UioHookResult The result of the SimulateMouseMovement(short, short) method. SimulateMousePressResult Gets or sets the result of the SimulateMousePress(MouseButton) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMousePressResult { get; set; } Property Value UioHookResult The result of the SimulateMousePress(MouseButton) method. SimulateMouseReleaseResult Gets or sets the result of the SimulateMouseRelease(MouseButton) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMouseReleaseResult { get; set; } Property Value UioHookResult The result of the SimulateMouseRelease(MouseButton) method. SimulateMouseWheelResult Gets or sets the result of the SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateMouseWheelResult { get; set; } Property Value UioHookResult The result of the SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) method. SimulateTextEntryResult Gets or sets the result of the SimulateTextEntry(string) method. If anything other than Success is set, then the method will do nothing. public UioHookResult SimulateTextEntryResult { get; set; } Property Value UioHookResult The result of the SimulateTextEntry(string) method. SimulatedEvents Gets the events that have been simulated using this instance. public IReadOnlyList<HookEventArgs> SimulatedEvents { get; } Property Value IReadOnlyList<HookEventArgs> SimulatedText Gets the text that has been simulated using this instance. public IReadOnlyList<string> SimulatedText { get; } Property Value IReadOnlyList<string> Methods Dispose() Destroys the global hook. public void Dispose() Remarks After calling this method, the hook cannot be started again. Exceptions HookException DisposeResult was set to something other than Success. Run() Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the Dispose() method. public void Run() Exceptions HookException RunResult was set to something other than Success. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAndWaitForStart(CancellationToken) Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public Task RunAndWaitForStart(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A Task which finishes when the hook has been started. Exceptions HookException RunResult was set to something other than Success. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. RunAsync() Runs the global hook without blocking the current thread. The hook can be destroyed by calling the Dispose() method. public Task RunAsync() Returns Task A Task which finishes when the hook is destroyed. Exceptions HookException RunResult was set to something other than Success. InvalidOperationException The global hook is already running. ObjectDisposedException The global hook has been disposed. SimulateKeyPress(KeyCode) Simulates pressing a key if SimulateKeyPressResult is Success. Otherwise, does nothing. public UioHookResult SimulateKeyPress(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to press. Returns UioHookResult The value of SimulateKeyPressResult. Remarks This method simulates KeyTyped events as well if KeyCodeToChars returns characters for keyCode. SimulateKeyPressAndWaitForHandler(KeyCode, CancellationToken) Simulates pressing a key if SimulateKeyPressResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateKeyPressAndWaitForHandler(KeyCode keyCode, CancellationToken cancellationToken = default) Parameters keyCode KeyCode The code of the key to press. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. Remarks This method simulates KeyTyped events as well if KeyCodeToChars returns characters for keyCode. SimulateKeyPressAndWaitForKeyTypedHandler(KeyCode, char, CancellationToken) Simulates pressing a key if SimulateKeyPressResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateKeyPressAndWaitForKeyTypedHandler(KeyCode keyCode, char keyChar, CancellationToken cancellationToken = default) Parameters keyCode KeyCode The code of the key to press. keyChar char The char of the KeyTyped event which should be awaited. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the KeyTyped event has been handled, and contains the handler result, or null if the event was not simulated. Remarks This method should be used only if KeyCodeToChars returns keyChar for keyCode, otherwise the resulting task will never finish. SimulateKeyRelease(KeyCode) Simulates releasing a key if SimulateKeyReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateKeyRelease(KeyCode keyCode) Parameters keyCode KeyCode The code of the key to release. Returns UioHookResult The value of SimulateKeyReleaseResult. SimulateKeyReleaseAndWaitForHandler(KeyCode, CancellationToken) Simulates releasing a key if SimulateKeyReleaseResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateKeyReleaseAndWaitForHandler(KeyCode keyCode, CancellationToken cancellationToken = default) Parameters keyCode KeyCode The code of the key to release. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. SimulateMouseMovement(short, short) Simulates moving a mouse pointer if SimulateMouseMovementResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseMovement(short x, short y) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. Returns UioHookResult The result of the operation. SimulateMouseMovementAndWaitForHandler(short, short, CancellationToken) Simulates moving a mouse pointer if SimulateMouseMovementResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMouseMovementAndWaitForHandler(short x, short y, CancellationToken cancellationToken = default) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. SimulateMouseMovementRelative(short, short) Simulates moving a mouse pointer relative to the current cursor position if SimulateMouseMovementResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseMovementRelative(short x, short y) Parameters x short The X-coordinate offset. y short The Y-coordinate offset. Returns UioHookResult The value of SimulateMouseMovementResult. SimulateMouseMovementRelativeAndWaitForHandler(short, short, CancellationToken) Simulates moving a mouse pointer relative to the current cursor position if SimulateMouseMovementResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMouseMovementRelativeAndWaitForHandler(short x, short y, CancellationToken cancellationToken = default) Parameters x short The X-coordinate offset. y short The Y-coordinate offset. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. SimulateMousePress(MouseButton) Simulates pressing a mouse button at the current coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public UioHookResult SimulateMousePress(MouseButton button) Parameters button MouseButton The mouse button to press. Returns UioHookResult The value of SimulateMousePressResult. SimulateMousePress(short, short, MouseButton) Simulates pressing a mouse button at the specified coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public UioHookResult SimulateMousePress(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. Returns UioHookResult The value of SimulateMousePressResult. SimulateMousePressAndWaitForHandler(MouseButton, CancellationToken) Simulates pressing a mouse button at the current coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMousePressAndWaitForHandler(MouseButton button, CancellationToken cancellationToken = default) Parameters button MouseButton The mouse button to press. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. SimulateMousePressAndWaitForHandler(short, short, MouseButton, CancellationToken) Simulates pressing a mouse button at the specified coordinates if SimulateMousePressResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMousePressAndWaitForHandler(short x, short y, MouseButton button, CancellationToken cancellationToken = default) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to press. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. SimulateMouseRelease(MouseButton) Simulates releasing a mouse button at the current coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseRelease(MouseButton button) Parameters button MouseButton The mouse button to release. Returns UioHookResult The value of SimulateMouseReleaseResult. Remarks This method simulates a MouseClicked event as well if MouseClickCount is greater than 0. SimulateMouseRelease(short, short, MouseButton) Simulates releasing a mouse button at the specified coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseRelease(short x, short y, MouseButton button) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. Returns UioHookResult The value of SimulateMouseReleaseResult. Remarks This method simulates a MouseClicked event as well if MouseClickCount is greater than 0. SimulateMouseReleaseAndWaitForHandler(MouseButton, CancellationToken) Simulates releasing a mouse button at the current coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMouseReleaseAndWaitForHandler(MouseButton button, CancellationToken cancellationToken = default) Parameters button MouseButton The mouse button to release. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. Remarks This method simulates a MouseClicked event as well if MouseClickCount is greater than 0. SimulateMouseReleaseAndWaitForHandler(short, short, MouseButton, CancellationToken) Simulates releasing a mouse button at the specified coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMouseReleaseAndWaitForHandler(short x, short y, MouseButton button, CancellationToken cancellationToken = default) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. Remarks This method simulates a MouseClicked event as well if MouseClickCount is greater than 0. SimulateMouseReleaseAndWaitForMouseClickHandler(MouseButton, CancellationToken) Simulates releasing a mouse button at the current coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMouseReleaseAndWaitForMouseClickHandler(MouseButton button, CancellationToken cancellationToken = default) Parameters button MouseButton The mouse button to release. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. Remarks This method simulates a MouseClicked event as well if MouseClickCount is greater than 0. SimulateMouseReleaseAndWaitForMouseClickHandler(short, short, MouseButton, CancellationToken) Simulates releasing a mouse button at the specified coordinates if SimulateMouseReleaseResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMouseReleaseAndWaitForMouseClickHandler(short x, short y, MouseButton button, CancellationToken cancellationToken = default) Parameters x short The target X-coordinate of the mouse pointer. y short The target Y-coordinate of the mouse pointer. button MouseButton The mouse button to release. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. Remarks This method should be called only when MouseClickCount returns a non-zero value, otherwise the resulting task will never finish. SimulateMouseWheel(short, MouseWheelScrollDirection, MouseWheelScrollType) Simulates scrolling the mouse wheel if SimulateMouseWheelResult is Success. Otherwise, does nothing. public UioHookResult SimulateMouseWheel(short rotation, MouseWheelScrollDirection direction = MouseWheelScrollDirection.Vertical, MouseWheelScrollType type = MouseWheelScrollType.UnitScroll) Parameters rotation short The wheel rotation. A positive value indicates that the wheel will be rotated up or left, and a negative value indicates that the wheel will be rotated down or right. direction MouseWheelScrollDirection The scroll direction. type MouseWheelScrollType The scroll type. Returns UioHookResult The value of SimulateMouseWheelResult. SimulateMouseWheelAndWaitForHandler(short, MouseWheelScrollDirection, MouseWheelScrollType, CancellationToken) Simulates scrolling the mouse wheel if SimulateMouseWheelResult is Success. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> SimulateMouseWheelAndWaitForHandler(short rotation, MouseWheelScrollDirection direction = MouseWheelScrollDirection.Vertical, MouseWheelScrollType type = MouseWheelScrollType.UnitScroll, CancellationToken cancellationToken = default) Parameters rotation short The wheel rotation. A positive value indicates that the wheel will be rotated up or right, and a negative value indicates that the wheel will be rotated down or left. direction MouseWheelScrollDirection The scroll direction. type MouseWheelScrollType The scroll type. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not simulated. SimulateTextEntry(string) Simulates the input of arbitrary Unicode characters if SimulateTextEntryResult is Success. Otherwise, does nothing. public UioHookResult SimulateTextEntry(string text) Parameters text string The text to simulate. Returns UioHookResult The value of SimulateTextEntryResult. Remarks This method doesn't cause any input events to be created, unlike real text entry simulation. Exceptions ArgumentNullException text is null. Events HookDisabled An event which is raised when the global hook is disabled. public event EventHandler<HookEventArgs>? HookDisabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Dispose() method is called. HookEnabled An event which is raised when the global hook is enabled. public event EventHandler<HookEventArgs>? HookEnabled Event Type EventHandler<HookEventArgs> Remarks This event is raised when the Run() or RunAsync() method is called. KeyPressed An event which is raised when a key is pressed. public event EventHandler<KeyboardHookEventArgs>? KeyPressed Event Type EventHandler<KeyboardHookEventArgs> KeyReleased An event which is raised when a key is released. public event EventHandler<KeyboardHookEventArgs>? KeyReleased Event Type EventHandler<KeyboardHookEventArgs> KeyTyped An event which is raised when a key is typed. public event EventHandler<KeyboardHookEventArgs>? KeyTyped Event Type EventHandler<KeyboardHookEventArgs> MouseClicked An event which is raised when a mouse button is clicked. public event EventHandler<MouseHookEventArgs>? MouseClicked Event Type EventHandler<MouseHookEventArgs> MouseDragged An event which is raised when the mouse cursor is dragged. public event EventHandler<MouseHookEventArgs>? MouseDragged Event Type EventHandler<MouseHookEventArgs> MouseMoved An event which is raised when the mouse cursor is moved. public event EventHandler<MouseHookEventArgs>? MouseMoved Event Type EventHandler<MouseHookEventArgs> MousePressed An event which is raised when a mouse button is pressed. public event EventHandler<MouseHookEventArgs>? MousePressed Event Type EventHandler<MouseHookEventArgs> MouseReleased An event which is raised when a mouse button is released. public event EventHandler<MouseHookEventArgs>? MouseReleased Event Type EventHandler<MouseHookEventArgs> MouseWheel An event which is raised when the mouse wheel is scrolled. public event EventHandler<MouseWheelHookEventArgs>? MouseWheel Event Type EventHandler<MouseWheelHookEventArgs> TestEventHandled An event which is raised when a simulated input event has been handled. The input event's Reserved field can be inspected using this event. public event EventHandler<TestEventHandledEventArgs>? TestEventHandled Event Type EventHandler<TestEventHandledEventArgs>"
  },
  "api/SharpHook.Testing.TestProvider.html": {
    "href": "api/SharpHook.Testing.TestProvider.html",
    "title": "Class TestProvider | SharpHook",
    "keywords": "Class TestProvider Namespace SharpHook.Testing Assembly SharpHook.dll A provider of low-level functionality which can be used in tests. public sealed class TestProvider : IGlobalHookProvider, ILoggingProvider, IEventSimulationProvider, IScreenInfoProvider, IMouseInfoProvider Inheritance object TestProvider Implements IGlobalHookProvider ILoggingProvider IEventSimulationProvider IScreenInfoProvider IMouseInfoProvider Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TestProvider() public TestProvider() Properties AutoRepeatDelay Gets or sets the auto-repeat delay for testing. public int AutoRepeatDelay { get; set; } Property Value int The auto-repeat rate. AutoRepeatRate Gets or sets the auto-repeat rate for testing. public int AutoRepeatRate { get; set; } Property Value int The auto-repeat rate. EventDateTime Gets or sets the function which will be called to set the date/time of the HookEnabled and HookDisabled events. public Func<EventType, DateTimeOffset> EventDateTime { get; set; } Property Value Func<EventType, DateTimeOffset> Exceptions ArgumentNullException value is null. EventMask Gets or sets the function which will be called to set the mask of the HookEnabled and HookDisabled events. public Func<EventType, ModifierMask> EventMask { get; set; } Property Value Func<EventType, ModifierMask> Exceptions ArgumentNullException value is null. IsRunning Gets the value which indicates whether this provider runs the testing hook. public bool IsRunning { get; } Property Value bool true if the testing hook is running. Otherwise, false. MultiClickTime Gets or sets the multi-click time for testing. public int MultiClickTime { get; set; } Property Value int The multi-click time. PointerAccelerationMultiplier Gets or sets the pointer acceleration multiplier for testing. public int PointerAccelerationMultiplier { get; set; } Property Value int The pointer acceleration multiplier. PointerAccelerationThreshold Gets or sets the pointer acceleration threshold for testing. public int PointerAccelerationThreshold { get; set; } Property Value int The pointer acceleration threshold. PointerSensitivity Gets or sets the pointer sensitivity for testing. public int PointerSensitivity { get; set; } Property Value int The pointer sensitivity. PostEventResult Gets or sets the result of the PostEvent(ref UioHookEvent) method. If anything other than Success is set, then the event won't be posted. public UioHookResult PostEventResult { get; set; } Property Value UioHookResult The result of the PostEvent(ref UioHookEvent) method. PostTextDelayX11 Gets or sets the delay (in nanoseconds) between posting individual characters when posting text on Linux. public ulong PostTextDelayX11 { get; set; } Property Value ulong The delay (in nanoseconds) between posting individual characters when posting text on Linux. PostTextResult Gets or sets the result of the PostText(string) method. If anything other than Success is set, then the text won't be posted. public UioHookResult PostTextResult { get; set; } Property Value UioHookResult The result of the PostText(string) method. PostedEvents Gets the events that have been posted using PostEvent(ref UioHookEvent). public IReadOnlyList<UioHookEvent> PostedEvents { get; } Property Value IReadOnlyList<UioHookEvent> PostedText Gets the text that has been posted using PostText(string). public IReadOnlyList<string> PostedText { get; } Property Value IReadOnlyList<string> RunResult Gets or sets the result of the Run() method. If anything other than Success is set, then the testing hook won't be started. public UioHookResult RunResult { get; set; } Property Value UioHookResult The result of the Run() method. ScreenInfo Gets or sets the information about screens for testing. public ScreenData[] ScreenInfo { get; set; } Property Value ScreenData[] The information about screens. Exceptions ArgumentNullException value is null. StopResult Gets or sets the result of the Stop() method. If anything other than Success is set, then the testing hook won't be stopped. public UioHookResult StopResult { get; set; } Property Value UioHookResult The result of the Stop() method. Methods PostEvent(ref UioHookEvent) Posts an input event if PostEventResult is set to Success - this event will be dispatched if the provider is running. Otherwise, does nothing. public UioHookResult PostEvent(ref UioHookEvent e) Parameters e UioHookEvent The event to post. Returns UioHookResult The value of PostEventResult. Remarks This method returns before the event has been handled. The TestEventHandled event should be used to inspect the value of Reserved. PostEventAndWaitForHandler(ref UioHookEvent, CancellationToken) Posts an input event if PostEventResult is set to Success - this event will be dispatched if the provider is running. Otherwise, does nothing. public Task<TestEventHandledEventArgs?> PostEventAndWaitForHandler(ref UioHookEvent e, CancellationToken cancellationToken = default) Parameters e UioHookEvent The event to post. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<TestEventHandledEventArgs> A Task which finishes when the event has been handled, and contains the handler result, or null if the event was not posted. Remarks Do not use this method inside the global hook as it will result in a deadlock. PostText(string) Simulates the input of arbitrary Unicode characters if PostTextResult is set to Success. Otherwise, does nothing. public UioHookResult PostText(string text) Parameters text string The text to simulate. Returns UioHookResult The value of PostTextResult, or ErrorPostTextNull if text is null. Remarks This method doesn't cause any input events to be created, unlike real text entry simulation. Run() Runs the testing hook if RunResult is set to Success. Otherwise, does nothing. public UioHookResult Run() Returns UioHookResult The value of RunResult. Remarks The testing hook is an event loop which receives events from the PostEvent(ref UioHookEvent) method. The hook can be started and stopped multiple times, but cannot be started when it's already running. Exceptions InvalidOperationException The hook is already running. RunAndWaitForStart(CancellationToken) Runs the testing hook on a separate thread if RunResult is set to Success. Otherwise, does nothing. public Task RunAndWaitForStart(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A Task which finishes when the hook has been started. Remarks The testing hook is an event loop which receives events from the PostEvent(ref UioHookEvent) method. The hook can be started and stopped multiple times, but cannot be started when it's already running. Exceptions InvalidOperationException The hook is already running. SetDispatchProc(DispatchProc?, nint) Sets the hook callback function for testing. public void SetDispatchProc(DispatchProc? dispatchProc, nint userData) Parameters dispatchProc DispatchProc The function to call when an event is raised, or null to unset the function. userData nint Custom data to pass to the callback. Stop() Stops the testing hook if StopResult is set to Success. Otherwise, does nothing. public UioHookResult Stop() Returns UioHookResult The value of StopResult. Events TestEventHandled An event which is raised when an input event posted via PostEvent(ref UioHookEvent) has been handled. The input event's Reserved field can be inspected using this event. public event EventHandler<TestEventHandledEventArgs>? TestEventHandled Event Type EventHandler<TestEventHandledEventArgs>"
  },
  "api/SharpHook.Testing.html": {
    "href": "api/SharpHook.Testing.html",
    "title": "Namespace SharpHook.Testing | SharpHook",
    "keywords": "Namespace SharpHook.Testing Classes TestEventHandledEventArgs Event args for TestEventHandled and TestEventHandled. TestGlobalHook A global hook and event simulator which can be used in tests. TestProvider A provider of low-level functionality which can be used in tests."
  },
  "api/SharpHook.html": {
    "href": "api/SharpHook.html",
    "title": "Namespace SharpHook | SharpHook",
    "keywords": "Namespace SharpHook Classes EventSimulator A keyboard and mouse event simulator which posts events to the OS. GlobalHookBase Represents an abstract implementation of IGlobalHook which raises events only when there is at least one subscriber. HookEventArgs A base class for event args related to the global hook. HookException Represents an exception related to the global hook. KeyboardHookEventArgs Event args for keyboard-related hook events. MouseHookEventArgs Event args for mouse-related hook events. MouseWheelHookEventArgs Event args for mouse wheel-related hook events. SimpleGlobalHook Represents an implementation of IGlobalHook which raises events on the same thread on which the hook itself runs. TaskPoolGlobalHook Represents a task pool-based implementation of IGlobalHook. TaskPoolGlobalHookOptions Represents options for TaskPoolGlobalHook. Interfaces IEventSimulator Represents an object which can simulate keyboard and mouse events. IGlobalHook Represents a global keyboard and mouse hook."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "SharpHook API Docs | SharpHook",
    "keywords": "SharpHook API Docs This section contains API docs for the SharpHook and SharpHook.Reactive packages. Use the sidebar to navigate the docs."
  },
  "articles/about.html": {
    "href": "articles/about.html",
    "title": "About SharpHook | SharpHook",
    "keywords": "About SharpHook SharpHook. Version 4.2.1. Created by Tolik Pylypchuk. Library Status I will maintain the library to keep up with the releases of libuiohook which uses a rolling release model - every commit to its 1.3 branch is considered stable. If you've noticed that this library hasn't gotten new commits in some time, rest assured that it's not abandoned! I'm not giving up on this library any time soon. Changelog v4.2.1 (June 18, 2023) libuiohook was updated to commit 34f279c. Getting screen info for multiple screens was fixed on Windows. A memory leak from getting screen info was fixed. v4.2.0 (April 8, 2023) libuiohook was updated to commit 56e8cb8. The ability to simulate mouse movement relative to the current cursor position was added. v4.1.0 (March 27, 2023) libuiohook was updated to commit 3a90aeb. The ability to simulate mouse press/release events at the current coordinates was added. Turns out that libuiohook has always ignored mouse coordinates when simulating mouse wheel events, so the method which simulates them without coordinates was added, and the previous one was marked as obsolete. v4.0.1 (March 12, 2023) libuiohook was updated to commit 41a17e2 which fixes support for multiple screens on Windows. v4.0.0 (November 9, 2022) .NET 7 support was added and [LibraryImport] is used instead of [DllImport] on it. Explicit targets for .NET 5 and .NET Core 3.1 were removed, though the library can be used on those platforms through .NET Standard. HookEventArgs now contains the SuppressEvent property instead of Reserved. KeyboardEventData.KeyChar is now of type ushort instead of char - this was changed purely for marshalling reasons and it should still be used as a char. Simulating mouse presses and releases now requires providing mouse pointer coordinates. The ability to make RunAsync create a background thread was added. KeyCode.VcPrintscreen was renamed to KeyCode.VcPrintScreen. Versioned libuiohook binaries for macOS and Linux were removed from the NuGet package as they were bit-for-bit same as the unversioned binaries. libuiohook is at commit 1ece4c4. v3.1.3 (October 27, 2022) Copying native libraries to the build output folder should now work correctly for .NET Framework-based projects (#18). v3.1.2 (October 19, 2022) A fix for posting keyboard events on Windows was added, as suggested by FaithBeam, and fixes #20. libuiohook is at commit fc779b0. v3.1.1 (August 5, 2022) A fork of libuiohook which fixes issue #9 is used and is at commit 09bae87. v3.1.0 (July 30, 2022) SharpHook now uses a build of libuiohook which links the C runtime statically on Windows. This means that Visual C++ Redistributable is not needed for client apps to run (the logging functionality is a exception though). (#14). The EmptyLogSource class was added, mostly for using it instead of LogSource in release builds of client apps. A memory issue which was fixed for hooks in v3.0.1 was fixed for logging as well. v3.0.2 (July 1, 2022) Windows x86 support was fixed (#10). The functions in UioHook which return system properties now return int instead of long. This is a tiny breaking change, but I believe it's too small to warrant a bump of the major (or even minor) version. v3.0.1 (June 25, 2022) A memory issue which arose only when debugging was fixed (#12). libuiohook was updated to commit de3f683. v3.0.0 (March 27, 2022) The ability to get libuiohook logs was added. Event simulation now ignores event masks not only on Windows, but everywhere, and returns a result. UioHookEvent.Time now contains the event's UNIX timestamp. IGlobalHook and IReactiveGlobalHook now contain the IsDisposed property. The HookEvent<TArgs> class was removed from SharpHook.Reactive. Several minor (but breaking) changes in the UioHook class. libuiohook is now at version 1.3 and commit a887cde. v2.0.0 (February 4, 2022) Global hooks now support both blocking and non-blocking running via the Run and RunAsync methods, and the Start method was removed. Support for suppressing event propagation. UioHookEvent.Time now has the correct type - ulong instead of ushort. Global hooks now throw an exception if they are started when already running. v1.1.0 (December 4, 2021) Cross-platform input event simulation using libuiohook. Support for Windows on Arm64. MouseWheelEventData.Rotation now has the correct type - short instead of ushort. This is a tiny breaking change, but had to be fixed. libuiohook was updated to commit 5cf864d. v1.0.1 (November 21, 2021) libuiohook was updated to commit 28ccf9c. v1.0.0 (November 8, 2021) This release is basically the same as v1.0.0 Preview 4, but built with a GA release of .NET 6. v1.0.0 Preview 4 (November 6, 2021) When Dispose on global hooks is called, they now reset the static hook callback function. HookDisabled is now emitted correctly for reactive global hooks. The assemblies are now trimmable. v1.0.0 Preview 3 (November 1, 2021) IsRunning was added to SharpHook.IGlobalHook and SharpHook.Reactive.IReactiveGlobalHook. Dispose is now safe to call when the hook is not running for all implementations. libuiohook was updated to commit 4867b8e. v1.0.0 Preview 2 (October 26, 2021) SharpHook.Native.ModifierMask.None was added. Package descriptions were fixed. v1.0.0 Preview 1 (October 26, 2021) The basic functionality is implemented: native functions, default global hooks, and reactive global hooks. libuiohook is at commit e2c581f."
  },
  "articles/hooks.html": {
    "href": "articles/hooks.html",
    "title": "Global Hooks | SharpHook",
    "keywords": "Global Hooks The Interface SharpHook provides the SharpHook.IGlobalHook interface along with two default implementations which you can use to control the hook and subscribe to its events. This way is preferred to using native functions since it's more convenient. Here's a basic usage example: using SharpHook; // ... var hook = new TaskPoolGlobalHook(); hook.HookEnabled += OnHookEnabled; // EventHandler<HookEventArgs> hook.HookDisabled += OnHookDisabled; // EventHandler<HookEventArgs> hook.KeyTyped += OnKeyTyped; // EventHandler<KeyboardHookEventArgs> hook.KeyPressed += OnKeyPressed; // EventHandler<KeyboardHookEventArgs> hook.KeyReleased += OnKeyReleased; // EventHandler<KeyboardHookEventArgs> hook.MouseClicked += OnMouseClicked; // EventHandler<MouseHookEventArgs> hook.MousePressed += OnMousePressed; // EventHandler<MouseHookEventArgs> hook.MouseReleased += OnMouseReleased; // EventHandler<MouseHookEventArgs> hook.MouseMoved += OnMouseMoved; // EventHandler<MouseHookEventArgs> hook.MouseDragged += OnMouseDragged; // EventHandler<MouseHookEventArgs> hook.MouseWheel += OnMouseWheel; // EventHandler<MouseWheelHookEventArgs> hook.Run(); // or await hook.RunAsync(); IGlobalHook contains separate events for every event type that can be raised by libuiohook. The sender of these events is the IGlobalHook itself. It also contains the Run and RunAsync methods which, well, run the global hook. Run runs it on the current thread, blocking it until the global hook is disposed. RunAsync runs the global hook in a non-blocking way and returns a Task - this task is finished when the hook is destroyed. Since the underlying native API is blocking, the only way to run the hook in a non-blocking way is to run it on a separate thread, and all default implementations do just that. You can specify in the hook constructors whether RunAsync should create a background thread or not. Background threads don't block the application from exiting if all other threads have finished executing. By default the created thread will not be a background thread. You can subscribe to events after the hook is started. If you run the hook when it's already running, then an exception will be thrown. You can check whether a hook is running using its IsRunning property. IGlobalHook extends IDisposable. When you call the Dispose method on a hook, it's destroyed. The contract of the interface is that once a hook has been destroyed, it cannot be started again - you'll have to create a new instance. Calling Dispose when the hook is not running is safe - it just won't do anything (other than marking the instance as disposed). You can check whether the hook is disposed using the IsDisposed property. Hook events are of type HookEvent or a derived type which contains more info. It's possible to suppress event propagation by setting the SuppressEvent property to true inside the event handler. This must be done synchronously and is only supported on Windows and macOS. Important: Always use one instance of IGlobalHook at a time in the entire application since they all must use the same static method to set the hook callback for libuiohook, so there may only be one callback at a time. The Default Implementations SharpHook provides two implementations of IGlobalHook: SharpHook.SimpleGlobalHook runs all of its event handlers on the same thread on which the hook itself runs. This means that the handlers should generally be fast since they will block the hook from handling the events that follow if they run for too long. SharpHook.TaskPoolGlobalHook runs all of its event handlers on other threads inside the default thread pool for tasks. The parallelism level of the handlers can be configured. On backpressure it will queue the remaining handlers. This means that the hook will be able to process all events. This implementation should be preferred to SimpleGlobalHook except for very simple use-cases. But it has a downside - suppressing event propagation will be ignored since event handlers are run on other threads. The library also provides the SharpHook.GlobalHookBase class which you can extend to create your own implementation of the global hook. It calls the appropriate event handlers, and you only need to implement a strategy for dispatching the events. It also contains a destructor which will stop the global hook if this object is not reachable anymore."
  },
  "articles/logging.html": {
    "href": "articles/logging.html",
    "title": "Logging | SharpHook",
    "keywords": "Logging libuiohook can log messages throughout its execution. By default the messages are not logged anywhere, but you can get these logs by using UioHook.SetLoggerProc, or the ILogSource interface and its default implementation, LogSource. libuiohook logs contain the log level (debug, info, warning, error), message format, and message arguments. The message structure is the following: function [line]: message function is the function name in the libuiohook source code, and line is the source code line. Using High-Level Types The easiest way to subscribe to libuiohook's logs is to use the LogSource class and its interface - ILogSource. The interface contains the MessageLogged event, and extends IDisposable. Calling the Dispose method will stop the log source from receiving the logs. The IsDisposed property is also available. LogSource also contains the MinLevel property which can be set to filter log messages by level. It's not recommended to use the debug level for long periods of time since a debug message is logged for every single input event. Here's a usage example: using SharpHook.Logging; using SharpHook.Native; // ... var logSource = LogSource.Register(minLevel: LogLevel.Info); logSource.MessageLogged += this.OnMessageLogged; private void OnMessageLogged(object? sender, LogEventArgs e) => this.logger.Log(this.AdaptLogLevel(e.LogEntry.Level), e.LogEntry.FullText); You can get an instance of LogSource by using the static Register method. Important: Always use one instance of LogSource at a time in the entire application since they all must use the same static method to set the log callback for libuiohook, and there may only be one callback at a time. The MessageLogged event contains event args of type LogEventArgs which contains just one property of type LogEntry. This class contains the actual log message. The simplest way to use LogEntry is to use its Level and FullText properties. FullText is created using the log message format and arguments so you don't have to do it yourself. You can dispose of a log source to stop receiving libuiohook messages. You should keep a reference to an instance of LogSource when you use it since it will stop receiving messages when garbage collector deletes it, to avoid memory leaks. SharpHook.Reactive contains the IReactiveLogSource and its implementation - ReactiveLogSourceAdapter. Here's a usage example: using SharpHook.Logging; using SharpHook.Native; using SharpHook.Reactive.Logging; // ... var logSource = LogSource.Register(minLevel: LogLevel.Info); var reactiveLogSource = new ReactiveLogSourceAdapter(logSource); reactiveLogSource.MessageLogged.Subscribe(this.OnMessageLogged); IReactiveLogSource is basically the same as ILogSource, but MessageLogged is an observable of LogEntry instead of an event. ReactiveLogSourceAdapter adapts an ILogSource to the IReactiveLogSource interface. Using the Low-Level Functionality The logging functionality works by using UioHook.SetLoggerProc. This method sets the log callback - a delegate of type LoggerProc, which will be called to log the messages of libuiohook. LoggerProc receives the log level, a pointer to the message format, and a pointer the message arguments. It also receives a pointer to user-supplied data (which is set in the UioHook.SetLoggerProc), but you shouldn't ever use that. It is highly recommended to use LogEntryParser in order to create a log entry out of the pointers to the message format and arguments. This way you won't have to handle these pointers directly. The problem with handling them directly is that the log callback receives a variable number of arguments. In C# you can use the params keyword for that, but native functions do that in an entirely different way, and .NET doesn't have a default way to handle that (there is an undocumented __arglist keyword, but it can't be used in delegates and callbacks). LogEntryParser handles all that - its code is based on the log handling code of LibVLCSharp. Basically it calls the native vsprintf function from the C runtime and lets it deal with formatting the log message with native variable arguments. It then parses the log message and the log format and extracts the arguments. If you want to use your own callback then its form should be the following: private readonly LogEntryParser parser = new(); // ... private void OnLog(LogLevel level, IntPtr userData, IntPtr format, IntPtr args) { // Filter by log level if needed var logEntry = this.parser.ParseNativeLogEntry(level, format, args); // Handle the log entry instead of the native format and arguments } Note: Since LogEntryParser uses the C runtime, it requires the Visual C++ Redistributable package on Windows, unlike the rest of SharpHook. If you don't want your app to be dependent on this package, then you can use the EmptyLogSource class instead of LogSource in release builds of your app. EmptyLogSource implements ILogSource, but never raises the MessageLogged event and doesn't subscribe to libuiohook logs. Advanced Usage If you use structured logging then you may want to use the message format and arguments directly, instead of using the formatted result. LogEntry contains properties which can help you with that: Format - the format of the log message which can be passed to String.Format. RawFormat - the raw native format of the log message (which uses argument placeholders for C's printf function). Arguments - the strongly-typed arguments of the log message. RawArguments - the arguments of the log message as they appear in the formatted log message. ArgumentPlaceholders - the placeholders extracted from the native log format (e.g. %d for a number). String.Format(entry.Format, entry.RawAguments.ToArray()) is equal to entry.FullText. String.Format(entry.Format, entry.Aguments.ToArray()) is not necessarily equal to entry.FullText since some formatting information is discarded, but using Arguments instead of RawArguments is better suited for structured logging. Arguments contains parsed message arguments which can be of one of the types listed below, according to the argument placeholders. Only the specifier and length are considered (see the C's printf docs for reference). Type Placeholder int %d, %i sbyte %hhd, %hhi short %hd, %hi long %ld, %li, %lld, %lli, %jd, %ji uint %u, %o, %x, %X byte %hhu, %hho, %hhx, %hhX ushort %hu, %ho, %hx, %hX ulong %lu, %lo, %lx, %lX, %llu, %llo, %llx, %llX, %ju, %jo, %jx, %jX double %f, %F, %e, %E, %g, %G decimal %Lf, %LF, %Le, %LE, %Lg, %LG char %c IntPtr %p string Any other placeholder, including %s The %a, %A, and %n specifiers are not supported, as well as length z and t. LogEntry also contains the Function and SourceLine properties. These are the first two arguments of the log message - the function name in the libuiohook source code, and the source code line."
  },
  "articles/migration.html": {
    "href": "articles/migration.html",
    "title": "Migration Guide | SharpHook",
    "keywords": "Migration Guide Version 3 to 4 Version 4 contains a couple breaking changes, so you may need to change your code to upgrade. The biggest change is that simulating mouse button pressing/releasing now requires mouse pointer coordinates. They were actually always required by libuiohook, so previously the buttons were always pressed/released at (0, 0). EventSimulator.SimulateMousePress and EventSimulator.SimulateMouseRelease now have the following parameters: short x, short y, MouseButton button. HookEventArgs doesn't contain the Reserved property anymore as its purpose wasn't really clear. Now HookEventArgs contains the SuppressEvent property - set it to true inside an event handler to suppress the event. On .NET 7 [LibraryImport] is now used instead of [DllImport]. This change required making UioHookEvent a blittable type, and as a result, the type of KeyboardEventData.KeyChar was changed from char to ushort. The field should still be used as a char. Explicit targets for .NET 5 and .NET Core 3.1 were removed, though the library can be used on those platforms through .NET Standard. KeyCode.VcPrintscreen was renamed to KeyCode.VcPrintScreen. When simulating mouse wheel events on Windows, their rotation value was previously multiplied by 120. This behavior was removed. The ability to make RunAsync create a background thread was added - you can now specify that a running hook won't stop the application from exiting if all other threads have finished executing. Versioned libuiohook binaries for macOS and Linux were removed from the NuGet package as they were bit-for-bit same as the unversioned binaries. Version 2 to 3 Version 3 contains several breaking changes, so you may need to change your code to upgrade. libuiohook is now at version 1.3 and contains breaking changes which propagated to the UioHook class and a few other types. UioHook.SetDispatchProc now receives a pointer to user-supplied data. This pointer is then passed to the callback, so DispatchProc also receives it. You shouldn't ever use this functionality (you should pass IntPtr.Zero to SetDispatchProc). View the article about low-level features for more info. Previously event masks were ignored when simulating events on Windows. Now event masks are always ignored when simulating events, so the methods of IEventSimulator and EventSimulator don't have the optional second parameter which specifies the event's mask anymore. It's not possible to simulate Windows events with masks directly the way macOS and Linux allow it, so this functionality was removed from libuiohook on other OSes as well. UioHook.PostEvent now returns UioHookResult instead of being void. Thus, all methods of IEventSimulator and EventSimulator also return UioHookResult. UioHookEvent.Time now contains the event's UNIX timestamp, and HookEventArgs now contains the EventTime property - a DateTimeOffset object derived from the timestamp. You can now get libuiohook logs if you need to log its execution, which was not possible before. Other changes were done independently of libuiohook. IGlobalHook and IReactiveGlobalHook now contain the IsDisposed property. The HookEvent<TArgs> class was removed from SharpHook.Reactive. The observables of IReactiveGlobalHook now emit HookEventArgs or a derived type directly. If you need the sender of the event, then use closures. Version 1 to 2 In order to migrate from version 1 to version 2 there are several things that should be done - they are all quite small. The Start method was removed from IGlobalHook and IReactiveGlobalHook. Instead these interfaces now provide two methods: Run and RunAsync. Run is for running the global hook on the same thread and blocking that thread. RunAsync behaves the same way that Start did before - it starts the hook on a separate thread and doesn't block the calling thread. Replace the invocation of Start to the invocation of RunAsync on a global hook if you simply want to keep the previous behavior. EmptyDispatchProc was removed from UioHook. If you want to unset the hook callback function, then call UioHook.SetDispatchProc(null). The type of UioHookEvent.Reserved was changed from ushort to a ushort-based enum so that its possible values are more clear. The type of UioHookEvent.Time previously was ushort which was wrong. It was corrected to ulong. Note that this field does not contain the event's timestamp. The global hooks now throw an exception if the hook is started when it's already running. Also, possible exceptions are now part of the interface definition. All unexpected exceptions that can happen when starting and stopping the hook are now wrapped into HookException with the value of UioHookResult.Failure."
  },
  "articles/native.html": {
    "href": "articles/native.html",
    "title": "Native Functions | SharpHook",
    "keywords": "Native Functions This article describes how to use the low-level stuff provided by SharpHook. SharpHook exposes the functions of libuiohook in the SharpHook.Native.UioHook class. The SharpHook.Native namespace also contains types which represent the data used by libuiohook. In general, you don't need to use the native methods directly. Instead, use the higher-level interfaces and classes provided by SharpHook. However, you should still read this article to know how the high-level features work under the hood. Note: Starting with version 3.1.0 the libuiohook build used by SharpHook on Windows is statically linked to the C runtime which means that client apps don't need the Visual C++ Redistributable package. An exception is the logging functionality - this is explained further in the article about logging. Working with the Hook Itself UioHook contains the following methods for working with the global hook: SetDispatchProc (hook_set_dispatch_proc) - sets the function which will be called when an event is raised by libuiohook. Run (hook_run) - creates a global hook and runs it on the current thread, blocking it until Stop is called. Stop (hook_stop) - destroys the global hook. You have to remember that only one global hook can exist at a time since calling SetDispatchProc will override the previously set one. SetDispatchProc accepts a delegate of type SharpHook.Native.DispatchProc. This delegate in turn accepts a SharpHook.Native.UioHookEvent by reference, and returns nothing. You can pass null to SetDispatchProc in order to unset the callback function. Note that on macOS running the global hook requires that the main run-loop is present. libuiohook takes care of it if the hook is run on the main thread. It's also taken care of by UI frameworks since they need an event loop on the main thread to run. But if you're using a global hook in a console app or a background service and want to run it on some thread other than the main one then you should take care of it yourself. You can do that e.g. by P/Invoking the native CFRunLoopRun function. Input Events The SharpHook.Native.UioHookEvent struct contains information about events that have occured. There are several event types supported by libuiohook (contained in the event's Type field and defined in the SharpHook.Native.EventType enum). Following are the general-purpose events: HookEnabled - raised when the Run method is called. HookDisabled - raised when the Stop method is called. Following are the keyboard events, and UioHookEvent will contain more infomration in its Keyboard field: KeyPressed - raised when a key is pressed. KeyReleased - raised when a key is released. KeyTyped - raised when a character is typed using the keyboard. Following are the mouse events, and UioHookEvent will contain more infomration in its Mouse field: MouseClicked - raised when a mouse button is clicked. MousePressed - raised when a mouse button is pressed. MouseReleased - raised when a mouse button is released. MouseMoved - raised when the mouse cursor is moved. MouseDragged - raised when the mouse cursor is dragged. And the last one is also a mouse event, but UioHookEvent will contain more information in its Wheel field since it has more information: MouseWheel - raised when the mouse wheel is scrolled. EventType defines three more types, but they are used only when simulating events. UioHookEvent also contains the Time and Mask fields. Time is the event's UNIX timestamp. Mask contains the state of keyboard modifiers and the mouse state at the time of the event. Lastly, UioHookEvent contains the Reserved field. This field can be set inside the event handler and libuiohook will consume it. Currently only one setting is supported - suppressing the event propagation. If it's set then libuiohook will not propagate the event further and it will effectively be blocked. The Reserved field should be set synchronously i.e. on the same thread which handles the event. Supressing events works only on Windows and macOS. An application manifest is required on Windows to enable DPI awareness for your app. If it's not enabled then mouse coordinates will be wrong on high-DPI screens. You can look at the sample app in the SharpHook repository to see the manifest example. Windows defines a single 'step' of a mouse wheel as rotation value 120. Simulating Input Events UioHook contains the PostEvent method for simulating input events. It accepts a UioHookEvent, but it doesn't need all its fields. Only Type and Keyboard/Mouse/Wheel should be present. PostEvent returns UioHookResult to indicate whether it was successful or not. The following table describes the specifics of simulating each event type. Event type Description HookEnabled Events of this type are ignored. HookDisabled Events of this type are ignored. KeyPressed Only KeyboardEventData.KeyCode is considered. KeyReleased Only KeyboardEventData.KeyCode is considered. KeyTyped Events of this type are ignored. MousePressed Only MouseWheelEventData.X, MouseWheelEventData.Y, and MouseEventData.Button are considered. MousePressedIgnoreCoordinates Only MouseEventData.Button is considered. MouseReleased Only MouseWheelEventData.X, MouseWheelEventData.Y, and MouseEventData.Button are considered. MouseReleasedIgnoreCoordinates Only MouseEventData.Button is considered. MouseClicked Events of this type are ignored. MouseMoved Only MouseEventData.X and MouseEventData.Y are considered. MouseMovedRelativeToCursor Only MouseEventData.X and MouseEventData.Y are considered. MouseDragged Not recommended to use; same as MouseMoved. MouseWheel Only MouseWheelEventData.Amount and MouseWheelEventData.Rotation are considered. Mouse wheel simulation is a little inconsistent across platforms, and not documented. View the source code of libuiohook for more details. Logging libuiohook can log messages throughout its execution. By default it doesn't log anything, but UioHook contains the SetLoggerProc method to set the log callback function - it will be called by libuiohook to log messages. SetLoggerProc accepts a delegate of type SharpHook.Native.LoggerProc. This delegate in turn accepts a log level, the message format (as a pointer) and arguments (also as a pointer). You can read more about how to use the SetLoggerProc method in the article about logging, though it's not recommended to use it directly. Passing Custom Data to Callbacks SetDispatchProc and SetLoggerProc also receive a pointer to user-supplied data. It is then passed to the callbacks - both DispatcherProc and LoggerProc receive user-supplied data as well. Do not use them. You should always pass IntPtr.Zero to SetDispatchProc and SetLoggerProc and not use the respective parameters in the callbacks. The reason is that in order to use pointers to managed objects, they have to be pinned. As these callbacks tend to be long-lived (probably as long as the program itself), the objects will have to be pinned for a long time as well, and that's detrimental to the performance of the garbage collector and the memory layout of the program. If you need to pass custom data to the callbacks then simply use closures. This feature was created with the C language in mind, and C doesn't have closures. Other Functions libuiohook also provides functions which get various pieces of information about the system, and are listed below: CreateScreenInfo (hook_create_screen_info) GetAutoRepeatRate (hook_get_auto_repeat_rate) GetAutoRepeatDelay (hook_get_auto_repeat_delay) GetPointerAccelerationMultiplier (hook_get_pointer_acceleration_multiplier) GetPointerAccelerationThreshold (hook_get_pointer_acceleration_threshold) GetPointerSensitivity (hook_get_pointer_sensitivity) GetMultiClickTime (hook_get_multi_click_time) These functions are quite straightforward, except for CreateScreenInfo. UioHook defines two versions of this function. One is a native function which returns an unmanaged array of ScreenData objects (as an IntPtr) along with its length in an output parameter. Another is a wrapper which returs a managed array. Use the second one if you need it since it's safer. If you decide to use the native version then you must free the returned memory manually."
  },
  "articles/reactive.html": {
    "href": "articles/reactive.html",
    "title": "Reactive Global Hooks | SharpHook",
    "keywords": "Reactive Global Hooks If you're using Rx.NET, you can use the SharpHook.Reactive package to integrate SharpHook with Rx.NET. Using this package is preferred when possible since it's more powerful. The Interface SharpHook.Reactive provides the SharpHook.Reactive.IReactiveGlobalHook interface along with a default implementation which you can use to use to control the hook and subscribe to its observables. Here's a basic example: using SharpHook.Reactive; // ... var hook = new SimpleReactiveGlobalHook(); hook.HookEnabled.Subscribe(OnHookEnabled); hook.HookDisabled.Subscribe(OnHookDisabled); hook.KeyTyped.Subscribe(OnKeyTyped); hook.KeyPressed.Subscribe(OnKeyPressed); hook.KeyReleased.Subscribe(OnKeyReleased); hook.MouseClicked.Subscribe(OnMouseClicked); hook.MousePressed.Subscribe(OnMousePressed); hook.MouseReleased.Subscribe(OnMouseReleased); hook.MouseMoved .Throttle(TimeSpan.FromSeconds(0.5)) .Subscribe(OnMouseMoved); hook.MouseDragged .Throttle(TimeSpan.FromSeconds(0.5)) .Subscribe(OnMouseDragged); hook.MouseWheel.Subscribe(OnMouseWheel); hook.Run(); // or hook.RunAsync().Subscribe(); The observables for events emit the EventArgs-derived types which are the same as in the events of IGlobalHook. Unlike IGlobalHook you can't get the sender of the event by default. If you need to pass the hook itself as well, then use a closure. The HookEnabled and HookDisabled observables will emit a single event and then immediately complete afterwards. The Run and RunAsync methods are basically the same as in IGlobalHook, but RunAsync returns an IObservable<Unit> instead of a Task (the observable is hot). This observable will emit a single value and then complete when the global hook is destroyed. Running the hook when it's already running is also not allowed, and the IsRunning property is also available. IReactiveGlobalHook extends IDisposable as well and calling Dispose will destroy the global hook. As with IGlobalHook, starting a disposed instance again shouldn't be allowed. Calling Dispose when the hook is not running is safe - it just won't do anything (other than marking the instance as disposed). The IsDisposed property is also available. The Default Implementations SharpHook.Reactive provides two implementations of IReactiveGlobalHook: SharpHook.Reactive.SimpleReactiveGlobalHook. Since we're dealing with observables, it's up to you to decide when and where to handle the events through schedulers. SharpHook.Reactive.ReactiveGlobalHookAdapter adapts an IGlobalHook to IReactiveGlobalHook. All subscriptions and changes are propagated to the adapted hook. There is no default adapter from IReactiveGlobalHook to IGlobalHook. Both classes contain a destructor which will stop the global hook if the object is not reachable anymore. All event observables of both classes will be completed when the hook is destroyed, be it from the Dispose method, or from the destructor."
  },
  "articles/simulation.html": {
    "href": "articles/simulation.html",
    "title": "Event Simulation | SharpHook",
    "keywords": "Event Simulation SharpHook provides the ability to simulate keyboard and mouse events in a cross-platform way as well. It provides the IEventSimulator interface, and the default implementation, EventSimulator, which calls UioHook.PostEvent to simulate the events. The methods in this interface return a UioHookResult to specify whether the event was simulated successfully, or not. Here's a quick example: using SharpHook; using SharpHook.Native; // ... var simulator = new EventSimulator(); // Press Ctrl+C simulator.SimulateKeyPress(KeyCode.VcLeftControl); simulator.SimulateKeyPress(KeyCode.VcC); // Release Ctrl+C simulator.SimulateKeyRelease(KeyCode.VcC); simulator.SimulateKeyRelease(KeyCode.VcLeftControl); // Press the left mouse button simulator.SimulateMousePress(MouseButton.Button1); // Release the left mouse button simulator.SimulateMouseRelease(MouseButton.Button1); // Move the mouse pointer to (0, 0) simulator.SimulateMouseMovement(0, 0); // Move the mouse pointer 50 pixels to the right and 100 pixels down simulator.SimulateMouseMovementRelative(50, 100); // Scroll the mouse wheel simulator.SimulateMouseWheel(2, -120); Windows defines a single 'step' of a mouse wheel as rotation value 120. Mouse wheel simulation is a little inconsistent across platforms, and not documented. View the source code of libuiohook for more details."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | SharpHook",
    "keywords": "Introduction SharpHook provides a cross-platform global keyboard and mouse hook, event simulation, and text entry for .NET. It is a wrapper of libuiohook and provides direct access to its features as well as higher-level types to work with it. The docs can help you learn how to use this library. Installation dotnet add package SharpHook --version 5.0.0 dotnet add package SharpHook.Reactive --version 5.0.0 Supported Platforms SharpHook targets .NET 6+, .NET Framework 4.6.1+, and .NET Standard 2.0. The following table describes the availability of SharpHook on various platforms: Windows macOS Linux x86 Yes N/A No1 x64 Yes Yes Yes Arm32 No2 N/A Yes Arm64 Yes Yes Yes [1] - Linux on x86 is not supported by .NET itself. [2] - Windows Arm32 support was dropped in .NET 5. libuiohook only supports X11 on Linux. Wayland support may be coming, but it's not yet here."
  }
}