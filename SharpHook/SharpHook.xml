<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpHook</name>
    </assembly>
    <members>
        <member name="T:SharpHook.EventSimulator">
            <summary>
            A keyboard and mouse event simulator which posts events to a simulation provider (libuiohook by default).
            </summary>
            <param name="simulationProvider">
            The simulation functionality provider (or <see cref="P:SharpHook.Providers.UioHookProvider.Instance" /> if <see langword="null" />).
            </param>
            <seealso cref="T:SharpHook.Providers.IEventSimulationProvider" />
            <seealso cref="M:SharpHook.Native.UioHook.PostEvent(SharpHook.Native.UioHookEvent@)" />
        </member>
        <member name="M:SharpHook.EventSimulator.#ctor(SharpHook.Providers.IEventSimulationProvider)">
            <summary>
            A keyboard and mouse event simulator which posts events to a simulation provider (libuiohook by default).
            </summary>
            <param name="simulationProvider">
            The simulation functionality provider (or <see cref="P:SharpHook.Providers.UioHookProvider.Instance" /> if <see langword="null" />).
            </param>
            <seealso cref="T:SharpHook.Providers.IEventSimulationProvider" />
            <seealso cref="M:SharpHook.Native.UioHook.PostEvent(SharpHook.Native.UioHookEvent@)" />
        </member>
        <member name="M:SharpHook.EventSimulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.EventSimulator" /> class.
            </summary>
        </member>
        <member name="P:SharpHook.EventSimulator.TextSimulationDelayOnX11">
            <summary>
            Gets or sets the delay between simulating individual characters when simulating text on Linux.
            </summary>
            <value>The delay between simulating individual characters when simulating text on Linux.</value>
            <remarks>
            <para>
            X11 doesn't support simulating arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this property is ignored.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value" /> represents a negative time span.
            </exception>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateKeyPress(SharpHook.Native.KeyCode)">
            <summary>
            Simulates pressing a key.
            </summary>
            <param name="keyCode">The code of the key to press.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateKeyRelease(SharpHook.Native.KeyCode)">
            <summary>
            Simulates releasing a key.
            </summary>
            <param name="keyCode">The code of the key to release.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateTextEntry(System.String)">
            <summary>
            Simulates the input of arbitrary Unicode characters.
            </summary>
            <param name="text">The text to simulate.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including
            surrogate pairs, e.g. emojis) is supported.
            </para>
            <para>
            On Windows text simulation should work correctly and consistently.
            </para>
            <para>
            On macOS applications are not required to process text simulation, but most of them should handle it correctly.
            </para>
            <para>
            X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to
            that character, and then key press/release is simulated. Since the receiving application must react to the
            remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text
            simulation on Linux works slowly and is not guaranteed to be correct. <see cref="P:SharpHook.EventSimulator.TextSimulationDelayOnX11" />
            can be used to increase (or decrease) the delay if needed - longer delays add consistency but may be more
            jarring to end users. <see cref="P:SharpHook.EventSimulator.TextSimulationDelayOnX11" /> can also be used to get the currently configured
            delay - the default is 50 milliseconds.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMousePress(SharpHook.Native.MouseButton)">
            <summary>
            Simulates pressing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to press.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMousePress(SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates pressing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to press.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMousePress(System.Int16,System.Int16,SharpHook.Native.MouseButton)">
            <summary>
            Simulates pressing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to press.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMousePress(System.Int16,System.Int16,SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates pressing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to press.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMouseRelease(SharpHook.Native.MouseButton)">
            <summary>
            Simulates releasing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to release.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMouseRelease(SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates releasing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to release.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMouseRelease(System.Int16,System.Int16,SharpHook.Native.MouseButton)">
            <summary>
            Simulates releasing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to release.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMouseRelease(System.Int16,System.Int16,SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates releasing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to release.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMouseMovement(System.Int16,System.Int16)">
            <summary>
            Simulates moving a mouse pointer.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMouseMovementRelative(System.Int16,System.Int16)">
            <summary>
            Simulates moving a mouse pointer relative to the current cursor position.
            </summary>
            <param name="x">The X-coordinate offset.</param>
            <param name="y">The Y-coordinate offset.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.EventSimulator.SimulateMouseWheel(System.Int16,SharpHook.Native.MouseWheelScrollDirection,SharpHook.Native.MouseWheelScrollType)">
            <summary>
            Simulates scrolling the mouse wheel.
            </summary>
            <param name="rotation">
            The wheel rotation. A positive value indicates that the wheel will be rotated up or left,
            and a negative value indicates that the wheel will be rotated down or right.
            </param>
            <param name="direction">The scroll direction.</param>
            <param name="type">The scroll type (considered only on macOS).</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            On Windows the value <c>120</c> represents the default wheel step. As such, multiples of <c>120</c> can be used,
            but it's not required. The value of <paramref name="type" /> is ignored.
            </para>
            <para>
            On macOS it's recommended to use values between <c>-10</c> and <c>10</c>. This will result in quite a small
            scroll amount with pixel scrolling, so <see cref="F:SharpHook.Native.MouseWheelScrollType.BlockScroll" /> is recommended for line
            scrolling instead of pixel scrolling.
            </para>
            <para>
            On Linux there is no fixed recommendation, but multiples of <c>100</c> can be used. The value of
            <paramref name="type" /> is ignored.
            </para>
            </remarks>
        </member>
        <member name="T:SharpHook.GlobalHookBase">
            <summary>
            Represents an abstract implementation of <see cref="T:SharpHook.IGlobalHook" /> which defines everything needed except for
            a strategy for dispatching events and uses a global hook provider (libuiohook by default).
            </summary>
            <seealso cref="T:SharpHook.IGlobalHook" />
            <seealso cref="T:SharpHook.SimpleGlobalHook" />
            <seealso cref="T:SharpHook.TaskPoolGlobalHook" />
        </member>
        <member name="M:SharpHook.GlobalHookBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.GlobalHookBase" />.
            </summary>
        </member>
        <member name="M:SharpHook.GlobalHookBase.#ctor(SharpHook.Providers.IGlobalHookProvider)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.GlobalHookBase" />.
            </summary>
            <param name="globalHookProvider">
            The underlying global hook provider, or <see langword="null" /> to use the default one.
            </param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.GlobalHookBase" />.
            </summary>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.#ctor(SharpHook.Providers.IGlobalHookProvider,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.GlobalHookBase" />.
            </summary>
            <param name="globalHookProvider">
            The underlying global hook provider, or <see langword="null" /> to use the default one.
            </param>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.#ctor(SharpHook.GlobalHookType,SharpHook.Providers.IGlobalHookProvider,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.GlobalHookBase" />.
            </summary>
            <param name="globalHookType">The global hook type.</param>
            <param name="globalHookProvider">
            The underlying global hook provider, or <see langword="null" /> to use the default one.
            </param>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.Finalize">
            <summary>
            Destroys the global hook if it's running.
            </summary>
        </member>
        <member name="P:SharpHook.GlobalHookBase.IsRunning">
            <summary>
            Gets the value which indicates whether the global hook is running.
            </summary>
            <value><see langword="true" /> if the global hook is running. Otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:SharpHook.GlobalHookBase.IsDisposed">
            <summary>
            Gets the value which indicates whether the global hook is disposed.
            </summary>
            <value><see langword="true" /> if the global hook is disposed. Otherwise, <see langword="false" />.</value>
            <remarks>A disposed global hook cannot be started again.</remarks>
        </member>
        <member name="M:SharpHook.GlobalHookBase.Run">
            <summary>
            Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the
            <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
            <exception cref="T:SharpHook.HookException">Starting the global hook has failed.</exception>
            <exception cref="T:System.InvalidOperationException">The global hook is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">The global hook has been disposed.</exception>
        </member>
        <member name="M:SharpHook.GlobalHookBase.RunAsync">
            <summary>
            Runs the global hook without blocking the current thread. The hook can be destroyed by calling the
            <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which finishes when the hook is destroyed.</returns>
            <exception cref="T:SharpHook.HookException">Starting the global hook has failed.</exception>
            <exception cref="T:System.InvalidOperationException">The global hook is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">The global hook has been disposed.</exception>
            <remarks>The hook is started on a separate thread.</remarks>
        </member>
        <member name="M:SharpHook.GlobalHookBase.Dispose">
            <summary>
            Destroys the global hook.
            </summary>
            <exception cref="T:SharpHook.HookException">Stopping the hook has failed.</exception>
            <remarks>
            After calling this method, the hook cannot be started again. If you want to do that, create a new instance
            of <see cref="T:SharpHook.IGlobalHook" />.
            </remarks>
        </member>
        <member name="M:SharpHook.GlobalHookBase.HandleHookEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            When implemented in a derived class, represents a strategy for handling a hook event.
            </summary>
            <param name="e">The event to handle.</param>
            <remarks>
            Derived classes should call <see cref="M:SharpHook.GlobalHookBase.DispatchEvent(SharpHook.Native.UioHookEvent@)" /> inside this method to raise the
            appropriate event.
            </remarks>
        </member>
        <member name="M:SharpHook.GlobalHookBase.DispatchEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            Dispatches an event from libuiohook, i.e. raises the appropriate event.
            </summary>
            <param name="e">The event to dispatch.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnHookEnabled(SharpHook.HookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.HookEnabled" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnHookDisabled(SharpHook.HookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.HookDisabled" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnKeyTyped(SharpHook.KeyboardHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.KeyTyped" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnKeyPressed(SharpHook.KeyboardHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.KeyPressed" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnKeyReleased(SharpHook.KeyboardHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.KeyReleased" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnMouseClicked(SharpHook.MouseHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.MouseClicked" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnMousePressed(SharpHook.MouseHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.MousePressed" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnMouseReleased(SharpHook.MouseHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.MouseReleased" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnMouseMoved(SharpHook.MouseHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.MouseMoved" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnMouseDragged(SharpHook.MouseHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.MouseDragged" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.OnMouseWheel(SharpHook.MouseWheelHookEventArgs)">
            <summary>
            Raises the <see cref="E:SharpHook.GlobalHookBase.MouseWheel" /> event with this object as the sender.
            </summary>
            <param name="args">The arguments of the event.</param>
        </member>
        <member name="M:SharpHook.GlobalHookBase.Dispose(System.Boolean)">
            <summary>
            Destoys the global hook.
            </summary>
            <param name="disposing">
            <see langword="true" /> if the method is called from the <see cref="M:SharpHook.GlobalHookBase.Dispose" /> method.
            Otherwise, <see langword="false" />.
            </param>
            <exception cref="T:SharpHook.HookException">Stopping the hook has failed.</exception>
        </member>
        <member name="M:SharpHook.GlobalHookBase.ThrowIfDisposed(System.String)">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> if this object is disposed.
            </summary>
            <param name="method">The method which calls this method.</param>
        </member>
        <member name="E:SharpHook.GlobalHookBase.HookEnabled">
            <summary>
            An event which is raised when the global hook is enabled.
            </summary>
            <remarks>
            This event is raised when the <see cref="M:SharpHook.IGlobalHook.Run" /> or <see cref="M:SharpHook.IGlobalHook.RunAsync" /> method
            is called.
            </remarks>
        </member>
        <member name="E:SharpHook.GlobalHookBase.HookDisabled">
            <summary>
            An event which is raised when the global hook is disabled.
            </summary>
            <remarks>This event is raised when the <see cref="M:System.IDisposable.Dispose" /> method is called.</remarks>
        </member>
        <member name="E:SharpHook.GlobalHookBase.KeyTyped">
            <summary>
            An event which is raised when a key is typed.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.KeyPressed">
            <summary>
            An event which is raised when a key is pressed.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.KeyReleased">
            <summary>
            An event which is raised when a key is released.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.MouseClicked">
            <summary>
            An event which is raised when a mouse button is clicked.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.MousePressed">
            <summary>
            An event which is raised when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.MouseReleased">
            <summary>
            An event which is raised when a mouse button is released.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.MouseMoved">
            <summary>
            An event which is raised when the mouse cursor is moved.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.MouseDragged">
            <summary>
            An event which is raised when the mouse cursor is dragged.
            </summary>
        </member>
        <member name="E:SharpHook.GlobalHookBase.MouseWheel">
            <summary>
            An event which is raised when the mouse wheel is turned.
            </summary>
        </member>
        <member name="T:SharpHook.GlobalHookType">
            <summary>
            Represents a global hook type - keyboard hook, mouse hook, or both.
            </summary>
        </member>
        <member name="F:SharpHook.GlobalHookType.All">
            <summary>A global hook for both keyboard and mouse events.</summary>
        </member>
        <member name="F:SharpHook.GlobalHookType.Keyboard">
            <summary>A global hook for keyboard events only.</summary>
        </member>
        <member name="F:SharpHook.GlobalHookType.Mouse">
            <summary>A global hook for mouse events only.</summary>
        </member>
        <member name="T:SharpHook.HookEventArgs">
            <summary>
            A base class for event args related to the global hook.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.KeyboardHookEventArgs" />
            <seealso cref="T:SharpHook.MouseHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseWheelEventData" />
            <seealso cref="T:SharpHook.Native.UioHookEvent" />
        </member>
        <member name="M:SharpHook.HookEventArgs.#ctor(SharpHook.Native.UioHookEvent)">
            <summary>
            A base class for event args related to the global hook.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.KeyboardHookEventArgs" />
            <seealso cref="T:SharpHook.MouseHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseWheelEventData" />
            <seealso cref="T:SharpHook.Native.UioHookEvent" />
        </member>
        <member name="P:SharpHook.HookEventArgs.RawEvent">
            <summary>
            Gets the raw event data.
            </summary>
            <value>The raw event data.</value>
        </member>
        <member name="P:SharpHook.HookEventArgs.EventTime">
            <summary>
            Gets the date and time of the event (in UTC), derived from the event's UNIX timestamp.
            </summary>
            <value>The date and time of the event.</value>
        </member>
        <member name="P:SharpHook.HookEventArgs.IsEventSimulated">
            <summary>
            Gets the value which indicates whether the event has been simulated.
            </summary>
            <value><see langword="true" /> is the event has been simulated. Otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:SharpHook.HookEventArgs.SuppressEvent">
            <summary>
            Gets or sets whether to suppress the event from further propagation after running the event handler. Events must
            be suppressed synchronously. Suppressing events works only on Windows and macOS.
            </summary>
            <value>
            <see langword="true" /> if the event propagation should be suppressed. Otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:SharpHook.HookEventArgs.FromEvent(SharpHook.Native.UioHookEvent)">
            <summary>
            Creates a new instance of the <see cref="T:SharpHook.HookEventArgs" /> class or a derived class, depending on the
            event type.
            </summary>
            <param name="rawEvent">The raw event data.</param>
        </member>
        <member name="T:SharpHook.HookException">
            <summary>
            Represents an exception related to global hooks.
            </summary>
        </member>
        <member name="M:SharpHook.HookException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.HookException" /> class.
            </summary>
        </member>
        <member name="M:SharpHook.HookException.#ctor(SharpHook.Native.UioHookResult)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.HookException" /> class.
            </summary>
            <param name="result">The result of an opetaion which caused this exception.</param>
        </member>
        <member name="M:SharpHook.HookException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.HookException" /> class.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:SharpHook.HookException.#ctor(SharpHook.Native.UioHookResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.HookException" /> class.
            </summary>
            <param name="result">The result of an opetaion which caused this exception.</param>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:SharpHook.HookException.#ctor(SharpHook.Native.UioHookResult,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.HookException" /> class.
            </summary>
            <param name="result">The result of an opetaion which caused this exception.</param>
            <param name="innerException">The exception which caused this exception.</param>
        </member>
        <member name="M:SharpHook.HookException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.HookException" /> class.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The exception which caused this exception.</param>
        </member>
        <member name="M:SharpHook.HookException.#ctor(SharpHook.Native.UioHookResult,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpHook.HookException" /> class.
            </summary>
            <param name="result">The result of an opetaion which caused this exception.</param>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The exception which caused this exception.</param>
        </member>
        <member name="M:SharpHook.HookException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about this exception.
            </summary>
            <param name="info">The serialization info to set.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:SharpHook.HookException.Result">
            <summary>
            Gets the result of an opetaion which caused this exception.
            </summary>
            <value>The result of an opetaion which caused this exception.</value>
        </member>
        <member name="T:SharpHook.IEventSimulator">
            <summary>
            Represents an object which can simulate keyboard and mouse events.
            </summary>
            <remarks>
            The methods of this interface correspond to constants defined in the <see cref="T:SharpHook.Native.EventType" /> enum.
            </remarks>
        </member>
        <member name="P:SharpHook.IEventSimulator.TextSimulationDelayOnX11">
            <summary>
            Gets or sets the delay between simulating individual characters when simulating text on Linux.
            </summary>
            <value>The delay between simulating individual characters when simulating text on Linux.</value>
            <remarks>
            <para>
            X11 doesn't support simulating arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this property is ignored.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="value" /> represents a negative time span.
            </exception>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateKeyPress(SharpHook.Native.KeyCode)">
            <summary>
            Simulates pressing a key.
            </summary>
            <param name="keyCode">The code of the key to press.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateKeyRelease(SharpHook.Native.KeyCode)">
            <summary>
            Simulates releasing a key.
            </summary>
            <param name="keyCode">The code of the key to release.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateTextEntry(System.String)">
            <summary>
            Simulates the input of arbitrary Unicode characters.
            </summary>
            <param name="text">The text to simulate.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including
            surrogate pairs, e.g. emojis) is supported.
            </para>
            <para>
            On Windows text simulation should work correctly and consistently.
            </para>
            <para>
            On macOS applications are not required to process text simulation, but most of them should handle it correctly.
            </para>
            <para>
            X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to
            that character, and then key press/release is simulated. Since the receiving application must react to the
            remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text
            simulation on Linux works slowly and is not guaranteed to be correct. <see cref="P:SharpHook.IEventSimulator.TextSimulationDelayOnX11" />
            can be used to increase (or decrease) the delay if needed - longer delays add consistency but may be more
            jarring to end users. <see cref="P:SharpHook.IEventSimulator.TextSimulationDelayOnX11" /> can also be used to get the currently configured
            delay - the default is 50 milliseconds.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMousePress(SharpHook.Native.MouseButton)">
            <summary>
            Simulates pressing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to press.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMousePress(SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates pressing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to press.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMousePress(System.Int16,System.Int16,SharpHook.Native.MouseButton)">
            <summary>
            Simulates pressing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to press.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMousePress(System.Int16,System.Int16,SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates pressing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to press.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMouseRelease(SharpHook.Native.MouseButton)">
            <summary>
            Simulates releasing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to release.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMouseRelease(SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates releasing a mouse button at the current coordinates.
            </summary>
            <param name="button">The mouse button to release.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMouseRelease(System.Int16,System.Int16,SharpHook.Native.MouseButton)">
            <summary>
            Simulates releasing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to release.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMouseRelease(System.Int16,System.Int16,SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates releasing a mouse button at the specified coordinates.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to release.</param>
            <param name="clicks">The click count (used only on macOS).</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMouseMovement(System.Int16,System.Int16)">
            <summary>
            Simulates moving a mouse pointer.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMouseMovementRelative(System.Int16,System.Int16)">
            <summary>
            Simulates moving a mouse pointer relative to the current cursor position.
            </summary>
            <param name="x">The X-coordinate offset.</param>
            <param name="y">The Y-coordinate offset.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.IEventSimulator.SimulateMouseWheel(System.Int16,SharpHook.Native.MouseWheelScrollDirection,SharpHook.Native.MouseWheelScrollType)">
            <summary>
            Simulates scrolling the mouse wheel.
            </summary>
            <param name="rotation">
            The wheel rotation. A positive value indicates that the wheel will be rotated up or left,
            and a negative value indicates that the wheel will be rotated down or right.
            </param>
            <param name="direction">The scroll direction.</param>
            <param name="type">The scroll type (considered only on macOS).</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            On Windows the value <c>120</c> represents the default wheel step. As such, multiples of <c>120</c> can be used,
            but it's not required. The value of <paramref name="type" /> is ignored.
            </para>
            <para>
            On macOS it's recommended to use values between <c>-10</c> and <c>10</c>. This will result in quite a small
            scroll amount with pixel scrolling, so <see cref="F:SharpHook.Native.MouseWheelScrollType.BlockScroll" /> is recommended for line
            scrolling instead of pixel scrolling.
            </para>
            <para>
            On Linux there is no fixed recommendation, but multiples of <c>100</c> can be used. The value of
            <paramref name="type" /> is ignored.
            </para>
            </remarks>
        </member>
        <member name="T:SharpHook.IGlobalHook">
            <summary>
            Represents a global keyboard and mouse hook.
            </summary>
            <seealso cref="T:SharpHook.GlobalHookBase" />
            <seealso cref="T:SharpHook.SimpleGlobalHook" />
            <seealso cref="T:SharpHook.TaskPoolGlobalHook" />
        </member>
        <member name="P:SharpHook.IGlobalHook.IsRunning">
            <summary>
            Gets the value which indicates whether the global hook is running.
            </summary>
            <value><see langword="true" /> if the global hook is running. Otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:SharpHook.IGlobalHook.IsDisposed">
            <summary>
            Gets the value which indicates whether the global hook is disposed.
            </summary>
            <value><see langword="true" /> if the global hook is disposed. Otherwise, <see langword="false" />.</value>
            <remarks>A disposed global hook cannot be started again.</remarks>
        </member>
        <member name="M:SharpHook.IGlobalHook.Run">
            <summary>
            Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the
            <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
            <exception cref="T:SharpHook.HookException">Starting the global hook has failed.</exception>
            <exception cref="T:System.InvalidOperationException">The global hook is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">The global hook has been disposed.</exception>
        </member>
        <member name="M:SharpHook.IGlobalHook.RunAsync">
            <summary>
            Runs the global hook without blocking the current thread. The hook can be destroyed by calling the
            <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which finishes when the hook is destroyed.</returns>
            <exception cref="T:SharpHook.HookException">Starting the global hook has failed.</exception>
            <exception cref="T:System.InvalidOperationException">The global hook is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">The global hook has been disposed.</exception>
            <remarks>
            Since the underlying native API for running a global hook is blocking, the only way to run it without blocking
            the current thread is to run it on a separate thread.
            </remarks>
        </member>
        <member name="E:SharpHook.IGlobalHook.HookEnabled">
            <summary>
            An event which is raised when the global hook is enabled.
            </summary>
            <remarks>This event is raised when the <see cref="M:SharpHook.IGlobalHook.Run" /> or <see cref="M:SharpHook.IGlobalHook.RunAsync" /> method is called.</remarks>
        </member>
        <member name="E:SharpHook.IGlobalHook.HookDisabled">
            <summary>
            An event which is raised when the global hook is disabled.
            </summary>
            <remarks>This event is raised when the <see cref="M:System.IDisposable.Dispose" /> method is called.</remarks>
        </member>
        <member name="E:SharpHook.IGlobalHook.KeyTyped">
            <summary>
            An event which is raised when a key is typed.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.KeyPressed">
            <summary>
            An event which is raised when a key is pressed.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.KeyReleased">
            <summary>
            An event which is raised when a key is released.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.MouseClicked">
            <summary>
            An event which is raised when a mouse button is clicked.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.MousePressed">
            <summary>
            An event which is raised when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.MouseReleased">
            <summary>
            An event which is raised when a mouse button is released.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.MouseMoved">
            <summary>
            An event which is raised when the mouse cursor is moved.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.MouseDragged">
            <summary>
            An event which is raised when the mouse cursor is dragged.
            </summary>
        </member>
        <member name="E:SharpHook.IGlobalHook.MouseWheel">
            <summary>
            An event which is raised when the mouse wheel is scrolled.
            </summary>
        </member>
        <member name="T:SharpHook.KeyboardHookEventArgs">
            <summary>
            Event args for keyboard-related hook events.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.HookEventArgs" />
            <seealso cref="T:SharpHook.MouseHookEventArgs" />
            <seealso cref="T:SharpHook.MouseWheelHookEventArgs" />
            <seealso cref="T:SharpHook.Native.KeyboardEventData" />
        </member>
        <member name="M:SharpHook.KeyboardHookEventArgs.#ctor(SharpHook.Native.UioHookEvent)">
            <summary>
            Event args for keyboard-related hook events.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.HookEventArgs" />
            <seealso cref="T:SharpHook.MouseHookEventArgs" />
            <seealso cref="T:SharpHook.MouseWheelHookEventArgs" />
            <seealso cref="T:SharpHook.Native.KeyboardEventData" />
        </member>
        <member name="P:SharpHook.KeyboardHookEventArgs.Data">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:SharpHook.Logging.EmptyLogSource">
            <summary>
            Represents a souce of libuiohook logs which never raises any events.
            </summary>
            <remarks>
            This class exists primarily to be used instead of <see cref="T:SharpHook.Logging.LogSource" /> in release builds of client apps as they
            will most probably not need any logs from libuiohook. Also, unlike <see cref="T:SharpHook.Logging.LogSource" /> this class doesn't need
            the Visual C++ Redistributable package to be installed on Windows.
            </remarks>
            <seealso cref="T:SharpHook.Logging.ILogSource" />
            <seealso cref="T:SharpHook.Logging.LogSource" />
        </member>
        <member name="P:SharpHook.Logging.EmptyLogSource.IsDisposed">
            <summary>
            Gets the value which indicates whether the log source is disposed.
            </summary>
            <value><see langword="true" /> if the log source is disposed. Otherwise, <see langword="false" />.</value>
            <remarks>
            Since empty log sources don't do anything, it doesn't matter whether they are disposed.
            </remarks>
        </member>
        <member name="M:SharpHook.Logging.EmptyLogSource.Dispose">
            <summary>
            Marks this object as disposed.
            </summary>
            <remarks>
            Since empty log sources don't do anything, it doesn't matter whether they are disposed.
            </remarks>
        </member>
        <member name="E:SharpHook.Logging.EmptyLogSource.MessageLogged">
            <summary>
            An event which is never raised.
            </summary>
        </member>
        <member name="T:SharpHook.Logging.ILogSource">
            <summary>
            Represents a source of libuiohook logs.
            </summary>
            <seealso cref="T:SharpHook.Logging.LogSource" />
            <seealso cref="T:SharpHook.Logging.EmptyLogSource" />
            <seealso cref="T:SharpHook.Logging.LogEventArgs" />
            <seealso cref="T:SharpHook.Logging.LogEntry" />
        </member>
        <member name="P:SharpHook.Logging.ILogSource.IsDisposed">
            <summary>
            Gets the value which indicates whether the log source is disposed.
            </summary>
            <value><see langword="true" /> if the log source is disposed. Otherwise, <see langword="false" />.</value>
            <remarks>A disposed log source doesn't raise the <see cref="E:SharpHook.Logging.ILogSource.MessageLogged" /> event.</remarks>
        </member>
        <member name="E:SharpHook.Logging.ILogSource.MessageLogged">
            <summary>
            An event which is raised when libuiohook logs a message.
            </summary>
        </member>
        <member name="T:SharpHook.Logging.LogEntry">
            <summary>
            Represents a log entry from libuiohook.
            </summary>
            <param name="level">The log level.</param>
            <param name="fullText">The full text of the log entry.</param>
            <param name="format">The format of the log entry which can be used in <c>String.Format</c>.</param>
            <param name="nativeFormat">The native format of the log entry.</param>
            <param name="arguments">The arguments of the log entry which can be used in <c>String.Format</c>.</param>
            <param name="rawArguments">The arguments as they appear in the entry's full text.</param>
            <param name="argumentPlaceholders">The argument placeholders from the native format.</param>
            <remarks>
            <para>
            For simple handling the <see cref="F:SharpHook.Logging.LogEntry.Level" /> and <see cref="P:SharpHook.Logging.LogEntry.FullText" /> properties are anough. For more advanced
            handling you can use the entries' formats and arguments.
            </para>
            <para>
            Each log entry from libuiohook has the following format:
            <code>
            function [line]: message
            </code>
            </para>
            <para>
            The function and line reference the source code of libuiohook itself, and can be retrieved using the
            <see cref="P:SharpHook.Logging.LogEntry.Function" /> and <see cref="P:SharpHook.Logging.LogEntry.SourceLine" /> properties. The message can be retrieved by splitting the text
            by <c>:</c> and getting the trimmed second part.
            </para>
            <para>
            You shouldn't create <see cref="T:SharpHook.Logging.LogEntry" /> instances yourself. Instead, use the <see cref="T:SharpHook.Logging.LogEntryParser" />
            class to create them in the logging callback.
            </para>
            </remarks>
            <seealso cref="T:SharpHook.Logging.ILogSource" />
            <seealso cref="T:SharpHook.Logging.LogSource" />
            <seealso cref="T:SharpHook.Logging.LogEventArgs" />
            <seealso cref="T:SharpHook.Logging.LogEntryParser" />
        </member>
        <member name="M:SharpHook.Logging.LogEntry.#ctor(SharpHook.Native.LogLevel,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Represents a log entry from libuiohook.
            </summary>
            <param name="level">The log level.</param>
            <param name="fullText">The full text of the log entry.</param>
            <param name="format">The format of the log entry which can be used in <c>String.Format</c>.</param>
            <param name="nativeFormat">The native format of the log entry.</param>
            <param name="arguments">The arguments of the log entry which can be used in <c>String.Format</c>.</param>
            <param name="rawArguments">The arguments as they appear in the entry's full text.</param>
            <param name="argumentPlaceholders">The argument placeholders from the native format.</param>
            <remarks>
            <para>
            For simple handling the <see cref="F:SharpHook.Logging.LogEntry.Level" /> and <see cref="P:SharpHook.Logging.LogEntry.FullText" /> properties are anough. For more advanced
            handling you can use the entries' formats and arguments.
            </para>
            <para>
            Each log entry from libuiohook has the following format:
            <code>
            function [line]: message
            </code>
            </para>
            <para>
            The function and line reference the source code of libuiohook itself, and can be retrieved using the
            <see cref="P:SharpHook.Logging.LogEntry.Function" /> and <see cref="P:SharpHook.Logging.LogEntry.SourceLine" /> properties. The message can be retrieved by splitting the text
            by <c>:</c> and getting the trimmed second part.
            </para>
            <para>
            You shouldn't create <see cref="T:SharpHook.Logging.LogEntry" /> instances yourself. Instead, use the <see cref="T:SharpHook.Logging.LogEntryParser" />
            class to create them in the logging callback.
            </para>
            </remarks>
            <seealso cref="T:SharpHook.Logging.ILogSource" />
            <seealso cref="T:SharpHook.Logging.LogSource" />
            <seealso cref="T:SharpHook.Logging.LogEventArgs" />
            <seealso cref="T:SharpHook.Logging.LogEntryParser" />
        </member>
        <member name="F:SharpHook.Logging.LogEntry.Level">
            <summary>
            Gets the level of the current log entry.
            </summary>
            <value>The level of the current log entry.</value>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.FullText">
            <summary>
            Gets the full text of the current log entry.
            </summary>
            <value>The full text of the current log entry.</value>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.Format">
            <summary>
            Gets the format of the current log entry.
            </summary>
            <value>The format of the current log entry.</value>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.NativeFormat">
            <summary>
            Gets the native format of the current log entry, as defined in libuiohook.
            </summary>
            <value>The native format of the current log entry.</value>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.Arguments">
            <summary>
            Gets the arguments of the current log entry.
            </summary>
            <value>The arguments of the current log entry.</value>
            <remarks>The function and line are the first two arguments of the log entry.</remarks>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.RawArguments">
            <summary>
            Gets the arguments of the current log entry as they appear in entry's full text.
            </summary>
            <value>The arguments of the current log entry as they appear in entry's full text.</value>
            <remarks>The function and line are the first two arguments of the log entry.</remarks>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.ArgumentPlaceholders">
            <summary>
            Gets the argument placeholders from the native format.
            </summary>
            <value>The argument placeholders from the native format.</value>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.Function">
            <summary>
            Gets the libuiohook function which called the logger.
            </summary>
            <value>The function which called the logger.</value>
            <remarks>The function is the first argument of the log entry.</remarks>
        </member>
        <member name="P:SharpHook.Logging.LogEntry.SourceLine">
            <summary>
            Gets the source code line in libuiohook where the logger was called.
            </summary>
            <value>The source code line in libuiohook where the logger was called.</value>
            <remarks>The source code line is the second argument of the log entry.</remarks>
        </member>
        <member name="M:SharpHook.Logging.LogEntry.Equals(System.Object)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Logging.LogEntry.Equals(SharpHook.Logging.LogEntry)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="entry">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Logging.LogEntry.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:SharpHook.Logging.LogEntry.ToString">
            <summary>
            Gets the string representation of the log entry i.e. its full text.
            </summary>
            <returns>The full text of the log entry.</returns>
        </member>
        <member name="M:SharpHook.Logging.LogEntry.op_Equality(SharpHook.Logging.LogEntry,SharpHook.Logging.LogEntry)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Logging.LogEntry.op_Inequality(SharpHook.Logging.LogEntry,SharpHook.Logging.LogEntry)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are not equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:SharpHook.Logging.LogEntryParser">
            <summary>
            Creates log entries from native log formats and arguments.
            </summary>
            <remarks>
            The log text is formatted using the <c>vsprintf</c> function from the C runtime and then the result is parsed to
            extract the arguments. This means that on Windows this class requires the Visual C++ Redistributable package to be
            installed.
            </remarks>
        </member>
        <member name="P:SharpHook.Logging.LogEntryParser.Instance">
            <summary>
            Gets the single instance of <see cref="T:SharpHook.Logging.LogEntryParser" />.
            </summary>
        </member>
        <member name="M:SharpHook.Logging.LogEntryParser.ParseNativeLogEntry(SharpHook.Native.LogLevel,System.IntPtr,System.IntPtr)">
            <summary>
            Parses a native log format and arguments to create a log entry.
            </summary>
            <param name="level">The log level.</param>
            <param name="format">A pointer to the native format of the log message.</param>
            <param name="args">A pointer to the native arguments of the log message.</param>
            <returns>A log entry represented by the level, format, and argumets.</returns>
        </member>
        <member name="T:SharpHook.Logging.LogEventArgs">
            <summary>
            Event args for logging events.
            </summary>
            <param name="logEntry">The entry of log event.</param>
            <seealso cref="T:SharpHook.Logging.ILogSource" />
            <seealso cref="T:SharpHook.Logging.LogSource" />
            <seealso cref="T:SharpHook.Logging.LogEntry" />
        </member>
        <member name="M:SharpHook.Logging.LogEventArgs.#ctor(SharpHook.Logging.LogEntry)">
            <summary>
            Event args for logging events.
            </summary>
            <param name="logEntry">The entry of log event.</param>
            <seealso cref="T:SharpHook.Logging.ILogSource" />
            <seealso cref="T:SharpHook.Logging.LogSource" />
            <seealso cref="T:SharpHook.Logging.LogEntry" />
        </member>
        <member name="P:SharpHook.Logging.LogEventArgs.LogEntry">
            <summary>
            Gets the entry of the current log event.
            </summary>
            <value>The entry of the current log event.</value>
        </member>
        <member name="T:SharpHook.Logging.LogSource">
            <summary>
            Represents a source of libuiohook logs.
            </summary>
            <remarks>
            <para>
            Only a single <see cref="T:SharpHook.Logging.LogSource" /> instance must be used at a time.
            </para>
            <para>
            On Windows this class requires the Visual C++ Redistributable package to be installed as it uses the C runtime.
            </para>
            </remarks>
            <seealso cref="T:SharpHook.Logging.ILogSource" />
            <seealso cref="T:SharpHook.Logging.EmptyLogSource" />
            <seealso cref="T:SharpHook.Logging.LogEventArgs" />
            <seealso cref="T:SharpHook.Logging.LogEntry" />
            <seealso cref="T:SharpHook.Logging.LogEntryParser" />
        </member>
        <member name="M:SharpHook.Logging.LogSource.Finalize">
            <summary>
            Unregisters the current <see cref="T:SharpHook.Logging.LogSource" /> instance.
            </summary>
        </member>
        <member name="P:SharpHook.Logging.LogSource.MinLevel">
            <summary>
            Gets or sets the minimum log level.
            </summary>
            <value>The minimum log level.</value>
        </member>
        <member name="P:SharpHook.Logging.LogSource.IsDisposed">
            <summary>
            Gets the value which indicates whether the log source is disposed.
            </summary>
            <value><see langword="true" /> if the log source is disposed. Otherwise, <see langword="false" />.</value>
            <remarks>
            A disposed log source doesn't raise the <see cref="E:SharpHook.Logging.LogSource.MessageLogged" /> event and cannot be registered again.
            </remarks>
        </member>
        <member name="M:SharpHook.Logging.LogSource.RegisterOrGet(SharpHook.Native.LogLevel)">
            <summary>
            Creates and registers a source of libuiohook logs or returns the registered instance.
            </summary>
            <param name="minLevel">The minimum log level.</param>
            <returns>A source of libuiohook logs.</returns>
            <remarks>
            This method should be preferred to <see cref="M:SharpHook.Logging.LogSource.Register(SharpHook.Native.LogLevel)" /> as it's safer - it won't invalidate an
            already registered instance.
            </remarks>
        </member>
        <member name="M:SharpHook.Logging.LogSource.RegisterOrGet(SharpHook.Providers.ILoggingProvider,SharpHook.Native.LogLevel)">
            <summary>
            Creates and registers a source of libuiohook logs or returns the registered instance.
            </summary>
            <param name="loggingProvider">The logging provider used to register the log source.</param>
            <param name="minLevel">The minimum log level.</param>
            <returns>A source of libuiohook logs.</returns>
            <remarks>
            <para>
            This method should be preferred to <see cref="M:SharpHook.Logging.LogSource.Register(SharpHook.Providers.ILoggingProvider,SharpHook.Native.LogLevel)" /> as it's safer - it won't
            invalidate an already registered instance.
            </para>
            <para>
            A single instance of <see cref="T:SharpHook.Logging.LogSource" /> can be registered using this method, irrespective of the logging
            provider used.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="loggingProvider" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:SharpHook.Logging.LogSource.Register(SharpHook.Native.LogLevel)">
            <summary>
            Creates and registers a source of libuiohook logs.
            </summary>
            <param name="minLevel">The minimum log level.</param>
            <returns>A source of libuiohook logs.</returns>
            <remarks>
            This method is obsolete as it must not be called when another <see cref="T:SharpHook.Logging.LogSource" /> instance has already been
            registerd and hasn't been disposed. <see cref="M:SharpHook.Logging.LogSource.RegisterOrGet(SharpHook.Native.LogLevel)" /> should be used instead.
            </remarks>
        </member>
        <member name="M:SharpHook.Logging.LogSource.Register(SharpHook.Providers.ILoggingProvider,SharpHook.Native.LogLevel)">
            <summary>
            Creates and registers a source of libuiohook logs using the specified provider.
            </summary>
            <param name="loggingProvider">The logging provider used to register the log source.</param>
            <param name="minLevel">The minimum log level.</param>
            <returns>A source of libuiohook logs.</returns>
            <remarks>
            This method is obsolete as it must not be called when another <see cref="T:SharpHook.Logging.LogSource" /> instance has already been
            registerd and hasn't been disposed. <see cref="M:SharpHook.Logging.LogSource.RegisterOrGet(SharpHook.Providers.ILoggingProvider,SharpHook.Native.LogLevel)" /> should be used
            instead.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="loggingProvider" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:SharpHook.Logging.LogSource.Dispose">
            <summary>
            Stops the currently registered <see cref="T:SharpHook.Logging.LogSource" /> instance from receiving libuiohook logs.
            </summary>
        </member>
        <member name="E:SharpHook.Logging.LogSource.MessageLogged">
            <summary>
            An event which is raised when libuiohook logs a message.
            </summary>
        </member>
        <member name="T:SharpHook.MouseHookEventArgs">
            <summary>
            Event args for mouse-related hook events.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.HookEventArgs" />
            <seealso cref="T:SharpHook.KeyboardHookEventArgs" />
            <seealso cref="T:SharpHook.MouseWheelHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseEventData" />
        </member>
        <member name="M:SharpHook.MouseHookEventArgs.#ctor(SharpHook.Native.UioHookEvent)">
            <summary>
            Event args for mouse-related hook events.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.HookEventArgs" />
            <seealso cref="T:SharpHook.KeyboardHookEventArgs" />
            <seealso cref="T:SharpHook.MouseWheelHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseEventData" />
        </member>
        <member name="P:SharpHook.MouseHookEventArgs.Data">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:SharpHook.MouseWheelHookEventArgs">
            <summary>
            Event args for mouse wheel-related hook events.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.HookEventArgs" />
            <seealso cref="T:SharpHook.KeyboardHookEventArgs" />
            <seealso cref="T:SharpHook.MouseHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseWheelEventData" />
        </member>
        <member name="M:SharpHook.MouseWheelHookEventArgs.#ctor(SharpHook.Native.UioHookEvent)">
            <summary>
            Event args for mouse wheel-related hook events.
            </summary>
            <param name="rawEvent">The raw event data.</param>
            <seealso cref="T:SharpHook.HookEventArgs" />
            <seealso cref="T:SharpHook.KeyboardHookEventArgs" />
            <seealso cref="T:SharpHook.MouseHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseWheelEventData" />
        </member>
        <member name="P:SharpHook.MouseWheelHookEventArgs.Data">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:SharpHook.Native.DispatchProc">
            <summary>
            Represents a function which is called when an event occurs.
            </summary>
            <param name="e">The event that has occured.</param>
            <param name="userData">
            The data that was passed to <see cref="M:SharpHook.Native.UioHook.SetDispatchProc(SharpHook.Native.DispatchProc,System.IntPtr)" />. Should not be used.
            </param>
            <seealso cref="M:SharpHook.Native.UioHook.SetDispatchProc(SharpHook.Native.DispatchProc,System.IntPtr)" />
        </member>
        <member name="T:SharpHook.Native.EventReservedValueMask">
            <summary>
            Represents possible values of the <see cref="F:SharpHook.Native.UioHookEvent.Reserved" /> field.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventReservedValueMask.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventReservedValueMask.SuppressEvent">
            <summary>
            If this flag is set in the event handler then the event will be suppressed from further propagation.
            </summary>
            <remarks>Suppressing events works only on Windows and macOS.</remarks>
        </member>
        <member name="F:SharpHook.Native.EventReservedValueMask.SimulatedEvent">
            <summary>
            If this flag is set then the event has been simulated.
            </summary>
        </member>
        <member name="T:SharpHook.Native.EventType">
            <summary>
            Represents the type of an input event which can be raised from a global hook or posted as a fake event.
            </summary>
            <seealso cref="T:SharpHook.Native.UioHookEvent" />
            <seealso cref="M:SharpHook.Native.UioHook.PostEvent(SharpHook.Native.UioHookEvent@)" />
        </member>
        <member name="F:SharpHook.Native.EventType.HookEnabled">
            <summary>
            Raised when the global hook is started. Ignored when posted.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.HookDisabled">
            <summary>
            Raised when the global hook is stopped. Ignored when posted.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.KeyTyped">
            <summary>
            Raised when a key press may have caused a character to be typed regardless of whether a character was actually
            typed. Ignored when posted.
            </summary>
            <remarks>
            <para>
            Events of this type are raised after events of type <see cref="F:SharpHook.Native.EventType.KeyPressed" /> if the pressed key may have caused
            characters to be typed regardless of whether they were actually typed. Since a single key press can cause
            multiple characters to be typed, a single event of type <see cref="F:SharpHook.Native.EventType.KeyPressed" /> can cause multiple events of
            type <see cref="F:SharpHook.Native.EventType.KeyTyped" />.
            </para>
            <para>
            Since events of this type are not raised by the OS, suppressing them has no effect.
            </para>
            </remarks>
        </member>
        <member name="F:SharpHook.Native.EventType.KeyPressed">
            <summary>
            Raised when a key is pressed (its state changed from up to down) or posted to press a key.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.KeyReleased">
            <summary>
            Raised when a key is released (its state changed from down to up) or posted to release a key.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MouseClicked">
            <summary>
            Raised when a mouse button is clicked. Ignored when posted.
            </summary>
            <remarks>
            <para>
            Events of this type are raised after events of type <see cref="F:SharpHook.Native.EventType.MouseReleased" /> if the mouse was not dragged.
            </para>
            <para>
            Since events of this type are not raised by the OS, suppressing them has no effect.
            </para>
            </remarks>
        </member>
        <member name="F:SharpHook.Native.EventType.MousePressed">
            <summary>
            Raised when a mouse button is pressed (its state changed from up to down) or posted to press a mouse button.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MouseReleased">
            <summary>
            Raised when a mouse button is released (its state changed from down to up) or posted to release a mouse button.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MouseMoved">
            <summary>
            Raised when the mouse is moved or posted to move the mouse.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MouseDragged">
            <summary>
            Raised when the mouse is dragged. Not recommended to post as it will be the same as <see cref="F:SharpHook.Native.EventType.MouseMoved" />.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MouseWheel">
            <summary>
            Raised when the mouse wheel is scrolled or posted to scroll the mouse wheel.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MousePressedIgnoreCoordinates">
            <summary>
            Posted to press a mouse button at the current coordinates. Never raised.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MouseReleasedIgnoreCoordinates">
            <summary>
            Posted to release a mouse button at the current coordinates. Never raised.
            </summary>
        </member>
        <member name="F:SharpHook.Native.EventType.MouseMovedRelativeToCursor">
            <summary>
            Posted to move the mouse relative to the current cursor position. Never raised.
            </summary>
        </member>
        <member name="T:SharpHook.Native.KeyboardEventData">
            <summary>
            Represents the data of a keyboard-related event.
            </summary>
            <seealso cref="T:SharpHook.KeyboardHookEventArgs" />
            <seealso cref="T:SharpHook.Native.KeyCode" />
        </member>
        <member name="F:SharpHook.Native.KeyboardEventData.RawUndefinedChar">
            <summary>
            The value of <see cref="F:SharpHook.Native.KeyboardEventData.RawKeyChar" /> in events of type <see cref="F:SharpHook.Native.EventType.KeyPressed" /> and
            <see cref="F:SharpHook.Native.EventType.KeyReleased" />.
            </summary>
        </member>
        <member name="F:SharpHook.Native.KeyboardEventData.UndefinedChar">
            <summary>
            The value of <see cref="P:SharpHook.Native.KeyboardEventData.KeyChar" /> in events of type <see cref="F:SharpHook.Native.EventType.KeyPressed" /> and
            <see cref="F:SharpHook.Native.EventType.KeyReleased" />.
            </summary>
        </member>
        <member name="F:SharpHook.Native.KeyboardEventData.KeyCode">
            <summary>
            The key code.
            </summary>
            <value>The key code.</value>
        </member>
        <member name="F:SharpHook.Native.KeyboardEventData.RawCode">
            <summary>
            The OS-specific key code.
            </summary>
            <value>The OS-specific key code.</value>
        </member>
        <member name="F:SharpHook.Native.KeyboardEventData.RawKeyChar">
            <summary>
            The character of the key.
            </summary>
            <value>The character of the key.</value>
            <remarks>
            <para>This field is available only for the <see cref="F:SharpHook.Native.EventType.KeyTyped" /> event.</para>
            <para>
            In general <see cref="P:SharpHook.Native.KeyboardEventData.KeyChar" /> should be used instead of this field. This field is of type
            <see cref="T:System.UInt16" /> purely for marshalling reasons. It should be used as a <see cref="T:System.Char" />.
            </para>
            </remarks>
        </member>
        <member name="P:SharpHook.Native.KeyboardEventData.KeyChar">
            <summary>
            The character of the key.
            </summary>
            <value>The character of the key.</value>
            <remarks>
            <para>This property is available only for the <see cref="F:SharpHook.Native.EventType.KeyTyped" /> event.</para>
            </remarks>
        </member>
        <member name="M:SharpHook.Native.KeyboardEventData.Equals(System.Object)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.KeyboardEventData.Equals(SharpHook.Native.KeyboardEventData)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="data">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.KeyboardEventData.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.KeyboardEventData.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.KeyboardEventData.op_Equality(SharpHook.Native.KeyboardEventData,SharpHook.Native.KeyboardEventData)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.KeyboardEventData.op_Inequality(SharpHook.Native.KeyboardEventData,SharpHook.Native.KeyboardEventData)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are not equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:SharpHook.Native.KeyCode">
            <summary>
            Represents a virtual key code.
            </summary>
            <seealso cref="T:SharpHook.Native.KeyboardEventData" />
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcUndefined">
            <summary>Undefined key</summary>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcEscape">
            <summary>Escape</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF1">
            <summary>F1</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF2">
            <summary>F2</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF3">
            <summary>F3</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF4">
            <summary>F4</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF5">
            <summary>F5</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF6">
            <summary>F6</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF7">
            <summary>F7</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF8">
            <summary>F8</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF9">
            <summary>F9</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF10">
            <summary>F10</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF11">
            <summary>F11</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF12">
            <summary>F12</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF13">
            <summary>F13</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF14">
            <summary>F14</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF15">
            <summary>F15</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF16">
            <summary>F16</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF17">
            <summary>F17</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF18">
            <summary>F18</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF19">
            <summary>F19</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF20">
            <summary>F20</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF21">
            <summary>F21</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF22">
            <summary>F22</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF23">
            <summary>F23</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF24">
            <summary>F24</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBackQuote">
            <summary>`</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc0">
            <summary>0</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc1">
            <summary>1</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc2">
            <summary>2</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc3">
            <summary>3</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc4">
            <summary>4</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc5">
            <summary>5</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc6">
            <summary>6</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc7">
            <summary>7</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc8">
            <summary>8</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc9">
            <summary>9</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMinus">
            <summary>-</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcEquals">
            <summary>=</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBackspace">
            <summary>
            Backspace (on Windows and Linux) or Delete (on macOS)
            </summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcTab">
            <summary>Tab</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCapsLock">
            <summary>Caps Lock</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcA">
            <summary>A</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcB">
            <summary>B</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcC">
            <summary>C</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcD">
            <summary>D</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcE">
            <summary>E</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcF">
            <summary>F</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcG">
            <summary>G</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcH">
            <summary>H</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcI">
            <summary>I</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcJ">
            <summary>J</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcK">
            <summary>K</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcL">
            <summary>L</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcM">
            <summary>M</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcN">
            <summary>N</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcO">
            <summary>O</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcP">
            <summary>P</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcQ">
            <summary>Q</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcR">
            <summary>R</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcS">
            <summary>S</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcT">
            <summary>T</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcU">
            <summary>U</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcV">
            <summary>V</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcW">
            <summary>W</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcX">
            <summary>X</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcY">
            <summary>Y</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcZ">
            <summary>Z</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcOpenBracket">
            <summary>[</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCloseBracket">
            <summary>]</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBackslash">
            <summary>\</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSemicolon">
            <summary>;</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcQuote">
            <summary>'</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcEnter">
            <summary>Enter</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcComma">
            <summary>,</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPeriod">
            <summary>.</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSlash">
            <summary>/</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSpace">
            <summary>Space</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.Vc102">
            <summary>
            The &lt;&gt; keys on the US standard keyboard, or the \| key on the non-US 102-key keyboard,
            or the Section key (§) on the macOS ISO keyboard
            </summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMisc">
            <summary>Miscellaneous OEM-specific key</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPrintScreen">
            <summary>Print Screen</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPrint">
            <summary>Print</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSelect">
            <summary>Select</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcExecute">
            <summary>Execute</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcScrollLock">
            <summary>Scroll Lock</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPause">
            <summary>Pause</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCancel">
            <summary>Cancel</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcHelp">
            <summary>Help</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcInsert">
            <summary>Insert</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcDelete">
            <summary>
            Delete (on Windows and Linux) or Forward Delete (on macOS)
            </summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcHome">
            <summary>Home</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcEnd">
            <summary>End</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPageUp">
            <summary>Page Up</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPageDown">
            <summary>Page Down</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcUp">
            <summary>Up Arrow</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcLeft">
            <summary>Left Arrow</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRight">
            <summary>Right Arrow</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcDown">
            <summary>Down Arrow</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumLock">
            <summary>Num Lock</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadClear">
            <summary>Num-Pad Clear</summary>
            <remarks>Available on: Windows, macOS</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadDivide">
            <summary>Num-Pad /</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadMultiply">
            <summary>Num-Pad *</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadSubtract">
            <summary>Num-Pad -</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadEquals">
            <summary>Num-Pad =</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadAdd">
            <summary>Num-Pad +</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadEnter">
            <summary>Num-Pad Enter</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadDecimal">
            <summary>Num-Pad Decimal</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadSeparator">
            <summary>Num-Pad Separator</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadPlusMinus">
            <summary>Num-Pad ±</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad0">
            <summary>Num-Pad 0</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad1">
            <summary>Num-Pad 1</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad2">
            <summary>Num-Pad 2</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad3">
            <summary>Num-Pad 3</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad4">
            <summary>Num-Pad 4</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad5">
            <summary>Num-Pad 5</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad6">
            <summary>Num-Pad 6</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad7">
            <summary>Num-Pad 7</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad8">
            <summary>Num-Pad 8</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPad9">
            <summary>Num-Pad 9</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadOpenParenthesis">
            <summary>Num-Pad (</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNumPadCloseParenthesis">
            <summary>Num-Pad )</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcLeftShift">
            <summary>Left Shift</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRightShift">
            <summary>Right Shift</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcLeftControl">
            <summary>Left Control</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRightControl">
            <summary>Right Control</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcLeftAlt">
            <summary>
            Left Alt (on Windows and Linux) or Option (on macOS)
            </summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRightAlt">
            <summary>
            Right Alt (on Windows and Linux) or Option (on macOS)
            </summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcLeftMeta">
            <summary>
            Left Win (on Windows), Command (on macOS), or Super/Meta (on Linux)
            </summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRightMeta">
            <summary>
            Right Win (on Windows), Command (on macOS), or Super/Meta (on Linux)
            </summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcContextMenu">
            <summary>Context Menu</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcFunction">
            <summary>Function</summary>
            <remarks>Available on: macOS</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcChangeInputSource">
            <summary>
            Function key when used to change an input source on macOS
            </summary>
            <remarks>Available on: macOS</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPower">
            <summary>Power</summary>
            <remarks>Available on: macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSleep">
            <summary>Sleep</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcWake">
            <summary>Wake</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMedia">
            <summary>Media</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaPlay">
            <summary>Play/Pause Media</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaStop">
            <summary>Stop Media</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaPrevious">
            <summary>Previous Media</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaNext">
            <summary>Next Media</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaSelect">
            <summary>Select Media</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaEject">
            <summary>Eject Media</summary>
            <remarks>Available on: macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaClose">
            <summary>Close Media</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaEjectClose">
            <summary>Eject/Close Media</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaRecord">
            <summary>Record Media</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMediaRewind">
            <summary>Rewind Media</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcVolumeMute">
            <summary>Volume Mute</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcVolumeDown">
            <summary>Volume Down</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcVolumeUp">
            <summary>Volume Up</summary>
            <remarks>Available on: Windows, macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAttn">
            <summary>Attn</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCrSel">
            <summary>CrSel</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcExSel">
            <summary>ExSel</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcEraseEof">
            <summary>Erase EOF</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPlay">
            <summary>Play</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcZoom">
            <summary>Zoom</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNoName">
            <summary>Reserved for future use</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPa1">
            <summary>PA1</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcApp1">
            <summary>Launch app 1</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcApp2">
            <summary>Launch app 2</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcApp3">
            <summary>Launch app 3</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcApp4">
            <summary>Launch app 4</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAppBrowser">
            <summary>Launch browser</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAppCalculator">
            <summary>Launch calculator</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAppMail">
            <summary>Launch mail</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrowserSearch">
            <summary>Browser Search</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrowserHome">
            <summary>Browser Home</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrowserBack">
            <summary>Browser Back</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrowserForward">
            <summary>Browser Forward</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrowserStop">
            <summary>Browser Stop</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrowserRefresh">
            <summary>Browser Refresh</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrowserFavorites">
            <summary>Browser Favorites</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcKatakanaHiragana">
            <summary>IME Katakana/Hiragana toggle</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcKatakana">
            <summary>IME Katakana mode</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcHiragana">
            <summary>IME Hiragana mode</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcKana">
            <summary>IME Kana mode</summary>
            <remarks>Available on: Windows, macOS</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcKanji">
            <summary>IME Kanji mode</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcHangul">
            <summary>IME Hangul mode</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcJunja">
            <summary>IME Junja mode</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcFinal">
            <summary>IME Final mode</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcHanja">
            <summary>IME Hanja mode</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAccept">
            <summary>IME Accept</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcConvert">
            <summary>IME Convert (henkan)</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNonConvert">
            <summary>IME Non-Convert (muhenkan)</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcImeOn">
            <summary>IME On</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcImeOff">
            <summary>IME Off</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcModeChange">
            <summary>IME Mode Change</summary>
            <remarks>Available on: Windows, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcProcess">
            <summary>IME Process</summary>
            <remarks>Available on: Windows</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAlphanumeric">
            <summary>IME Alphanumeric mode (eisū)</summary>
            <remarks>Available on: macOS</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcUnderscore">
            <summary>_</summary>
            <remarks>Available on: macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcYen">
            <summary>Yen</summary>
            <remarks>Available on: macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcJpComma">
            <summary>JP Comma</summary>
            <remarks>Available on: macOS, Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcStop">
            <summary>Stop</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcProps">
            <summary>Props</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcFront">
            <summary>Front</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcOpen">
            <summary>Open</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcFind">
            <summary>Find</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAgain">
            <summary>Again</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcUndo">
            <summary>Undo</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRedo">
            <summary>Redo</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCopy">
            <summary>Copy</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPaste">
            <summary>Paste</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCut">
            <summary>Cut</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcLineFeed">
            <summary>Line Feed</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMacro">
            <summary>Macro</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcScale">
            <summary>Scale</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSetup">
            <summary>Setup</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcFile">
            <summary>File</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSendFile">
            <summary>Send File</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcDeleteFile">
            <summary>Delete File</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMsDos">
            <summary>MS DOS</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcLock">
            <summary>Lock</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRotateDisplay">
            <summary>Rotate Display</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCycleWindows">
            <summary>Cycle Windows</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcComputer">
            <summary>Computer</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPhone">
            <summary>Phone</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcIso">
            <summary>ISO</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcConfig">
            <summary>Config</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcExit">
            <summary>Exit</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcMove">
            <summary>Move</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcEdit">
            <summary>Edit</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcScrollUp">
            <summary>Scroll Up</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcScrollDown">
            <summary>Scroll Down</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcNew">
            <summary>New</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPlayCd">
            <summary>Play CD</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcPauseCd">
            <summary>Pause CD</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcDashboard">
            <summary>Dashboard</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSuspend">
            <summary>Suspend</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcClose">
            <summary>Close</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcFastForward">
            <summary>Fast-Forward</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBassBoost">
            <summary>Bass Boost</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcHp">
            <summary>HP</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcCamera">
            <summary>Camera</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSound">
            <summary>Sound</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcQuestion">
            <summary>Question</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcEmail">
            <summary>Email</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcChat">
            <summary>Chat</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcConnect">
            <summary>Connect</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcFinance">
            <summary>Finance</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSport">
            <summary>Sport</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcShop">
            <summary>Shop</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcAltErase">
            <summary>Alt Erase</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrightnessDown">
            <summary>Brightness Down</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrightnessUp">
            <summary>Brightness Up</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrightnesCycle">
            <summary>Brightness Cycle</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBrightnessAuto">
            <summary>Brightness Auto</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSwitchVideoMode">
            <summary>Switch Video Mode</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcKeyboardLightToggle">
            <summary>Keyboard Light Toggle</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcKeyboardLightDown">
            <summary>Keyboard Light Down</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcKeyboardLightUp">
            <summary>Keyboard Light Up</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSend">
            <summary>Send</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcReply">
            <summary>Reply</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcForwardMail">
            <summary>Forward Mail</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcSave">
            <summary>Save</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcDocuments">
            <summary>Documents</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBattery">
            <summary>Battery</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcBluetooth">
            <summary>Bluetooth</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcWlan">
            <summary>WLAN</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcUwb">
            <summary>UWB</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcX11Unknown">
            <summary>Unknown key (X11)</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcVideoNext">
            <summary>Next Video</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcVideoPrevious">
            <summary>Previous Video</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcDisplayOff">
            <summary>Display Off</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcWwan">
            <summary>WWAN</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="F:SharpHook.Native.KeyCode.VcRfKill">
            <summary>RfKill</summary>
            <remarks>Available on: Linux</remarks>
        </member>
        <member name="T:SharpHook.Native.LoggerProc">
            <summary>
            Represents a function which is called when a logging event occurs.
            </summary>
            <param name="level">The log level.</param>
            <param name="userData">
            The data that was passed to <see cref="M:SharpHook.Native.UioHook.SetLoggerProc(SharpHook.Native.LoggerProc,System.IntPtr)" />. Should not be used.
            </param>
            <param name="format">The format of the log message.</param>
            <param name="args">The arguments of the log message.</param>
            <seealso cref="M:SharpHook.Native.UioHook.SetLoggerProc(SharpHook.Native.LoggerProc,System.IntPtr)" />
        </member>
        <member name="T:SharpHook.Native.LogLevel">
            <summary>
            Represents a log level.
            </summary>
        </member>
        <member name="F:SharpHook.Native.LogLevel.Debug">
            <summary>
            Debug information
            </summary>
        </member>
        <member name="F:SharpHook.Native.LogLevel.Info">
            <summary>
            General-purpose information
            </summary>
        </member>
        <member name="F:SharpHook.Native.LogLevel.Warn">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:SharpHook.Native.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:SharpHook.Native.ModifierMask">
            <summary>
            Represents a virtual modifier mask.
            </summary>
            <seealso cref="T:SharpHook.Native.UioHookEvent" />
        </member>
        <member name="F:SharpHook.Native.ModifierMask.None">
            <summary>No modifier</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.LeftShift">
            <summary>Left Shift</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.LeftCtrl">
            <summary>Left Control</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.LeftMeta">
            <summary>
            Left Win (on Windows), Command (on macOS), or Super/Meta (on Linux)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.LeftAlt">
            <summary>
            Left Alt (on Windows and Linux) or Option (on macOS)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.RightShift">
            <summary>Right Shift</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.RightCtrl">
            <summary>Right Control</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.RightMeta">
            <summary>
            Right Win (on Windows), Command (on macOS), or Super/Meta (on Linux)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.RightAlt">
            <summary>
            Right Alt (on Windows and Linux) or Option (on macOS)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Shift">
            <summary>Left or right Shift</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Ctrl">
            <summary>Left or right Control</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Meta">
            <summary>
            Left or right Win (on Windows), Command (on macOS), or Super/Meta (on Linux)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Alt">
            <summary>
            Left or right Alt (on Windows and Linux) or Option (on macOS)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Button1">
            <summary>
            Mouse button 1 (usually the left mouse button)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Button2">
            <summary>
            Mouse button 2 (usually the right mouse button)
            </summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Button3">
            <summary>Mouse button 3</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Button4">
            <summary>Mouse button 4</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.Button5">
            <summary>Mouse button 5</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.NumLock">
            <summary>Num Lock</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.CapsLock">
            <summary>Caps Lock</summary>
        </member>
        <member name="F:SharpHook.Native.ModifierMask.ScrollLock">
            <summary>Scroll Lock</summary>
        </member>
        <member name="T:SharpHook.Native.ModifierMaskExtensions">
            <summary>
            Contains extension methods for <see cref="T:SharpHook.Native.ModifierMask" />.
            </summary>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.HasShift(SharpHook.Native.ModifierMask)">
            <summary>
            Returns <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftShift" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightShift"/>. Otherwise, returns <see langword="false" />.
            </summary>
            <param name="mask">The modifier mask to check.</param>
            <returns>
            <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftShift" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightShift"/>. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.HasCtrl(SharpHook.Native.ModifierMask)">
            <summary>
            Returns <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftCtrl" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightCtrl"/>. Otherwise, returns <see langword="false" />.
            </summary>
            <param name="mask">The modifier mask to check.</param>
            <returns>
            <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftCtrl" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightCtrl"/>. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.HasAlt(SharpHook.Native.ModifierMask)">
            <summary>
            Returns <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftAlt" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightAlt"/>. Otherwise, returns <see langword="false" />.
            </summary>
            <param name="mask">The modifier mask to check.</param>
            <returns>
            <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftAlt" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightAlt"/>. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.HasMeta(SharpHook.Native.ModifierMask)">
            <summary>
            Returns <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftMeta" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightMeta"/>. Otherwise, returns <see langword="false" />.
            </summary>
            <param name="mask">The modifier mask to check.</param>
            <returns>
            <see langword="true" /> if the modifier mask contains either <see cref="F:SharpHook.Native.ModifierMask.LeftMeta" /> or
            <see cref="F:SharpHook.Native.ModifierMask.RightMeta"/>. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.HasAny(SharpHook.Native.ModifierMask,SharpHook.Native.ModifierMask)">
            <summary>
            Returns <see langword="true" /> if the modifier mask contains any of the specified modifiers.
            Otherwise, returns <see langword="false" />.
            </summary>
            <param name="mask">The modifier mask to check.</param>
            <param name="modifiers">The modifiers to check against.</param>
            <returns>
            <see langword="true" /> if the modifier mask contains any of the specified modifiers.
            Otherwise, <see langword="false" />.
            </returns>
            <remarks>
            This method returns <see langword="false" /> if <paramref name="modifiers" /> equals
            <see cref="F:SharpHook.Native.ModifierMask.None" />.
            </remarks>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.HasAll(SharpHook.Native.ModifierMask,SharpHook.Native.ModifierMask)">
            <summary>
            Returns <see langword="true" /> if the modifier mask contains all of the specified modifiers.
            Otherwise, returns <see langword="false" />.
            </summary>
            <param name="mask">The modifier mask to check.</param>
            <param name="modifiers">The modifiers to check against.</param>
            <returns>
            <see langword="true" /> if the modifier mask contains all of the specified modifiers.
            Otherwise, <see langword="false" />.
            </returns>
            <remarks>
            This method returns <see langword="true" /> if <paramref name="modifiers" /> equals
            <see cref="F:SharpHook.Native.ModifierMask.None" />.
            </remarks>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.Split(SharpHook.Native.ModifierMask)">
            <summary>
            Splits a modifier mask into an array of individual modifiers.
            </summary>
            <param name="mask">The modifier mask to split.</param>
            <returns>
            An array of individual modifiers contained in <paramref name="mask" />,
            or an empty array if <paramref name="mask" /> is <see cref="F:SharpHook.Native.ModifierMask.None" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ModifierMaskExtensions.Merge(SharpHook.Native.ModifierMask[])">
            <summary>
            Merges an array of modifiers into a single modifier mask.
            </summary>
            <param name="modifiers">The modifiers to merge.</param>
            <returns>A modifier mask which contains the specified modifiers.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="modifiers" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:SharpHook.Native.MouseButton">
            <summary>
            Represents a mouse button.
            </summary>
            <seealso cref="T:SharpHook.Native.MouseEventData" />
        </member>
        <member name="F:SharpHook.Native.MouseButton.NoButton">
            <summary>
            No button
            </summary>
        </member>
        <member name="F:SharpHook.Native.MouseButton.Button1">
            <summary>
            Button 1 (usually the left mouse button)
            </summary>
        </member>
        <member name="F:SharpHook.Native.MouseButton.Button2">
            <summary>
            Button 2 (usually the right mouse button)
            </summary>
        </member>
        <member name="F:SharpHook.Native.MouseButton.Button3">
            <summary>
            Button 3
            </summary>
        </member>
        <member name="F:SharpHook.Native.MouseButton.Button4">
            <summary>
            Button 4
            </summary>
        </member>
        <member name="F:SharpHook.Native.MouseButton.Button5">
            <summary>
            Button 5
            </summary>
        </member>
        <member name="T:SharpHook.Native.MouseEventData">
            <summary>
            Represents the data of a mouse-related event.
            </summary>
            <seealso cref="T:SharpHook.MouseHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseButton" />
        </member>
        <member name="F:SharpHook.Native.MouseEventData.Button">
            <summary>
            The mouse button.
            </summary>
            <value>The mouse button.</value>
        </member>
        <member name="F:SharpHook.Native.MouseEventData.Clicks">
            <summary>
            The number of clicks.
            </summary>
            <value>The number of clicks.</value>
        </member>
        <member name="F:SharpHook.Native.MouseEventData.X">
            <summary>
            The X-coordinate of the mouse cursor.
            </summary>
            <value>The X-coordinate of the mouse cursor.</value>
        </member>
        <member name="F:SharpHook.Native.MouseEventData.Y">
            <summary>
            The Y-coordinate of the mouse cursor.
            </summary>
            <value>The Y-coordinate of the mouse cursor.</value>
        </member>
        <member name="M:SharpHook.Native.MouseEventData.Equals(System.Object)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.MouseEventData.Equals(SharpHook.Native.MouseEventData)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="data">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.MouseEventData.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.MouseEventData.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.MouseEventData.op_Equality(SharpHook.Native.MouseEventData,SharpHook.Native.MouseEventData)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.MouseEventData.op_Inequality(SharpHook.Native.MouseEventData,SharpHook.Native.MouseEventData)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are not equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:SharpHook.Native.MouseWheelEventData">
            <summary>
            Represents the data of a mouse wheel-related event.
            </summary>
            <seealso cref="T:SharpHook.MouseWheelHookEventArgs" />
            <seealso cref="T:SharpHook.Native.MouseWheelScrollType" />
            <seealso cref="T:SharpHook.Native.MouseWheelScrollDirection" />
        </member>
        <member name="F:SharpHook.Native.MouseWheelEventData.X">
            <summary>
            The X-coordinate of the mouse cursor.
            </summary>
            <value>The X-coordinate of the mouse cursor.</value>
        </member>
        <member name="F:SharpHook.Native.MouseWheelEventData.Y">
            <summary>
            The Y-coordinate of the mouse cursor.
            </summary>
            <value>The Y-coordinate of the mouse cursor.</value>
        </member>
        <member name="F:SharpHook.Native.MouseWheelEventData.Type">
            <summary>
            The wheel scroll type.
            </summary>
            <value>The wheel scroll type.</value>
        </member>
        <member name="F:SharpHook.Native.MouseWheelEventData.Rotation">
            <summary>
            The wheel rotation.
            </summary>
            <value>The wheel rotation.</value>
            <remarks>
            A positive value indicates that the wheel was rotated up or left, and a negative value indicates that the wheel
            was rotated down or right.
            </remarks>
        </member>
        <member name="F:SharpHook.Native.MouseWheelEventData.Delta">
            <summary>
            The wheel delta.
            </summary>
            <value>The wheel delta.</value>
            <remarks>
            <para>
            On Windows this value is equal to the <c>WHEEL_DELTA</c> constant (<c>120</c>).
            </para>
            <para>
            On macOS this value is the number of pixels per line.
            </para>
            <para>
            On Linux this value is always equal to <c>100</c>.
            </para>
            </remarks>
        </member>
        <member name="F:SharpHook.Native.MouseWheelEventData.Direction">
            <summary>
            The wheel scroll direction.
            </summary>
            <value>The wheel scroll direction.</value>
        </member>
        <member name="M:SharpHook.Native.MouseWheelEventData.Equals(System.Object)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.MouseWheelEventData.Equals(SharpHook.Native.MouseWheelEventData)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="data">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.MouseWheelEventData.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.MouseWheelEventData.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.MouseWheelEventData.op_Equality(SharpHook.Native.MouseWheelEventData,SharpHook.Native.MouseWheelEventData)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.MouseWheelEventData.op_Inequality(SharpHook.Native.MouseWheelEventData,SharpHook.Native.MouseWheelEventData)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are not equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:SharpHook.Native.MouseWheelScrollDirection">
            <summary>
            Represents a mouse wheel scroll direction.
            </summary>
            <seealso cref="T:SharpHook.Native.MouseWheelEventData" />
        </member>
        <member name="F:SharpHook.Native.MouseWheelScrollDirection.Vertical">
            <summary>
            Vertical scroll direction.
            </summary>
        </member>
        <member name="F:SharpHook.Native.MouseWheelScrollDirection.Horizontal">
            <summary>
            Horizontal scroll direction.
            </summary>
        </member>
        <member name="T:SharpHook.Native.MouseWheelScrollType">
            <summary>
            Represents a mouse wheel scroll type.
            </summary>
            <seealso cref="T:SharpHook.Native.MouseWheelEventData" />
        </member>
        <member name="F:SharpHook.Native.MouseWheelScrollType.UnitScroll">
            <summary>
            The default scroll type on Windows and Linux, and the pixel scroll type on macOS.
            </summary>
        </member>
        <member name="F:SharpHook.Native.MouseWheelScrollType.BlockScroll">
            <summary>
            The page scroll type on Windows, and the line scroll type on macOS. Not available on Linux.
            </summary>
        </member>
        <member name="T:SharpHook.Native.ScreenData">
            <summary>
            Represents screen-related data.
            </summary>
        </member>
        <member name="F:SharpHook.Native.ScreenData.Number">
            <summary>
            The ordinal number of the screen.
            </summary>
            <value>The ordinal number of the screen.</value>
        </member>
        <member name="F:SharpHook.Native.ScreenData.X">
            <summary>
            The X-coordinate of the screen.
            </summary>
            <value>The X-coordinate of the screen.</value>
        </member>
        <member name="F:SharpHook.Native.ScreenData.Y">
            <summary>
            The Y-coordinate of the screen.
            </summary>
            <value>The Y-coordinate of the screen.</value>
        </member>
        <member name="F:SharpHook.Native.ScreenData.Width">
            <summary>
            The width of the screen.
            </summary>
            <value>The width of the screen.</value>
        </member>
        <member name="F:SharpHook.Native.ScreenData.Height">
            <summary>
            The height of the screen.
            </summary>
            <value>The height of the screen.</value>
        </member>
        <member name="M:SharpHook.Native.ScreenData.Equals(System.Object)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ScreenData.Equals(SharpHook.Native.ScreenData)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="data">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ScreenData.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.ScreenData.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.ScreenData.op_Equality(SharpHook.Native.ScreenData,SharpHook.Native.ScreenData)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.ScreenData.op_Inequality(SharpHook.Native.ScreenData,SharpHook.Native.ScreenData)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are not equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:SharpHook.Native.UioHook">
            <summary>
            Contains native methods of libuiohook.
            </summary>
            <seealso cref="T:SharpHook.Providers.IEventSimulationProvider" />
            <seealso cref="T:SharpHook.Providers.IGlobalHookProvider" />
            <seealso cref="T:SharpHook.Providers.ILoggingProvider" />
            <seealso cref="T:SharpHook.Providers.IMouseInfoProvider" />
            <seealso cref="T:SharpHook.Providers.IScreenInfoProvider" />
            <seealso cref="T:SharpHook.Providers.UioHookProvider" />
        </member>
        <member name="M:SharpHook.Native.UioHook.SetDispatchProc(SharpHook.Native.DispatchProc,System.IntPtr)">
            <summary>
            Sets the hook callback function.
            </summary>
            <param name="dispatchProc">
            The function to call when an event is raised, or <see langword="null" /> to unset the function.
            </param>
            <param name="userData">
            Custom data to pass to the callback. Should not be used, and <see cref="F:System.IntPtr.Zero" /> should always be passed.
            </param>
            <seealso cref="T:SharpHook.Native.DispatchProc" />
        </member>
        <member name="M:SharpHook.Native.UioHook.Run">
            <summary>
            Runs the global hook and blocks the thread until it's stopped.
            </summary>
            <remarks>
            Calling this method when another global hook is running should never be done as it will corrupt the global state
            of libuiohook.
            </remarks>
            <returns>The result of the operation.</returns>
            <remarks>
            This method must not be called when a global hook is already running since it will corrupt the global state of
            libuiohook.
            </remarks>
        </member>
        <member name="M:SharpHook.Native.UioHook.RunKeyboard">
            <summary>
            Runs the global hook only for keyboard events and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and
            a mouse hook. On macOS and Linux there is one hook for all events, and this method simply enables filtering
            mouse events out on these OSes.
            </para>
            <para>
            When a keyboard-only hook is running, the <see cref="F:SharpHook.Native.UioHookEvent.Mask" /> field will not contain any mouse
            button state.
            </para>
            <para>
            This method must not be called when a global hook is already running since it will corrupt the global state of
            libuiohook.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Native.UioHook.RunMouse">
            <summary>
            Runs the global hook only for mouse events and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and
            a mouse hook. On macOS and Linux there is one hook for all events, and this method simply enables filtering
            keyboard events out on these OSes.
            </para>
            <para>
            When a mouse-only hook is running, the <see cref="F:SharpHook.Native.UioHookEvent.Mask" /> field will not contain any keyboard
            modifier state.
            </para>
            <para>
            This method must not be called when a global hook is already running since it will corrupt the global state of
            libuiohook.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Native.UioHook.Stop">
            <summary>
            Stops the global hook.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHook.SetLoggerProc(SharpHook.Native.LoggerProc,System.IntPtr)">
            <summary>
            Sets the log callback function.
            </summary>
            <param name="loggerProc">
            The function to call for logging, or <see langword="null" /> to unset the function.
            </param>
            <param name="userData">
            Custom data to pass to the callback. Should not be used, and <see cref="F:System.IntPtr.Zero" /> should always be passed.
            </param>
            <seealso cref="T:SharpHook.Native.LoggerProc" />
        </member>
        <member name="M:SharpHook.Native.UioHook.PostEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            Posts a fake input event.
            </summary>
            <param name="e">The event to post.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The instance of the event doesn't need all fields to have value. Only <see cref="F:SharpHook.Native.UioHookEvent.Type" />,
            <see cref="F:SharpHook.Native.UioHookEvent.Keyboard" />/<see cref="F:SharpHook.Native.UioHookEvent.Mouse" />/<see cref="F:SharpHook.Native.UioHookEvent.Wheel" /> should
            be present.
            </para>
            <para>
            The following table describes the specifics of simulating each event type.
            <list type="table">
            <listheader>
            <term>Event type</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.HookEnabled" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.HookDisabled" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyPressed" /></term>
            <term>Only <see cref="F:SharpHook.Native.KeyboardEventData.KeyCode" /> is considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyReleased" /></term>
            <term>Only <see cref="F:SharpHook.Native.KeyboardEventData.KeyCode" /> is considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyTyped" /></term>
            <term>
            Events of this type are ignored. <see cref="M:SharpHook.Native.UioHook.PostText(System.String)" /> should be used to post Unicode characters.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MousePressed" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.X" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Y" />,
            and <see cref="F:SharpHook.Native.MouseEventData.Button" /> are considered.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseReleased" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.X" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Y" />,
            and <see cref="F:SharpHook.Native.MouseEventData.Button" /> are considered.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseClicked" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseMoved" /></term>
            <term>Only <see cref="F:SharpHook.Native.MouseEventData.X" /> and <see cref="F:SharpHook.Native.MouseEventData.Y" /> are considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseDragged" /></term>
            <term>Not recommended to use; same as <see cref="F:SharpHook.Native.EventType.MouseMoved" />.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseWheel" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.Rotation" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Direction" />, and
            <see cref="F:SharpHook.Native.MouseWheelEventData.Type" /> are considered.
            </term>
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:SharpHook.EventSimulator" />
        </member>
        <member name="M:SharpHook.Native.UioHook.PostText(System.String)">
            <summary>
            Simulates the input of arbitrary Unicode characters.
            </summary>
            <param name="text">The text to simulate.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including
            surrogate pairs, e.g. emojis) is supported.
            </para>
            <para>
            On Windows text simulation should work correctly and consistently.
            </para>
            <para>
            On macOS applications are not required to process text simulation, but most of them should handle it correctly.
            </para>
            <para>
            X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to
            that character, and then key press/release is simulated. Since the receiving application must react to the
            remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text
            simulation on Linux works slowly and is not guaranteed to be correct. <see cref="M:SharpHook.Native.UioHook.SetPostTextDelayX11(System.UInt64)" /> can be
            used to increase (or decrease) the delay if needed - longer dealys add consistency but may be more jarring to
            end users. <see cref="M:SharpHook.Native.UioHook.GetPostTextDelayX11" /> can be used to get the currently configured delay - the default is
            50 milliseconds.
            </para>
            </remarks>
            <seealso cref="T:SharpHook.EventSimulator" />
        </member>
        <member name="M:SharpHook.Native.UioHook.GetPostTextDelayX11">
            <summary>
            Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </summary>
            <returns>The delay (in nanoseconds) between posting individual characters when posting text on Linux.</returns>
            <remarks>
            <para>
            X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this method always returns 0.
            </para>
            </remarks>
            <seealso cref="T:SharpHook.EventSimulator" />
        </member>
        <member name="M:SharpHook.Native.UioHook.SetPostTextDelayX11(System.UInt64)">
            <summary>
            Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </summary>
            <param name="delayNanoseconds">
            The delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </param>
            <remarks>
            <para>
            X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this method does nothing.
            </para>
            </remarks>
            <seealso cref="T:SharpHook.EventSimulator" />
        </member>
        <member name="M:SharpHook.Native.UioHook.CreateScreenInfo(System.Byte@)">
            <summary>
            Gets the information about screens.
            </summary>
            <param name="count">The number of screens.</param>
            <returns>
            The information about screens as an unmanaged array of <see cref="T:SharpHook.Native.ScreenData" /> whose length is returned
            as <paramref name="count" />. The memory used by the array must be freed manually.
            </returns>
            <remarks>
            You should use <see cref="M:SharpHook.Native.UioHook.CreateScreenInfo" /> instead as it returns a managed array.
            </remarks>
            <seealso cref="M:SharpHook.Native.UioHook.CreateScreenInfo" />
        </member>
        <member name="M:SharpHook.Native.UioHook.CreateScreenInfo">
            <summary>
            Gets the information about screens.
            </summary>
            <returns>The information about screens.</returns>
            <remarks>
            This is the safe version of <see cref="M:SharpHook.Native.UioHook.CreateScreenInfo(System.Byte@)" /> as it returns a managed array.
            </remarks>
            <seealso cref="M:SharpHook.Native.UioHook.CreateScreenInfo(System.Byte@)" />
        </member>
        <member name="M:SharpHook.Native.UioHook.GetAutoRepeatRate">
            <summary>
            Gets the auto-repeat rate.
            </summary>
            <returns>The auto-repeat rate.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHook.GetAutoRepeatDelay">
            <summary>
            Gets the auto-repeat delay.
            </summary>
            <returns>The auto-repeat delay.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHook.GetPointerAccelerationMultiplier">
            <summary>
            Gets the pointer acceleration multiplier.
            </summary>
            <returns>The pointer acceleration multiplier.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHook.GetPointerAccelerationThreshold">
            <summary>
            Gets the pointer acceleration threshold.
            </summary>
            <returns>The pointer acceleration threshold.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHook.GetPointerSensitivity">
            <summary>
            Gets the pointer sensitivity.
            </summary>
            <returns>The pointer sensitivity.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHook.GetMultiClickTime">
            <summary>
            Gets the multi-click time.
            </summary>
            <returns>The multi-click time.</returns>
        </member>
        <member name="T:SharpHook.Native.UioHookEvent">
            <summary>
            Represents an event which can be raised by libuiohook.
            </summary>
            <remarks>
            <para>
            This is a union-like struct and the data it contains depends on the type of the event.
            </para>
            <para>
            The <see cref="F:SharpHook.Native.UioHookEvent.Keyboard" /> field is available for the events of the following types:
            <list type="bullet">
            <item><description><see cref="F:SharpHook.Native.EventType.KeyTyped" /></description></item>
            <item><description><see cref="F:SharpHook.Native.EventType.KeyPressed" /></description></item>
            <item><description><see cref="F:SharpHook.Native.EventType.KeyReleased" /></description></item>
            </list>
            </para>
            <para>
            The <see cref="F:SharpHook.Native.UioHookEvent.Mouse" /> field is available for the events of the following types:
            <list type="bullet">
            <item><description><see cref="F:SharpHook.Native.EventType.MouseClicked" /></description></item>
            <item><description><see cref="F:SharpHook.Native.EventType.MousePressed" /></description></item>
            <item><description><see cref="F:SharpHook.Native.EventType.MouseReleased" /></description></item>
            <item><description><see cref="F:SharpHook.Native.EventType.MouseMoved" /></description></item>
            <item><description><see cref="F:SharpHook.Native.EventType.MouseDragged" /></description></item>
            </list>
            </para>
            <para>
            The <see cref="F:SharpHook.Native.UioHookEvent.Wheel" /> field is available for the events of the following type:
            <list type="bullet">
            <item><description><see cref="F:SharpHook.Native.EventType.MouseWheel" /></description></item>
            </list>
            </para>
            </remarks>
            <seealso cref="T:SharpHook.Native.EventType" />
            <seealso cref="T:SharpHook.Native.ModifierMask" />
            <seealso cref="T:SharpHook.Native.KeyboardEventData" />
            <seealso cref="T:SharpHook.Native.MouseEventData" />
            <seealso cref="T:SharpHook.Native.MouseWheelEventData" />
        </member>
        <member name="F:SharpHook.Native.UioHookEvent.Type">
            <summary>
            The type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="F:SharpHook.Native.UioHookEvent.Time">
            <summary>
            The UNIX timestamp of the event.
            </summary>
            <value>The UNIX timestamp of the event.</value>
        </member>
        <member name="F:SharpHook.Native.UioHookEvent.Mask">
            <summary>
            The mask of the event.
            </summary>
            <value>The mask of the event.</value>
        </member>
        <member name="F:SharpHook.Native.UioHookEvent.Reserved">
            <summary>
            The reserved value which can be set in event handlers.
            </summary>
            <value>The reserved value which can be set in event handlers.</value>
            <remarks>The value for this field should be set on the same thread which handles the event.</remarks>
        </member>
        <member name="F:SharpHook.Native.UioHookEvent.Keyboard">
            <summary>
            The event data if this event is keyboard-related.
            </summary>
            <value>The event data if this event is keyboard-related.</value>
        </member>
        <member name="F:SharpHook.Native.UioHookEvent.Mouse">
            <summary>
            The event data if this event is mouse-related.
            </summary>
            <value>The event data if this event is mouse-related.</value>
        </member>
        <member name="F:SharpHook.Native.UioHookEvent.Wheel">
            <summary>
            The event data if this event is mouse wheel-related.
            </summary>
            <value>The event data if this event is mouse wheel-related.</value>
        </member>
        <member name="M:SharpHook.Native.UioHookEvent.Equals(System.Object)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.UioHookEvent.Equals(SharpHook.Native.UioHookEvent)">
            <summary>
            Compares this object to another object for equality.
            </summary>
            <param name="e">The object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.UioHookEvent.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHookEvent.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:SharpHook.Native.UioHookEvent.op_Equality(SharpHook.Native.UioHookEvent,SharpHook.Native.UioHookEvent)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:SharpHook.Native.UioHookEvent.op_Inequality(SharpHook.Native.UioHookEvent,SharpHook.Native.UioHookEvent)">
            <summary>
            Compares two objects for inequality.
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>
            <see langword="true" /> if the objects are not equal. Otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:SharpHook.Native.UioHookResult">
            <summary>
            Represents a result of an operation of libuiohook.
            </summary>
            <seealso cref="T:SharpHook.Native.UioHook" />
        </member>
        <member name="F:SharpHook.Native.UioHookResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorOutOfMemory">
            <summary>
            Out of memory
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorPostTextNull">
            <summary>
            A <see langword="null" /> string was passed to <see cref="M:SharpHook.Native.UioHook.PostText(System.String)" />.
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorXOpenDisplay">
            <summary>
            XOpenDisplay failed (X11)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorXRecordNotFound">
            <summary>
            XRecord not found (X11)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorXRecordAllocRange">
            <summary>
            XRecordAllocRange failed (X11)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorXRecordCreateContext">
            <summary>
            XRecordCreateContext failed (X11)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorXRecordEnableContext">
            <summary>
            XRecordEnableContext failed (X11)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorXRecordGetContext">
            <summary>
            XRecordGetContext failed (X11)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorSetWindowsHookEx">
            <summary>
            SetWindowsHookEx failed (Windows)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorGetModuleHandle">
            <summary>
            Couldn't get a module handle for SetWindowsHookEx (Windows)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorCreateInvisibleWindow">
            <summary>
            Couldn't create an invisible window which will listen to screen changes (Windows)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorAxApiDisabled">
            <summary>
            Accessibility API is disabled for the process (macOS)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorCreateEventPort">
            <summary>
            Failed to create an event port (macOS)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorCreateRunLoopSource">
            <summary>
            CFRunLoopSourceCreate or CFMachPortCreateRunLoopSource failed (macOS)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorGetRunLoop">
            <summary>
            CFRunLoopGetCurrent failed (macOS)
            </summary>
        </member>
        <member name="F:SharpHook.Native.UioHookResult.ErrorCreateObserver">
            <summary>
            CFRunLoopObserverCreate failed (macOS)
            </summary>
        </member>
        <member name="T:SharpHook.Providers.IEventSimulationProvider">
            <summary>
            Represents a provider of low-level event simulation functionality.
            </summary>
        </member>
        <member name="M:SharpHook.Providers.IEventSimulationProvider.PostEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            Posts a fake input event.
            </summary>
            <param name="e">The event to post.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The instance of the event doesn't need all fields to have value. Only <see cref="F:SharpHook.Native.UioHookEvent.Type" />,
            <see cref="F:SharpHook.Native.UioHookEvent.Keyboard" />/<see cref="F:SharpHook.Native.UioHookEvent.Mouse" />/<see cref="F:SharpHook.Native.UioHookEvent.Wheel" /> should
            be present.
            </para>
            <para>
            The following table describes the specifics of simulating each event type.
            <list type="table">
            <listheader>
            <term>Event type</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.HookEnabled" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.HookDisabled" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyPressed" /></term>
            <term>Only <see cref="F:SharpHook.Native.KeyboardEventData.KeyCode" /> is considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyReleased" /></term>
            <term>Only <see cref="F:SharpHook.Native.KeyboardEventData.KeyCode" /> is considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyTyped" /></term>
            <term>
            Events of this type are ignored. <see cref="M:SharpHook.Providers.IEventSimulationProvider.PostText(System.String)" /> should be used to post Unicode characters.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MousePressed" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.X" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Y" />,
            and <see cref="F:SharpHook.Native.MouseEventData.Button" /> are considered.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseReleased" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.X" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Y" />,
            and <see cref="F:SharpHook.Native.MouseEventData.Button" /> are considered.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseClicked" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseMoved" /></term>
            <term>Only <see cref="F:SharpHook.Native.MouseEventData.X" /> and <see cref="F:SharpHook.Native.MouseEventData.Y" /> are considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseDragged" /></term>
            <term>Not recommended to use; same as <see cref="F:SharpHook.Native.EventType.MouseMoved" />.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseWheel" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.Rotation" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Direction" />, and
            <see cref="F:SharpHook.Native.MouseWheelEventData.Type" /> are considered.
            </term>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.IEventSimulationProvider.PostText(System.String)">
            <summary>
            Simulates the input of arbitrary Unicode characters.
            </summary>
            <param name="text">The text to simulate.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including
            surrogate pairs, e.g. emojis) is supported.
            </para>
            <para>
            On Windows text simulation should work correctly and consistently.
            </para>
            <para>
            On macOS applications are not required to process text simulation, but most of them should handle it correctly.
            </para>
            <para>
            X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to
            that character, and then key press/release is simulated. Since the receiving application must react to the
            remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text
            entry on Linux works slowly and is not guaranteed to be correct. <see cref="M:SharpHook.Providers.IEventSimulationProvider.SetPostTextDelayX11(System.UInt64)" /> can be used
            to increase (or decrease) the delay if needed - longer delays add consistency but may be more jarring to end
            users. <see cref="M:SharpHook.Providers.IEventSimulationProvider.GetPostTextDelayX11" /> can be used to get the currently configured delay - the default is
            50 milliseconds.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.IEventSimulationProvider.GetPostTextDelayX11">
            <summary>
            Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </summary>
            <returns>The delay (in nanoseconds) between posting individual characters when posting text on Linux.</returns>
            <remarks>
            <para>
            X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this method always returns <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.IEventSimulationProvider.SetPostTextDelayX11(System.UInt64)">
            <summary>
            Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </summary>
            <param name="delayNanoseconds">
            The delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </param>
            <remarks>
            <para>
            X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this method does nothing.
            </para>
            </remarks>
        </member>
        <member name="T:SharpHook.Providers.IGlobalHookProvider">
            <summary>
            Represents a provider of low-level global hook functionality.
            </summary>
        </member>
        <member name="M:SharpHook.Providers.IGlobalHookProvider.SetDispatchProc(SharpHook.Native.DispatchProc,System.IntPtr)">
            <summary>
            Sets the hook callback function.
            </summary>
            <param name="dispatchProc">
            The function to call when an event is raised, or <see langword="null" /> to unset the function.
            </param>
            <param name="userData">
            Custom data to pass to the callback. Should not be used, and <see cref="F:System.IntPtr.Zero" /> should always be passed.
            </param>
        </member>
        <member name="M:SharpHook.Providers.IGlobalHookProvider.Run">
            <summary>
            Runs the global hook and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.Providers.IGlobalHookProvider.RunKeyboard">
            <summary>
            Runs the global hook only for keyboard events and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.Providers.IGlobalHookProvider.RunMouse">
            <summary>
            Runs the global hook only for mouse events and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.Providers.IGlobalHookProvider.Stop">
            <summary>
            Stops the global hook.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:SharpHook.Providers.ILoggingProvider">
            <summary>
            Represents a provider of low-level logging functionality.
            </summary>
        </member>
        <member name="M:SharpHook.Providers.ILoggingProvider.SetLoggerProc(SharpHook.Native.LoggerProc,System.IntPtr)">
            <summary>
            Sets the log callback function.
            </summary>
            <param name="loggerProc">
            The function to call for logging, or <see langword="null" /> to unset the function.
            </param>
            <param name="userData">
            Custom data to pass to the callback. Should not be used, and <see cref="F:System.IntPtr.Zero" /> should always be passed.
            </param>
        </member>
        <member name="T:SharpHook.Providers.IMouseInfoProvider">
            <summary>
            Represents a provider of low-level mouse info functionality.
            </summary>
        </member>
        <member name="M:SharpHook.Providers.IMouseInfoProvider.GetAutoRepeatRate">
            <summary>
            Gets the auto-repeat rate.
            </summary>
            <returns>The auto-repeat rate.</returns>
        </member>
        <member name="M:SharpHook.Providers.IMouseInfoProvider.GetAutoRepeatDelay">
            <summary>
            Gets the auto-repeat delay.
            </summary>
            <returns>The auto-repeat delay.</returns>
        </member>
        <member name="M:SharpHook.Providers.IMouseInfoProvider.GetPointerAccelerationMultiplier">
            <summary>
            Gets the pointer acceleration multiplier.
            </summary>
            <returns>The pointer acceleration multiplier.</returns>
        </member>
        <member name="M:SharpHook.Providers.IMouseInfoProvider.GetPointerAccelerationThreshold">
            <summary>
            Gets the pointer acceleration threshold.
            </summary>
            <returns>The pointer acceleration threshold.</returns>
        </member>
        <member name="M:SharpHook.Providers.IMouseInfoProvider.GetPointerSensitivity">
            <summary>
            Gets the pointer sensitivity.
            </summary>
            <returns>The pointer sensitivity.</returns>
        </member>
        <member name="M:SharpHook.Providers.IMouseInfoProvider.GetMultiClickTime">
            <summary>
            Gets the multi-click time.
            </summary>
            <returns>The multi-click time.</returns>
        </member>
        <member name="T:SharpHook.Providers.IScreenInfoProvider">
            <summary>
            Represents a provider of low-level screen info functionality.
            </summary>
        </member>
        <member name="M:SharpHook.Providers.IScreenInfoProvider.CreateScreenInfo">
            <summary>
            Gets the information about screens.
            </summary>
            <returns>The information about screens.</returns>
        </member>
        <member name="T:SharpHook.Providers.UioHookProvider">
            <summary>
            A provider of low-level functionality which delegates it to the <see cref="T:SharpHook.Native.UioHook" /> class.
            </summary>
            <seealso cref="T:SharpHook.Native.UioHook" />
        </member>
        <member name="P:SharpHook.Providers.UioHookProvider.Instance">
            <summary>
            Gets the single instance of <see cref="T:SharpHook.Providers.UioHookProvider" />.
            </summary>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.SetDispatchProc(SharpHook.Native.DispatchProc,System.IntPtr)">
            <summary>
            Sets the hook callback function.
            </summary>
            <param name="dispatchProc">
            The function to call when an event is raised, or <see langword="null" /> to unset the function.
            </param>
            <param name="userData">
            Custom data to pass to the callback. Should not be used, and <see cref="F:System.IntPtr.Zero" /> should always be passed.
            </param>
            <seealso cref="T:SharpHook.Native.DispatchProc" />
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.Run">
            <summary>
            Runs the global hook and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.RunKeyboard">
            <summary>
            Runs the global hook only for keyboard events and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
            <remarks>
            This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and
            a mouse hook. On macOS and Linux there is one hook for all events, and this method simply filters mouse events
            out at the libuiohook level on these OSes.
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.RunMouse">
            <summary>
            Runs the global hook only for mouse events and blocks the thread until it's stopped.
            </summary>
            <returns>The result of the operation.</returns>
            <remarks>
            This method makes a difference only on Windows where there are two different global hooks - a keyboard hook and
            a mouse hook. On macOS and Linux there is one hook for all events, and this method simply filters keyboard
            events out at the libuiohook level on these OSes.
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.Stop">
            <summary>
            Stops the global hook.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.SetLoggerProc(SharpHook.Native.LoggerProc,System.IntPtr)">
            <summary>
            Sets the log callback function.
            </summary>
            <param name="loggerProc">
            The function to call for logging, or <see langword="null" /> to unset the function.
            </param>
            <param name="userData">
            Custom data to pass to the callback. Should not be used, and <see cref="F:System.IntPtr.Zero" /> should always be passed.
            </param>
            <seealso cref="T:SharpHook.Native.LoggerProc" />
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.PostEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            Posts a fake input event.
            </summary>
            <param name="e">The event to post.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The instance of the event doesn't need all fields to have value. Only <see cref="F:SharpHook.Native.UioHookEvent.Type" />,
            <see cref="F:SharpHook.Native.UioHookEvent.Keyboard" />/<see cref="F:SharpHook.Native.UioHookEvent.Mouse" />/<see cref="F:SharpHook.Native.UioHookEvent.Wheel" /> should
            be present.
            </para>
            <para>
            The following table describes the specifics of simulating each event type.
            <list type="table">
            <listheader>
            <term>Event type</term>
            <term>Description</term>
            </listheader>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.HookEnabled" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.HookDisabled" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyPressed" /></term>
            <term>Only <see cref="F:SharpHook.Native.KeyboardEventData.KeyCode" /> is considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyReleased" /></term>
            <term>Only <see cref="F:SharpHook.Native.KeyboardEventData.KeyCode" /> is considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.KeyTyped" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MousePressed" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.X" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Y" />,
            and <see cref="F:SharpHook.Native.MouseEventData.Button" /> are considered.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseReleased" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.X" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Y" />,
            and <see cref="F:SharpHook.Native.MouseEventData.Button" /> are considered.
            </term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseClicked" /></term>
            <term>Events of this type are ignored.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseMoved" /></term>
            <term>Only <see cref="F:SharpHook.Native.MouseEventData.X" /> and <see cref="F:SharpHook.Native.MouseEventData.Y" /> are considered.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseDragged" /></term>
            <term>Not recommended to use; same as <see cref="F:SharpHook.Native.EventType.MouseMoved" />.</term>
            </item>
            <item>
            <term><see cref="F:SharpHook.Native.EventType.MouseWheel" /></term>
            <term>
            Only <see cref="F:SharpHook.Native.MouseWheelEventData.Rotation" />, <see cref="F:SharpHook.Native.MouseWheelEventData.Direction" />, and
            <see cref="F:SharpHook.Native.MouseWheelEventData.Type" /> are considered.
            </term>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.PostText(System.String)">
            <summary>
            Simulates input of arbitrary Unicode characters.
            </summary>
            <param name="text">The Unicode characters to simulate.</param>
            <returns>The result of the operation.</returns>
            <remarks>
            <para>
            The text to simulate doesn't depend on the current keyboard layout. The full range of UTF-16 (including
            surrogate pairs, e.g. emojis) is supported.
            </para>
            <para>
            On Windows text simulation should work correctly and consistently.
            </para>
            <para>
            On macOS applications are not required to process text simulation, but most of them should handle it correctly.
            </para>
            <para>
            X11 doesn't support text simulation directly. Instead, for each character, an unused key code is remapped to
            that character, and then key press/release is simulated. Since the receiving application must react to the
            remapping, and may not do so instantaneously, a delay is needed for accurate simulation. This means that text
            simulation on Linux works slowly and is not guaranteed to be correct. <see cref="M:SharpHook.Providers.UioHookProvider.SetPostTextDelayX11(System.UInt64)" /> can be
            used to increase (or decrease) the delay if needed - longer delays add consistency but may be more jarring to
            end users. <see cref="M:SharpHook.Providers.UioHookProvider.GetPostTextDelayX11" /> can be used to get the currently configured delay - the default is
            50 milliseconds.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.GetPostTextDelayX11">
            <summary>
            Gets the delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </summary>
            <returns>The delay (in nanoseconds) between posting individual characters when posting text on Linux.</returns>
            <remarks>
            <para>
            X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this method always returns <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.SetPostTextDelayX11(System.UInt64)">
            <summary>
            Sets the delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </summary>
            <param name="delayNanoseconds">
            The delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </param>
            <remarks>
            <para>
            X11 doesn't support posting arbitrary Unicode characters directly. Instead, for each character,
            an unused key code is remapped to that character, and then key press/release is simulated. Since the receiving
            application must react to the remapping, and may not do so instantaneously, a delay is needed for accurate
            simulation.
            </para>
            <para>
            The default delay is 50 milliseconds.
            </para>
            <para>
            On Windows and macOS this method does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.CreateScreenInfo">
            <summary>
            Gets the information about screens.
            </summary>
            <returns>The information about screens.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.GetAutoRepeatRate">
            <summary>
            Gets the auto-repeat rate.
            </summary>
            <returns>The auto-repeat rate.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.GetAutoRepeatDelay">
            <summary>
            Gets the auto-repeat delay.
            </summary>
            <returns>The auto-repeat delay.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.GetPointerAccelerationMultiplier">
            <summary>
            Gets the pointer acceleration multiplier.
            </summary>
            <returns>The pointer acceleration multiplier.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.GetPointerAccelerationThreshold">
            <summary>
            Gets the pointer acceleration threshold.
            </summary>
            <returns>The pointer acceleration threshold.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.GetPointerSensitivity">
            <summary>
            Gets the pointer sensitivity.
            </summary>
            <returns>The pointer sensitivity.</returns>
        </member>
        <member name="M:SharpHook.Providers.UioHookProvider.GetMultiClickTime">
            <summary>
            Gets the multi-click time.
            </summary>
            <returns>The multi-click time.</returns>
        </member>
        <member name="T:SharpHook.SimpleGlobalHook">
            <summary>
            Represents an implementation of <see cref="T:SharpHook.IGlobalHook" /> which raises events on the same thread on which
            the hook itself runs.
            </summary>
            <remarks>
            The event handlers should generally be fast and simple so that the thread can process all raised events. If you
            need to do a lot of processing in the event handlers then consider using another implementation, e.g.
            <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </remarks>
            <seealso cref="T:SharpHook.IGlobalHook" />
            <seealso cref="T:SharpHook.GlobalHookBase" />
            <seealso cref="T:SharpHook.TaskPoolGlobalHook" />
        </member>
        <member name="M:SharpHook.SimpleGlobalHook.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.SimpleGlobalHook" />.
            </summary>
        </member>
        <member name="M:SharpHook.SimpleGlobalHook.#ctor(SharpHook.Providers.IGlobalHookProvider)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.SimpleGlobalHook" />.
            </summary>
            <param name="globalHookProvider">The underlying global hook provider.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="globalHookProvider"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:SharpHook.SimpleGlobalHook.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.SimpleGlobalHook" />.
            </summary>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
        </member>
        <member name="M:SharpHook.SimpleGlobalHook.#ctor(SharpHook.Providers.IGlobalHookProvider,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.SimpleGlobalHook" />.
            </summary>
            <param name="globalHookProvider">The underlying global hook provider.</param>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="globalHookProvider"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:SharpHook.SimpleGlobalHook.#ctor(SharpHook.GlobalHookType,SharpHook.Providers.IGlobalHookProvider,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.SimpleGlobalHook" />.
            </summary>
            <param name="globalHookType">The global hook type.</param>
            <param name="globalHookProvider">
            The underlying global hook provider, or <see langword="null" /> to use the default one.
            </param>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
        </member>
        <member name="M:SharpHook.SimpleGlobalHook.HandleHookEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            Handles the hook event.
            </summary>
            <param name="e">The event to handle.</param>
        </member>
        <member name="T:SharpHook.TaskPoolGlobalHook">
            <summary>
            Represents a task pool-based implementation of <see cref="T:SharpHook.IGlobalHook" />.
            </summary>
            <remarks>
            <para>
            The event handlers will run with the specified parallelism level on separate threads inside the default thread
            pool for tasks. This way the hook itself will not be blocked if the handlers are long-running.
            The exception is the <see cref="E:SharpHook.IGlobalHook.HookDisabled" /> event which will run on the same thread that called
            the <see cref="M:System.IDisposable.Dispose" /> method since at that point it doesn't matter anymore that the hook is
            not blocked.
            </para>
            <para>
            Setting <see cref="P:SharpHook.HookEventArgs.SuppressEvent" /> inside the handlers will have no effect as they are run
            on other threads.
            </para>
            </remarks>
            <seealso cref="T:SharpHook.IGlobalHook" />
            <seealso cref="T:SharpHook.GlobalHookBase" />
            <seealso cref="T:SharpHook.SimpleGlobalHook" />
            <seealso cref="T:SharpHook.TaskPoolGlobalHookOptions" />
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHook.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </summary>
            <remarks>
            Calling this constructor is the same as passing <see cref="F:SharpHook.TaskPoolGlobalHookOptions.Sequential" /> to the
            other constructor.
            </remarks>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHook.#ctor(SharpHook.Providers.IGlobalHookProvider)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </summary>
            <param name="globalHookProvider">The underlying global hook provider.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="globalHookProvider"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHook.#ctor(SharpHook.TaskPoolGlobalHookOptions)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </summary>
            <param name="options">The options of the hook which include its parallelism level.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHook.#ctor(SharpHook.Providers.IGlobalHookProvider,SharpHook.TaskPoolGlobalHookOptions)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </summary>
            <param name="globalHookProvider">The underlying global hook provider.</param>
            <param name="options">The options of the hook which include its parallelism level.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="globalHookProvider"/> or <paramref name="options" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHook.#ctor(System.Int32,SharpHook.GlobalHookType,SharpHook.Providers.IGlobalHookProvider,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </summary>
            <param name="parallelismLevel">The parallelism level of event handlers.</param>
            <param name="globalHookType">The global hook type.</param>
            <param name="globalHookProvider">
            The underlying global hook provider, or <see langword="null" /> to use the default one.
            </param>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHook.HandleHookEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            Handles the hook event.
            </summary>
            <param name="e">The event to handle.</param>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHook.Dispose(System.Boolean)">
            <summary>
            Destoys the global hook.
            </summary>
            <param name="disposing">
            <see langword="true" /> if the method is called from the <see cref="M:System.IDisposable.Dispose" /> method.
            Otherwise, <see langword="false" />.
            </param>
            <exception cref="T:SharpHook.HookException">Stopping the hook has failed.</exception>
            <remarks>
            After calling this method, the hook cannot be started again. If you want to do that, create a new instance
            of <see cref="T:SharpHook.IGlobalHook" />.
            </remarks>
        </member>
        <member name="T:SharpHook.TaskPoolGlobalHookOptions">
            <summary>
            Represents options for <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </summary>
            <param name="parallelismLevel">The parallelism level of the event handlers.</param>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
            <seealso cref="T:SharpHook.TaskPoolGlobalHook" />
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHookOptions.#ctor(System.Int32,System.Boolean)">
            <summary>
            Represents options for <see cref="T:SharpHook.TaskPoolGlobalHook" />.
            </summary>
            <param name="parallelismLevel">The parallelism level of the event handlers.</param>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
            <seealso cref="T:SharpHook.TaskPoolGlobalHook" />
        </member>
        <member name="F:SharpHook.TaskPoolGlobalHookOptions.Sequential">
            <summary>
            The default options with the parallelism level of 1.
            </summary>
            <value>The options with the parallelism level of 1.</value>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHookOptions.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.TaskPoolGlobalHookOptions" />.
            </summary>
            <param name="parallelismLevel">The parallelism level of the event handlers.</param>
        </member>
        <member name="M:SharpHook.TaskPoolGlobalHookOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:SharpHook.TaskPoolGlobalHookOptions" />.
            </summary>
            <param name="runAsyncOnBackgroundThread">
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </param>
        </member>
        <member name="P:SharpHook.TaskPoolGlobalHookOptions.ParallelismLevel">
            <summary>
            Gets the configured parallelism level of the event handlers.
            </summary>
            <value>The parallelism level of the event handlers.</value>
        </member>
        <member name="P:SharpHook.TaskPoolGlobalHookOptions.RunAsyncOnBackgroundThread">
            <summary>
            Gets the value of whether <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            </summary>
            <value>
            <see langword="true" /> if <see cref="M:SharpHook.IGlobalHook.RunAsync" /> should run the hook on a background thread.
            Otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="T:SharpHook.Testing.TestGlobalHook">
            <summary>
            A global hook and event simulator which can be used in tests.
            </summary>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.IsRunning">
            <summary>
            Gets the value which indicates whether the global hook is running.
            </summary>
            <value><see langword="true" /> if the global hook is running. Otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.IsDisposed">
            <summary>
            Gets the value which indicates whether the global hook is disposed.
            </summary>
            <value><see langword="true" /> if the global hook is disposed. Otherwise, <see langword="false" />.</value>
            <remarks>A disposed global hook cannot be started again.</remarks>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulatedEvents">
            <summary>
            Gets the events that have been simulated using this instance.
            </summary>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulatedText">
            <summary>
            Gets the text that has been simulated using this instance.
            </summary>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.EventDateTime">
            <summary>
            Gets or sets the function which will be called to set the date/time of events.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.EventMask">
            <summary>
            Gets or sets the function which will be called to set the mask of events.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.KeyCodeToChars">
            <summary>
            Gets or sets the function which will map key codes to characters.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <remarks>By default every key code maps to an empty character sequence.</remarks>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.KeyCodeToRawCode">
            <summary>
            Gets or sets the function which will map key codes to raw key codes.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.CurrentMouseX">
            <summary>
            Gets or sets the function which will specify the current mouse X-coordinate.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.CurrentMouseY">
            <summary>
            Gets or sets the function which will specify the current mouse Y-coordinate.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.MouseClickCount">
            <summary>
            Gets or sets the click count for events of type <see cref="F:SharpHook.Native.EventType.MousePressed" />,
            <see cref="F:SharpHook.Native.EventType.MouseReleased" />, and <see cref="F:SharpHook.Native.EventType.MouseClicked" />.
            </summary>
            <value>
            The click count for events of type <see cref="F:SharpHook.Native.EventType.MousePressed" />,
            <see cref="F:SharpHook.Native.EventType.MouseReleased" />, and <see cref="F:SharpHook.Native.EventType.MouseClicked" />.
            </value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.RaiseMouseClicked">
            <summary>
            Gets or sets the value which specifies whether <see cref="F:SharpHook.Native.EventType.MouseClicked" /> events should be raised
            after <see cref="F:SharpHook.Native.EventType.MouseReleased" /> events.
            </summary>
            <value>
            <see langword="true" /> if <see cref="F:SharpHook.Native.EventType.MouseClicked" /> events should be raised.
            </value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.DragMouseWhenMoving">
            <summary>
            Gets or sets the value which indicates whether simulating mouse movement will simulate events of type
            <see cref="F:SharpHook.Native.EventType.MouseDragged" />.
            </summary>
            <value>
            <see langword="true" /> if simulating mouse movement should simulate events of type
            <see cref="F:SharpHook.Native.EventType.MouseDragged" />. Otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.RunResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.Run" /> and <see cref="M:SharpHook.Testing.TestGlobalHook.RunAsync" /> methods. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will throw a <see cref="T:SharpHook.HookException" />.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.Run" /> and <see cref="M:SharpHook.Testing.TestGlobalHook.RunAsync" /> methods.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.DisposeResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.Dispose" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will throw a <see cref="T:SharpHook.HookException" />.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.Dispose" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulateKeyPressResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateKeyPress(SharpHook.Native.KeyCode)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will do nothing.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateKeyPress(SharpHook.Native.KeyCode)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulateKeyReleaseResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateKeyRelease(SharpHook.Native.KeyCode)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will do nothing.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateKeyRelease(SharpHook.Native.KeyCode)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulateTextEntryResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateTextEntry(System.String)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will do nothing.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateTextEntry(System.String)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMousePress(SharpHook.Native.MouseButton)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will do nothing.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMousePress(SharpHook.Native.MouseButton)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMouseRelease(SharpHook.Native.MouseButton)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will do nothing.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMouseRelease(SharpHook.Native.MouseButton)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulateMouseMovementResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMouseMovement(System.Int16,System.Int16)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will do nothing.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMouseMovement(System.Int16,System.Int16)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestGlobalHook.SimulateMouseWheelResult">
            <summary>
            Gets or sets the result of the
            <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMouseWheel(System.Int16,SharpHook.Native.MouseWheelScrollDirection,SharpHook.Native.MouseWheelScrollType)" /> method. If anything
            other than <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the method will do nothing.
            </summary>
            <value>
            The result of the <see cref="M:SharpHook.Testing.TestGlobalHook.SimulateMouseWheel(System.Int16,SharpHook.Native.MouseWheelScrollDirection,SharpHook.Native.MouseWheelScrollType)" />
            method.
            </value>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.Run">
            <summary>
            Runs the global hook on the current thread, blocking it. The hook can be destroyed by calling the
            <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
            <exception cref="T:SharpHook.HookException">
            <see cref="P:SharpHook.Testing.TestGlobalHook.RunResult" /> was set to something other than <see cref="F:SharpHook.Native.UioHookResult.Success" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">The global hook is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">The global hook has been disposed.</exception>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.RunAsync">
            <summary>
            Runs the global hook without blocking the current thread. The hook can be destroyed by calling the
            <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which finishes when the hook is destroyed.</returns>
            <exception cref="T:SharpHook.HookException">
            <see cref="P:SharpHook.Testing.TestGlobalHook.RunResult" /> was set to something other than <see cref="F:SharpHook.Native.UioHookResult.Success" />.
            </exception>
            <exception cref="T:System.InvalidOperationException">The global hook is already running.</exception>
            <exception cref="T:System.ObjectDisposedException">The global hook has been disposed.</exception>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.Dispose">
            <summary>
            Destroys the global hook.
            </summary>
            <exception cref="T:SharpHook.HookException">
            <see cref="P:SharpHook.Testing.TestGlobalHook.DisposeResult" /> was set to something other than <see cref="F:SharpHook.Native.UioHookResult.Success" />.
            </exception>
            <remarks>
            After calling this method, the hook cannot be started again. This method does nothing if the hook has already
            been disposed.
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateKeyPress(SharpHook.Native.KeyCode)">
            <summary>
            Simulates pressing a key if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateKeyPressResult" /> is <see cref="F:SharpHook.Native.UioHookResult.Success" />.
            Otherwise, does nothing.
            </summary>
            <param name="keyCode">The code of the key to press.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateKeyPressResult" />.</returns>
            <remarks>
            This method simulates <see cref="F:SharpHook.Native.EventType.KeyTyped" /> events as well if <see cref="P:SharpHook.Testing.TestGlobalHook.KeyCodeToChars" /> returns
            characters for <paramref name="keyCode" />.
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateKeyRelease(SharpHook.Native.KeyCode)">
            <summary>
            Simulates releasing a key if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateKeyReleaseResult" /> is <see cref="F:SharpHook.Native.UioHookResult.Success" />.
            Otherwise, does nothing.
            </summary>
            <param name="keyCode">The code of the key to release.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateKeyReleaseResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateTextEntry(System.String)">
            <summary>
            Simulates the input of arbitrary Unicode characters if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateTextEntryResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="text">The text to simulate.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateTextEntryResult" />.</returns>
            <remarks>This method doesn't cause any input events to be created, unlike real text entry simulation.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMousePress(SharpHook.Native.MouseButton)">
            <summary>
            Simulates pressing a mouse button at the current coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="button">The mouse button to press.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMousePress(SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates pressing a mouse button at the current coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="button">The mouse button to press.</param>
            <param name="clicks">The click count.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMousePress(System.Int16,System.Int16,SharpHook.Native.MouseButton)">
            <summary>
            Simulates pressing a mouse button at the specified coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to press.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMousePress(System.Int16,System.Int16,SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates pressing a mouse button at the specified coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to press.</param>
            <param name="clicks">The click count.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMousePressResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMouseRelease(SharpHook.Native.MouseButton)">
            <summary>
            Simulates releasing a mouse button at the current coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="button">The mouse button to release.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" />.</returns>
            <remarks>
            This method simulates a <see cref="F:SharpHook.Native.EventType.MouseClicked" /> event as well if <see cref="P:SharpHook.Testing.TestGlobalHook.RaiseMouseClicked" />
            is <see langword="true" />.
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMouseRelease(SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates releasing a mouse button at the current coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="button">The mouse button to release.</param>
            <param name="clicks">The click count.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" />.</returns>
            <remarks>
            This method simulates a <see cref="F:SharpHook.Native.EventType.MouseClicked" /> event as well if <see cref="P:SharpHook.Testing.TestGlobalHook.RaiseMouseClicked" />
            is <see langword="true" />.
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMouseRelease(System.Int16,System.Int16,SharpHook.Native.MouseButton)">
            <summary>
            Simulates releasing a mouse button at the specified coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to release.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" />.</returns>
            <remarks>
            This method simulates a <see cref="F:SharpHook.Native.EventType.MouseClicked" /> event as well if <see cref="P:SharpHook.Testing.TestGlobalHook.RaiseMouseClicked" />
            is <see langword="true" />.
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMouseRelease(System.Int16,System.Int16,SharpHook.Native.MouseButton,System.UInt16)">
            <summary>
            Simulates releasing a mouse button at the specified coordinates if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <param name="button">The mouse button to release.</param>
            <param name="clicks">The click count.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseReleaseResult" />.</returns>
            <remarks>
            This method simulates a <see cref="F:SharpHook.Native.EventType.MouseClicked" /> event as well if <see cref="P:SharpHook.Testing.TestGlobalHook.RaiseMouseClicked" />
            is <see langword="true" />.
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMouseMovement(System.Int16,System.Int16)">
            <summary>
            Simulates moving a mouse pointer if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseMovementResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="x">The target X-coordinate of the mouse pointer.</param>
            <param name="y">The target Y-coordinate of the mouse pointer.</param>
            <returns>The result of the operation.</returns>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseMovementResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMouseMovementRelative(System.Int16,System.Int16)">
            <summary>
            Simulates moving a mouse pointer relative to the current cursor position if
            <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseMovementResult" /> is <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="x">The X-coordinate offset.</param>
            <param name="y">The Y-coordinate offset.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseMovementResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestGlobalHook.SimulateMouseWheel(System.Int16,SharpHook.Native.MouseWheelScrollDirection,SharpHook.Native.MouseWheelScrollType)">
            <summary>
            Simulates scrolling the mouse wheel if <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseWheelResult" /> is
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="rotation">
            The wheel rotation. A positive value indicates that the wheel will be rotated up or left,
            and a negative value indicates that the wheel will be rotated down or right.
            </param>
            <param name="direction">The scroll direction.</param>
            <param name="type">The scroll type.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestGlobalHook.SimulateMouseWheelResult" />.</returns>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.HookEnabled">
            <summary>
            An event which is raised when the global hook is enabled.
            </summary>
            <remarks>This event is raised when the <see cref="M:SharpHook.Testing.TestGlobalHook.Run" /> or <see cref="M:SharpHook.Testing.TestGlobalHook.RunAsync" /> method is called.</remarks>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.HookDisabled">
            <summary>
            An event which is raised when the global hook is disabled.
            </summary>
            <remarks>This event is raised when the <see cref="M:System.IDisposable.Dispose" /> method is called.</remarks>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.KeyTyped">
            <summary>
            An event which is raised when a key is typed.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.KeyPressed">
            <summary>
            An event which is raised when a key is pressed.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.KeyReleased">
            <summary>
            An event which is raised when a key is released.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.MouseClicked">
            <summary>
            An event which is raised when a mouse button is clicked.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.MousePressed">
            <summary>
            An event which is raised when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.MouseReleased">
            <summary>
            An event which is raised when a mouse button is released.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.MouseMoved">
            <summary>
            An event which is raised when the mouse cursor is moved.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.MouseDragged">
            <summary>
            An event which is raised when the mouse cursor is dragged.
            </summary>
        </member>
        <member name="E:SharpHook.Testing.TestGlobalHook.MouseWheel">
            <summary>
            An event which is raised when the mouse wheel is scrolled.
            </summary>
        </member>
        <member name="T:SharpHook.Testing.TestProvider">
            <summary>
            A provider of low-level functionality which can be used in tests.
            </summary>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PostedEvents">
            <summary>
            Gets the events that have been posted using <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" />.
            </summary>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PostedText">
            <summary>
            Gets the text that has been posted using <see cref="M:SharpHook.Testing.TestProvider.PostText(System.String)" />.
            </summary>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.IsRunning">
            <summary>
            Gets the value which indicates whether this provider runs the testing hook.
            </summary>
            <value><see langword="true" /> if the testing hook is running. Otherwise, <see langword="false" />.</value>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.GlobalHookType">
            <summary>
            Gets the global hook type of this provider. The provider is set when the <see cref="M:SharpHook.Testing.TestProvider.Run" />,
            <see cref="M:SharpHook.Testing.TestProvider.RunKeyboard" />, or <see cref="M:SharpHook.Testing.TestProvider.RunMouse" /> method is called.
            </summary>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.EventDateTime">
            <summary>
            Gets or sets the function which will be called to set the date/time of the <see cref="F:SharpHook.Native.EventType.HookEnabled" />
            and <see cref="F:SharpHook.Native.EventType.HookDisabled" /> events.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.EventMask">
            <summary>
            Gets or sets the function which will be called to set the mask of the <see cref="F:SharpHook.Native.EventType.HookEnabled" />
            and <see cref="F:SharpHook.Native.EventType.HookDisabled" /> events.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.RunResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestProvider.Run" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the testing hook won't be started.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestProvider.Run" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.StopResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestProvider.Stop" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the testing hook won't be stopped.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestProvider.Stop" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PostEventResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the event won't be posted.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PostTextResult">
            <summary>
            Gets or sets the result of the <see cref="M:SharpHook.Testing.TestProvider.PostText(System.String)" /> method. If anything other than
            <see cref="F:SharpHook.Native.UioHookResult.Success" /> is set, then the text won't be posted.
            </summary>
            <value>The result of the <see cref="M:SharpHook.Testing.TestProvider.PostText(System.String)" /> method.</value>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PostTextDelayX11">
            <summary>
            Gets or sets the delay (in nanoseconds) between posting individual characters when posting text on Linux.
            </summary>
            <returns>The delay (in nanoseconds) between posting individual characters when posting text on Linux.</returns>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.ScreenInfo">
            <summary>
            Gets or sets the information about screens for testing.
            </summary>
            <returns>The information about screens.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.AutoRepeatRate">
            <summary>
            Gets or sets the auto-repeat rate for testing.
            </summary>
            <returns>The auto-repeat rate.</returns>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.AutoRepeatDelay">
            <summary>
            Gets or sets the auto-repeat delay for testing.
            </summary>
            <returns>The auto-repeat rate.</returns>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PointerAccelerationMultiplier">
            <summary>
            Gets or sets the pointer acceleration multiplier for testing.
            </summary>
            <returns>The pointer acceleration multiplier.</returns>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PointerAccelerationThreshold">
            <summary>
            Gets or sets the pointer acceleration threshold for testing.
            </summary>
            <returns>The pointer acceleration threshold.</returns>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.PointerSensitivity">
            <summary>
            Gets or sets the pointer sensitivity for testing.
            </summary>
            <returns>The pointer sensitivity.</returns>
        </member>
        <member name="P:SharpHook.Testing.TestProvider.MultiClickTime">
            <summary>
            Gets or sets the multi-click time for testing.
            </summary>
            <returns>The multi-click time.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.SetDispatchProc(SharpHook.Native.DispatchProc,System.IntPtr)">
            <summary>
            Sets the hook callback function for testing.
            </summary>
            <param name="dispatchProc">
            The function to call when an event is raised, or <see langword="null" /> to unset the function.
            </param>
            <param name="userData">
            Custom data to pass to the callback.
            </param>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.Run">
            <summary>
            Runs the testing hook if <see cref="P:SharpHook.Testing.TestProvider.RunResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise,
            does nothing.
            </summary>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.RunResult" />.</returns>
            <remarks>
            <para>
            This method simply blocks the current thread until <see cref="M:SharpHook.Testing.TestProvider.Stop" /> is called. Actual event dispatching
            happens directly in the <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method. As such, it's different from the real
            global hook where the thread which calls the <see cref="M:SharpHook.Providers.IGlobalHookProvider.Run" /> method is the thread
            which dispatches events - this is not the case with <see cref="T:SharpHook.Testing.TestProvider" />.
            </para>
            <para>
            This method can be called when the provider is already running - it will also block the current thread.
            Calling the <see cref="M:SharpHook.Testing.TestProvider.Stop" /> method will unblock all blocked threads.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.RunKeyboard">
            <summary>
            Runs the testing hook if <see cref="P:SharpHook.Testing.TestProvider.RunResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise,
            does nothing. The hook will react only to keyboard events.
            </summary>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.RunResult" />.</returns>
            <remarks>
            <para>
            This method simply blocks the current thread until <see cref="M:SharpHook.Testing.TestProvider.Stop" /> is called. Actual event dispatching
            happens directly in the <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method. As such, it's different from the real
            global hook where the thread which calls the <see cref="M:SharpHook.Providers.IGlobalHookProvider.Run" /> method is the thread
            which dispatches events - this is not the case with <see cref="T:SharpHook.Testing.TestProvider" />.
            </para>
            <para>
            This method can be called when the provider is already running - it will also block the current thread.
            Calling the <see cref="M:SharpHook.Testing.TestProvider.Stop" /> method will unblock all blocked threads. This is not recommended though as it
            does not mirror the behaviour of the real hook, and will throw an exception in a future release.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.RunMouse">
            <summary>
            Runs the testing hook if <see cref="P:SharpHook.Testing.TestProvider.RunResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise,
            does nothing. The hook will react only to mouse events.
            </summary>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.RunResult" />.</returns>
            <remarks>
            <para>
            This method simply blocks the current thread until <see cref="M:SharpHook.Testing.TestProvider.Stop" /> is called. Actual event dispatching
            happens directly in the <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method. As such, it's different from the real
            global hook where the thread which calls the <see cref="M:SharpHook.Providers.IGlobalHookProvider.Run" /> method is the thread
            which dispatches events - this is not the case with <see cref="T:SharpHook.Testing.TestProvider" />.
            </para>
            <para>
            This method can be called when the provider is already running - it will also block the current thread.
            Calling the <see cref="M:SharpHook.Testing.TestProvider.Stop" /> method will unblock all blocked threads. This is not recommended though as it
            does not mirror the behaviour of the real hook, and will throw an exception in a future release.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.RunAsync">
            <summary>
            Runs the testing hook if <see cref="P:SharpHook.Testing.TestProvider.RunResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise,
            does nothing.
            </summary>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.RunResult" />.</returns>
            <remarks>
            <para>
            This method doesn't do anything and returns a <see cref="T:System.Threading.Tasks.Task" /> which will be finished when
            <see cref="M:SharpHook.Testing.TestProvider.Stop" /> is called. Actual event dispatching happens directly in the
            <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method. As such, it's different from the real global hook where
            the thread which calls the <see cref="M:SharpHook.Providers.IGlobalHookProvider.Run" /> method is the thread which dispatches
            events - this is not the case with <see cref="T:SharpHook.Testing.TestProvider" />.
            </para>
            <para>
            This method can be called when the provider is already running - the same <see cref="T:System.Threading.Tasks.Task" /> will be returned.
            This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception
            in a future version.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.RunKeyboardAsync">
            <summary>
            Runs the testing hook if <see cref="P:SharpHook.Testing.TestProvider.RunResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise,
            does nothing. The hook will react only to keyboard events.
            </summary>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.RunResult" />.</returns>
            <remarks>
            <para>
            This method doesn't do anything and returns a <see cref="T:System.Threading.Tasks.Task" /> which will be finished when
            <see cref="M:SharpHook.Testing.TestProvider.Stop" /> is called. Actual event dispatching happens directly in the
            <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method. As such, it's different from the real global hook where
            the thread which calls the <see cref="M:SharpHook.Providers.IGlobalHookProvider.Run" /> method is the thread which dispatches
            events - this is not the case with <see cref="T:SharpHook.Testing.TestProvider" />.
            </para>
            <para>
            This method can be called when the provider is already running - the same <see cref="T:System.Threading.Tasks.Task" /> will be returned.
            This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception
            in a future version.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.RunMouseAsync">
            <summary>
            Runs the testing hook if <see cref="P:SharpHook.Testing.TestProvider.RunResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise,
            does nothing. The hook will react only to mouse events.
            </summary>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.RunResult" />.</returns>
            <remarks>
            <para>
            This method doesn't do anything and returns a <see cref="T:System.Threading.Tasks.Task" /> which will be finished when
            <see cref="M:SharpHook.Testing.TestProvider.Stop" /> is called. Actual event dispatching happens directly in the
            <see cref="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)" /> method. As such, it's different from the real global hook where
            the thread which calls the <see cref="M:SharpHook.Providers.IGlobalHookProvider.Run" /> method is the thread which dispatches
            events - this is not the case with <see cref="T:SharpHook.Testing.TestProvider" />.
            </para>
            <para>
            This method can be called when the provider is already running - the same <see cref="T:System.Threading.Tasks.Task" /> will be returned.
            This is not recommended though as it does not mirror the behaviour of the real hook, and will throw an exception
            in a future version.
            </para>
            </remarks>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.Stop">
            <summary>
            Stops the testing hook if <see cref="P:SharpHook.Testing.TestProvider.StopResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise,
            does nothing.
            </summary>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.StopResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.PostEvent(SharpHook.Native.UioHookEvent@)">
            <summary>
            Posts an input event if <see cref="P:SharpHook.Testing.TestProvider.PostEventResult" /> is set to <see cref="F:SharpHook.Native.UioHookResult.Success" /> -
            this event will be dispatched if the provider is running. Otherwise, does nothing.
            </summary>
            <param name="e">The event to post.</param>
            <returns>The value of <see cref="P:SharpHook.Testing.TestProvider.PostEventResult" />.</returns>
        </member>
        <member name="M:SharpHook.Testing.TestProvider.PostText(System.String)">
            <summary>
            Simulates the input of arbitrary Unicode characters if <see cref="P:SharpHook.Testing.TestProvider.PostTextResult" /> is set to
            <see cref="F:SharpHook.Native.UioHookResult.Success" />. Otherwise, does nothing.
            </summary>
            <param name="text">The text to simulate.</param>
            <returns>
            The value of <see cref="P:SharpHook.Testing.TestProvider.PostTextResult" />, or <see cref="F:SharpHook.Native.UioHookResult.ErrorPostTextNull" /> if
            <paramref name="text" /> is <see langword="null" />.
            </returns>
            <remarks>This method doesn't cause any input events to be created, unlike real text entry simulation.</remarks>
        </member>
    </members>
</doc>
